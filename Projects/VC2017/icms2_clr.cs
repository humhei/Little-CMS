// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace icms2_clr
{
    public unsafe partial class icms2_clr
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CmsOpenProfileFromFile@@YAPEAXPEBD0@Z")]
            internal static extern global::System.IntPtr CmsOpenProfileFromFile([MarshalAs(UnmanagedType.LPStr)] string ICCProfile, [MarshalAs(UnmanagedType.LPStr)] string sAccess);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CmsCreateTransform@@YAPEAXPEAXI0III@Z")]
            internal static extern global::System.IntPtr CmsCreateTransform(global::System.IntPtr Input, uint InputFormat, global::System.IntPtr Output, uint OutputFormat, uint Intent, uint dwFlags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CmsCloseProfile@@YAHPEAX@Z")]
            internal static extern int CmsCloseProfile(global::System.IntPtr hProfile);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CmsDeleteTransform@@YAXPEAX@Z")]
            internal static extern void CmsDeleteTransform(global::System.IntPtr hTransform);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?CmsDoTransform@@YAXPEAX00I@Z")]
            internal static extern void CmsDoTransform(global::System.IntPtr Transform, global::System.IntPtr InputBuffer, global::System.IntPtr OutputBuffer, uint Size);
        }

        public static global::System.IntPtr CmsOpenProfileFromFile(string ICCProfile, string sAccess)
        {
            var __ret = __Internal.CmsOpenProfileFromFile(ICCProfile, sAccess);
            return __ret;
        }

        public static global::System.IntPtr CmsCreateTransform(global::System.IntPtr Input, uint InputFormat, global::System.IntPtr Output, uint OutputFormat, uint Intent, uint dwFlags)
        {
            var __ret = __Internal.CmsCreateTransform(Input, InputFormat, Output, OutputFormat, Intent, dwFlags);
            return __ret;
        }

        public static int CmsCloseProfile(global::System.IntPtr hProfile)
        {
            var __ret = __Internal.CmsCloseProfile(hProfile);
            return __ret;
        }

        public static void CmsDeleteTransform(global::System.IntPtr hTransform)
        {
            __Internal.CmsDeleteTransform(hTransform);
        }

        public static void CmsDoTransform(global::System.IntPtr Transform, global::System.IntPtr InputBuffer, global::System.IntPtr OutputBuffer, uint Size)
        {
            __Internal.CmsDoTransform(Transform, InputBuffer, OutputBuffer, Size);
        }

        public static uint ConstTYPE_RGB_FLT
        {
            get
            {
                var __ptr = (uint*)CppSharp.SymbolResolver.ResolveSymbol("icms2_clr", "?Const_TYPE_RGB_FLT@@3IA");
                return *__ptr;
            }

            set
            {
                var __ptr = (uint*)CppSharp.SymbolResolver.ResolveSymbol("icms2_clr", "?Const_TYPE_RGB_FLT@@3IA");
                *__ptr = value;
            }
        }

        public static uint ConstTYPE_CMYK_FLT
        {
            get
            {
                var __ptr = (uint*)CppSharp.SymbolResolver.ResolveSymbol("icms2_clr", "?Const_TYPE_CMYK_FLT@@3IA");
                return *__ptr;
            }

            set
            {
                var __ptr = (uint*)CppSharp.SymbolResolver.ResolveSymbol("icms2_clr", "?Const_TYPE_CMYK_FLT@@3IA");
                *__ptr = value;
            }
        }

        public static uint ConstTYPE_LAB_FLT
        {
            get
            {
                var __ptr = (uint*)CppSharp.SymbolResolver.ResolveSymbol("icms2_clr", "?Const_TYPE_LAB_FLT@@3IA");
                return *__ptr;
            }

            set
            {
                var __ptr = (uint*)CppSharp.SymbolResolver.ResolveSymbol("icms2_clr", "?Const_TYPE_LAB_FLT@@3IA");
                *__ptr = value;
            }
        }

        public static uint ConstINTNET_PERCEPTUAL
        {
            get
            {
                var __ptr = (uint*)CppSharp.SymbolResolver.ResolveSymbol("icms2_clr", "?Const_INTNET_PERCEPTUAL@@3IA");
                return *__ptr;
            }

            set
            {
                var __ptr = (uint*)CppSharp.SymbolResolver.ResolveSymbol("icms2_clr", "?Const_INTNET_PERCEPTUAL@@3IA");
                *__ptr = value;
            }
        }

        public static uint ConstINTNET_RELATIVE_COLORIMETRIC
        {
            get
            {
                var __ptr = (uint*)CppSharp.SymbolResolver.ResolveSymbol("icms2_clr", "?Const_INTNET_RELATIVE_COLORIMETRIC@@3IA");
                return *__ptr;
            }

            set
            {
                var __ptr = (uint*)CppSharp.SymbolResolver.ResolveSymbol("icms2_clr", "?Const_INTNET_RELATIVE_COLORIMETRIC@@3IA");
                *__ptr = value;
            }
        }
    }

    public enum CmsTagTypeSignature
    {
        CmsSigChromaticityType = 1667789421,
        CmsSigColorantOrderType = 1668051567,
        CmsSigColorantTableType = 1668051572,
        CmsSigCrdInfoType = 1668441193,
        CmsSigCurveType = 1668641398,
        CmsSigDataType = 1684108385,
        CmsSigDictType = 1684628340,
        CmsSigDateTimeType = 1685350765,
        CmsSigDeviceSettingsType = 1684371059,
        CmsSigLut16Type = 1835430962,
        CmsSigLut8Type = 1835430961,
        CmsSigLutAtoBType = 1832993312,
        CmsSigLutBtoAType = 1833058592,
        CmsSigMeasurementType = 1835360627,
        CmsSigMultiLocalizedUnicodeType = 1835824483,
        CmsSigMultiProcessElementType = 1836082548,
        CmsSigNamedColorType = 1852010348,
        CmsSigNamedColor2Type = 1852009522,
        CmsSigParametricCurveType = 1885434465,
        CmsSigProfileSequenceDescType = 1886610801,
        CmsSigProfileSequenceIdType = 1886611812,
        CmsSigResponseCurveSet16Type = 1919120178,
        CmsSigS15Fixed16ArrayType = 1936077618,
        CmsSigScreeningType = 1935897198,
        CmsSigSignatureType = 1936287520,
        CmsSigTextType = 1952807028,
        CmsSigTextDescriptionType = 1684370275,
        CmsSigU16Fixed16ArrayType = 1969632050,
        CmsSigUcrBgType = 1650877472,
        CmsSigUInt16ArrayType = 1969828150,
        CmsSigUInt32ArrayType = 1969828658,
        CmsSigUInt64ArrayType = 1969829428,
        CmsSigUInt8ArrayType = 1969827896,
        CmsSigVcgtType = 1986226036,
        CmsSigViewingConditionsType = 1986618743,
        CmsSigXYZType = 1482250784
    }

    public enum CmsTagSignature
    {
        CmsSigAToB0Tag = 1093812784,
        CmsSigAToB1Tag = 1093812785,
        CmsSigAToB2Tag = 1093812786,
        CmsSigBlueColorantTag = 1649957210,
        CmsSigBlueMatrixColumnTag = 1649957210,
        CmsSigBlueTRCTag = 1649693251,
        CmsSigBToA0Tag = 1110589744,
        CmsSigBToA1Tag = 1110589745,
        CmsSigBToA2Tag = 1110589746,
        CmsSigCalibrationDateTimeTag = 1667329140,
        CmsSigCharTargetTag = 1952543335,
        CmsSigChromaticAdaptationTag = 1667785060,
        CmsSigChromaticityTag = 1667789421,
        CmsSigColorantOrderTag = 1668051567,
        CmsSigColorantTableTag = 1668051572,
        CmsSigColorantTableOutTag = 1668050804,
        CmsSigColorimetricIntentImageStateTag = 1667852659,
        CmsSigCopyrightTag = 1668313716,
        CmsSigCrdInfoTag = 1668441193,
        CmsSigDataTag = 1684108385,
        CmsSigDateTimeTag = 1685350765,
        CmsSigDeviceMfgDescTag = 1684893284,
        CmsSigDeviceModelDescTag = 1684890724,
        CmsSigDeviceSettingsTag = 1684371059,
        CmsSigDToB0Tag = 1144144432,
        CmsSigDToB1Tag = 1144144433,
        CmsSigDToB2Tag = 1144144434,
        CmsSigDToB3Tag = 1144144435,
        CmsSigBToD0Tag = 1110590512,
        CmsSigBToD1Tag = 1110590513,
        CmsSigBToD2Tag = 1110590514,
        CmsSigBToD3Tag = 1110590515,
        CmsSigGamutTag = 1734438260,
        CmsSigGrayTRCTag = 1800688195,
        CmsSigGreenColorantTag = 1733843290,
        CmsSigGreenMatrixColumnTag = 1733843290,
        CmsSigGreenTRCTag = 1733579331,
        CmsSigLuminanceTag = 1819635049,
        CmsSigMeasurementTag = 1835360627,
        CmsSigMediaBlackPointTag = 1651208308,
        CmsSigMediaWhitePointTag = 2004119668,
        CmsSigNamedColorTag = 1852010348,
        CmsSigNamedColor2Tag = 1852009522,
        CmsSigOutputResponseTag = 1919251312,
        CmsSigPerceptualRenderingIntentGamutTag = 1919510320,
        CmsSigPreview0Tag = 1886545200,
        CmsSigPreview1Tag = 1886545201,
        CmsSigPreview2Tag = 1886545202,
        CmsSigProfileDescriptionTag = 1684370275,
        CmsSigProfileDescriptionMLTag = 1685283693,
        CmsSigProfileSequenceDescTag = 1886610801,
        CmsSigProfileSequenceIdTag = 1886611812,
        CmsSigPs2CRD0Tag = 1886610480,
        CmsSigPs2CRD1Tag = 1886610481,
        CmsSigPs2CRD2Tag = 1886610482,
        CmsSigPs2CRD3Tag = 1886610483,
        CmsSigPs2CSATag = 1886597747,
        CmsSigPs2RenderingIntentTag = 1886597737,
        CmsSigRedColorantTag = 1918392666,
        CmsSigRedMatrixColumnTag = 1918392666,
        CmsSigRedTRCTag = 1918128707,
        CmsSigSaturationRenderingIntentGamutTag = 1919510322,
        CmsSigScreeningDescTag = 1935897188,
        CmsSigScreeningTag = 1935897198,
        CmsSigTechnologyTag = 1952801640,
        CmsSigUcrBgTag = 1650877472,
        CmsSigViewingCondDescTag = 1987405156,
        CmsSigViewingConditionsTag = 1986618743,
        CmsSigVcgtTag = 1986226036,
        CmsSigMetaTag = 1835365473,
        CmsSigArgyllArtsTag = 1634890867
    }

    public enum CmsTechnologySignature
    {
        CmsSigDigitalCamera = 1684234605,
        CmsSigFilmScanner = 1718838126,
        CmsSigReflectiveScanner = 1920164718,
        CmsSigInkJetPrinter = 1768580468,
        CmsSigThermalWaxPrinter = 1953980792,
        CmsSigElectrophotographicPrinter = 1701865583,
        CmsSigElectrostaticPrinter = 1702065249,
        CmsSigDyeSublimationPrinter = 1685288290,
        CmsSigPhotographicPaperPrinter = 1919969391,
        CmsSigFilmWriter = 1718645358,
        CmsSigVideoMonitor = 1986618477,
        CmsSigVideoCamera = 1986618467,
        CmsSigProjectionTelevision = 1886024822,
        CmsSigCRTDisplay = 1129468960,
        CmsSigPMDisplay = 1347240992,
        CmsSigAMDisplay = 1095582752,
        CmsSigPhotoCD = 1263551300,
        CmsSigPhotoImageSetter = 1768777587,
        CmsSigGravure = 1735549302,
        CmsSigOffsetLithography = 1868981875,
        CmsSigSilkscreen = 1936288875,
        CmsSigFlexography = 1718379896,
        CmsSigMotionPictureFilmScanner = 1836082803,
        CmsSigMotionPictureFilmRecorder = 1836082802,
        CmsSigDigitalMotionPictureCamera = 1684893795,
        CmsSigDigitalCinemaProjector = 1684236912
    }

    public enum CmsColorSpaceSignature
    {
        CmsSigXYZData = 1482250784,
        CmsSigLabData = 1281450528,
        CmsSigLuvData = 1282766368,
        CmsSigYCbCrData = 1497588338,
        CmsSigYxyData = 1501067552,
        CmsSigRgbData = 1380401696,
        CmsSigGrayData = 1196573017,
        CmsSigHsvData = 1213421088,
        CmsSigHlsData = 1212961568,
        CmsSigCmykData = 1129142603,
        CmsSigCmyData = 1129142560,
        CmsSigMCH1Data = 1296255025,
        CmsSigMCH2Data = 1296255026,
        CmsSigMCH3Data = 1296255027,
        CmsSigMCH4Data = 1296255028,
        CmsSigMCH5Data = 1296255029,
        CmsSigMCH6Data = 1296255030,
        CmsSigMCH7Data = 1296255031,
        CmsSigMCH8Data = 1296255032,
        CmsSigMCH9Data = 1296255033,
        CmsSigMCHAData = 1296255041,
        CmsSigMCHBData = 1296255042,
        CmsSigMCHCData = 1296255043,
        CmsSigMCHDData = 1296255044,
        CmsSigMCHEData = 1296255045,
        CmsSigMCHFData = 1296255046,
        CmsSigNamedData = 1852662636,
        CmsSig1colorData = 826494034,
        CmsSig2colorData = 843271250,
        CmsSig3colorData = 860048466,
        CmsSig4colorData = 876825682,
        CmsSig5colorData = 893602898,
        CmsSig6colorData = 910380114,
        CmsSig7colorData = 927157330,
        CmsSig8colorData = 943934546,
        CmsSig9colorData = 960711762,
        CmsSig10colorData = 1094929490,
        CmsSig11colorData = 1111706706,
        CmsSig12colorData = 1128483922,
        CmsSig13colorData = 1145261138,
        CmsSig14colorData = 1162038354,
        CmsSig15colorData = 1178815570,
        CmsSigLuvKData = 1282766411
    }

    public enum CmsProfileClassSignature
    {
        CmsSigInputClass = 1935896178,
        CmsSigDisplayClass = 1835955314,
        CmsSigOutputClass = 1886549106,
        CmsSigLinkClass = 1818848875,
        CmsSigAbstractClass = 1633842036,
        CmsSigColorSpaceClass = 1936744803,
        CmsSigNamedColorClass = 1852662636
    }

    public enum CmsPlatformSignature
    {
        CmsSigMacintosh = 1095782476,
        CmsSigMicrosoft = 1297303124,
        CmsSigSolaris = 1398099543,
        CmsSigSGI = 1397180704,
        CmsSigTaligent = 1413959252,
        CmsSigUnices = 711879032
    }

    public enum CmsStageSignature
    {
        CmsSigCurveSetElemType = 1668707188,
        CmsSigMatrixElemType = 1835103334,
        CmsSigCLutElemType = 1668052340,
        CmsSigBAcsElemType = 1648444243,
        CmsSigEAcsElemType = 1698775891,
        CmsSigXYZ2LabElemType = 1815246880,
        CmsSigLab2XYZElemType = 2016570400,
        CmsSigNamedColorElemType = 1852009504,
        CmsSigLabV2toV4 = 840971296,
        CmsSigLabV4toV2 = 874525216,
        CmsSigIdentityElemType = 1768189472,
        CmsSigLab2FloatPCS = 1681026080,
        CmsSigFloatPCS2Lab = 1815241760,
        CmsSigXYZ2FloatPCS = 1681029152,
        CmsSigFloatPCS2XYZ = 2016568352,
        CmsSigClipNegativesElemType = 1668050976
    }

    public enum CmsCurveSegSignature
    {
        CmsSigFormulaCurveSeg = 1885434470,
        CmsSigSampledCurveSeg = 1935764838,
        CmsSigSegmentedCurve = 1668641382
    }

    public enum CmsStageLoc
    {
        CmsAT_BEGIN = 0,
        CmsAT_END = 1
    }

    public enum CmsInfoType
    {
        CmsInfoDescription = 0,
        CmsInfoManufacturer = 1,
        CmsInfoModel = 2,
        CmsInfoCopyright = 3
    }

    public enum CmsPSResourceType
    {
        CmsPS_RESOURCE_CSA = 0,
        CmsPS_RESOURCE_CRD = 1
    }

    public enum Format
    {
        TYPE_GRAY_8 = 0,
        TYPE_GRAY_8_REV = 0,
        TYPE_GRAY_16 = 0,
        TYPE_GRAY_16_REV = 0,
        TYPE_GRAY_16_SE = 0,
        TYPE_GRAYA_8 = 0,
        TYPE_GRAYA_16 = 0,
        TYPE_GRAYA_16_SE = 0,
        TYPE_GRAYA_8_PLANAR = 0,
        TYPE_GRAYA_16_PLANAR = 0,
        TYPE_RGB_8 = 0,
        TYPE_RGB_8_PLANAR = 0,
        TYPE_BGR_8 = 0,
        TYPE_BGR_8_PLANAR = 0,
        TYPE_RGB_16 = 0,
        TYPE_RGB_16_PLANAR = 0,
        TYPE_RGB_16_SE = 0,
        TYPE_BGR_16 = 0,
        TYPE_BGR_16_PLANAR = 0,
        TYPE_BGR_16_SE = 0,
        TYPE_RGBA_8 = 0,
        TYPE_RGBA_8_PLANAR = 0,
        TYPE_RGBA_16 = 0,
        TYPE_RGBA_16_PLANAR = 0,
        TYPE_RGBA_16_SE = 0,
        TYPE_ARGB_8 = 0,
        TYPE_ARGB_8_PLANAR = 0,
        TYPE_ARGB_16 = 0,
        TYPE_ABGR_8 = 0,
        TYPE_ABGR_8_PLANAR = 0,
        TYPE_ABGR_16 = 0,
        TYPE_ABGR_16_PLANAR = 0,
        TYPE_ABGR_16_SE = 0,
        TYPE_BGRA_8 = 0,
        TYPE_BGRA_8_PLANAR = 0,
        TYPE_BGRA_16 = 0,
        TYPE_BGRA_16_SE = 0,
        TYPE_CMY_8 = 0,
        TYPE_CMY_8_PLANAR = 0,
        TYPE_CMY_16 = 0,
        TYPE_CMY_16_PLANAR = 0,
        TYPE_CMY_16_SE = 0,
        TYPE_CMYK_8 = 0,
        TYPE_CMYKA_8 = 0,
        TYPE_CMYK_8_REV = 0,
        TYPE_YUVK_8 = 0,
        TYPE_CMYK_8_PLANAR = 0,
        TYPE_CMYK_16 = 0,
        TYPE_CMYK_16_REV = 0,
        TYPE_YUVK_16 = 0,
        TYPE_CMYK_16_PLANAR = 0,
        TYPE_CMYK_16_SE = 0,
        TYPE_KYMC_8 = 0,
        TYPE_KYMC_16 = 0,
        TYPE_KYMC_16_SE = 0,
        TYPE_KCMY_8 = 0,
        TYPE_KCMY_8_REV = 0,
        TYPE_KCMY_16 = 0,
        TYPE_KCMY_16_REV = 0,
        TYPE_KCMY_16_SE = 0,
        TYPE_CMYK5_8 = 0,
        TYPE_CMYK5_16 = 0,
        TYPE_CMYK5_16_SE = 0,
        TYPE_KYMC5_8 = 0,
        TYPE_KYMC5_16 = 0,
        TYPE_KYMC5_16_SE = 0,
        TYPE_CMYK6_8 = 0,
        TYPE_CMYK6_8_PLANAR = 0,
        TYPE_CMYK6_16 = 0,
        TYPE_CMYK6_16_PLANAR = 0,
        TYPE_CMYK6_16_SE = 0,
        TYPE_CMYK7_8 = 0,
        TYPE_CMYK7_16 = 0,
        TYPE_CMYK7_16_SE = 0,
        TYPE_KYMC7_8 = 0,
        TYPE_KYMC7_16 = 0,
        TYPE_KYMC7_16_SE = 0,
        TYPE_CMYK8_8 = 0,
        TYPE_CMYK8_16 = 0,
        TYPE_CMYK8_16_SE = 0,
        TYPE_KYMC8_8 = 0,
        TYPE_KYMC8_16 = 0,
        TYPE_KYMC8_16_SE = 0,
        TYPE_CMYK9_8 = 0,
        TYPE_CMYK9_16 = 0,
        TYPE_CMYK9_16_SE = 0,
        TYPE_KYMC9_8 = 0,
        TYPE_KYMC9_16 = 0,
        TYPE_KYMC9_16_SE = 0,
        TYPE_CMYK10_8 = 0,
        TYPE_CMYK10_16 = 0,
        TYPE_CMYK10_16_SE = 0,
        TYPE_KYMC10_8 = 0,
        TYPE_KYMC10_16 = 0,
        TYPE_KYMC10_16_SE = 0,
        TYPE_CMYK11_8 = 0,
        TYPE_CMYK11_16 = 0,
        TYPE_CMYK11_16_SE = 0,
        TYPE_KYMC11_8 = 0,
        TYPE_KYMC11_16 = 0,
        TYPE_KYMC11_16_SE = 0,
        TYPE_CMYK12_8 = 0,
        TYPE_CMYK12_16 = 0,
        TYPE_CMYK12_16_SE = 0,
        TYPE_KYMC12_8 = 0,
        TYPE_KYMC12_16 = 0,
        TYPE_KYMC12_16_SE = 0,
        TYPE_XYZ_16 = 0,
        TYPE_Lab_8 = 0,
        TYPE_LabV2_8 = 0,
        TYPE_ALab_8 = 0,
        TYPE_ALabV2_8 = 0,
        TYPE_Lab_16 = 0,
        TYPE_LabV2_16 = 0,
        TYPE_Yxy_16 = 0,
        TYPE_YCbCr_8 = 0,
        TYPE_YCbCr_8_PLANAR = 0,
        TYPE_YCbCr_16 = 0,
        TYPE_YCbCr_16_PLANAR = 0,
        TYPE_YCbCr_16_SE = 0,
        TYPE_YUV_8 = 0,
        TYPE_YUV_8_PLANAR = 0,
        TYPE_YUV_16 = 0,
        TYPE_YUV_16_PLANAR = 0,
        TYPE_YUV_16_SE = 0,
        TYPE_HLS_8 = 0,
        TYPE_HLS_8_PLANAR = 0,
        TYPE_HLS_16 = 0,
        TYPE_HLS_16_PLANAR = 0,
        TYPE_HLS_16_SE = 0,
        TYPE_HSV_8 = 0,
        TYPE_HSV_8_PLANAR = 0,
        TYPE_HSV_16 = 0,
        TYPE_HSV_16_PLANAR = 0,
        TYPE_HSV_16_SE = 0,
        TYPE_NAMED_COLOR_INDEX = 0,
        TYPE_XYZ_FLT = 0,
        TYPE_Lab_FLT = 0,
        TYPE_LabA_FLT = 0,
        TYPE_GRAY_FLT = 0,
        TYPE_RGB_FLT = 0,
        TYPE_RGBA_FLT = 0,
        TYPE_ARGB_FLT = 0,
        TYPE_BGR_FLT = 0,
        TYPE_BGRA_FLT = 0,
        TYPE_ABGR_FLT = 0,
        TYPE_CMYK_FLT = 0,
        TYPE_XYZ_DBL = 0,
        TYPE_Lab_DBL = 0,
        TYPE_GRAY_DBL = 0,
        TYPE_RGB_DBL = 0,
        TYPE_BGR_DBL = 0,
        TYPE_CMYK_DBL = 0,
        TYPE_GRAY_HALF_FLT = 0,
        TYPE_RGB_HALF_FLT = 0,
        TYPE_RGBA_HALF_FLT = 0,
        TYPE_CMYK_HALF_FLT = 0,
        TYPE_ARGB_HALF_FLT = 0,
        TYPE_BGR_HALF_FLT = 0,
        TYPE_BGRA_HALF_FLT = 0,
        TYPE_ABGR_HALF_FLT = 0,
        cmsILLUMINANT_TYPE_UNKNOWN = 0,
        cmsILLUMINANT_TYPE_D50 = 1,
        cmsILLUMINANT_TYPE_D65 = 2,
        cmsILLUMINANT_TYPE_D93 = 3,
        cmsILLUMINANT_TYPE_F2 = 4,
        cmsILLUMINANT_TYPE_D55 = 5,
        cmsILLUMINANT_TYPE_A = 6,
        cmsILLUMINANT_TYPE_E = 7,
        cmsILLUMINANT_TYPE_F8 = 8
    }

    public enum Format
    {
        INTENT_PERCEPTUAL = 0,
        INTENT_RELATIVE_COLORIMETRIC = 1,
        INTENT_SATURATION = 2,
        INTENT_ABSOLUTE_COLORIMETRIC = 3,
        INTENT_PRESERVE_K_ONLY_PERCEPTUAL = 10,
        INTENT_PRESERVE_K_ONLY_RELATIVE_COLORIMETRIC = 11,
        INTENT_PRESERVE_K_ONLY_SATURATION = 12,
        INTENT_PRESERVE_K_PLANE_PERCEPTUAL = 13,
        INTENT_PRESERVE_K_PLANE_RELATIVE_COLORIMETRIC = 14,
        INTENT_PRESERVE_K_PLANE_SATURATION = 15
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void CmsLogErrorHandlerFunction(global::System.IntPtr ContextID, uint ErrorCode, [MarshalAs(UnmanagedType.LPStr)] string Text);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int CmsSAMPLER16(ushort[] In, ushort[] Out, global::System.IntPtr Cargo);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int CmsSAMPLERFLOAT(float[] In, float[] Out, global::System.IntPtr Cargo);

    public unsafe partial class CmsICCData : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint len;

            [FieldOffset(4)]
            internal uint flag;

            [FieldOffset(8)]
            internal fixed byte data[1];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0cmsICCData@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsICCData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsICCData>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsICCData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsICCData(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsICCData __CreateInstance(global::icms2_clr.CmsICCData.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsICCData(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsICCData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsICCData.__Internal));
            *(global::icms2_clr.CmsICCData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsICCData(global::icms2_clr.CmsICCData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsICCData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CmsICCData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsICCData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CmsICCData(global::icms2_clr.CmsICCData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsICCData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::icms2_clr.CmsICCData.__Internal*) __Instance) = *((global::icms2_clr.CmsICCData.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::icms2_clr.CmsICCData __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Len
        {
            get
            {
                return ((global::icms2_clr.CmsICCData.__Internal*) __Instance)->len;
            }

            set
            {
                ((global::icms2_clr.CmsICCData.__Internal*)__Instance)->len = value;
            }
        }

        public uint Flag
        {
            get
            {
                return ((global::icms2_clr.CmsICCData.__Internal*) __Instance)->flag;
            }

            set
            {
                ((global::icms2_clr.CmsICCData.__Internal*)__Instance)->flag = value;
            }
        }

        public byte[] Data
        {
            get
            {
                byte[] __value = null;
                if (((global::icms2_clr.CmsICCData.__Internal*) __Instance)->data != null)
                {
                    __value = new byte[1];
                    for (int i = 0; i < 1; i++)
                        __value[i] = ((global::icms2_clr.CmsICCData.__Internal*) __Instance)->data[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 1; i++)
                        ((global::icms2_clr.CmsICCData.__Internal*)__Instance)->data[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class CmsContextStruct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsContextStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsContextStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsContextStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsContextStruct(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsContextStruct __CreateInstance(global::icms2_clr.CmsContextStruct.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsContextStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsContextStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsContextStruct.__Internal));
            *(global::icms2_clr.CmsContextStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsContextStruct(global::icms2_clr.CmsContextStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsContextStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CmsCurveStruct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsCurveStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsCurveStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsCurveStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsCurveStruct(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsCurveStruct __CreateInstance(global::icms2_clr.CmsCurveStruct.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsCurveStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsCurveStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsCurveStruct.__Internal));
            *(global::icms2_clr.CmsCurveStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsCurveStruct(global::icms2_clr.CmsCurveStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsCurveStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CmsPipelineStruct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsPipelineStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsPipelineStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsPipelineStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsPipelineStruct(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsPipelineStruct __CreateInstance(global::icms2_clr.CmsPipelineStruct.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsPipelineStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsPipelineStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsPipelineStruct.__Internal));
            *(global::icms2_clr.CmsPipelineStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsPipelineStruct(global::icms2_clr.CmsPipelineStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsPipelineStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CmsStageStruct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsStageStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsStageStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsStageStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsStageStruct(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsStageStruct __CreateInstance(global::icms2_clr.CmsStageStruct.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsStageStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsStageStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsStageStruct.__Internal));
            *(global::icms2_clr.CmsStageStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsStageStruct(global::icms2_clr.CmsStageStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsStageStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CmsMLU_struct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsMLU_struct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsMLU_struct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsMLU_struct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsMLU_struct(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsMLU_struct __CreateInstance(global::icms2_clr.CmsMLU_struct.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsMLU_struct(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsMLU_struct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsMLU_struct.__Internal));
            *(global::icms2_clr.CmsMLU_struct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsMLU_struct(global::icms2_clr.CmsMLU_struct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsMLU_struct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CmsNAMEDCOLORLIST_struct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsNAMEDCOLORLIST_struct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsNAMEDCOLORLIST_struct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsNAMEDCOLORLIST_struct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsNAMEDCOLORLIST_struct(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsNAMEDCOLORLIST_struct __CreateInstance(global::icms2_clr.CmsNAMEDCOLORLIST_struct.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsNAMEDCOLORLIST_struct(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsNAMEDCOLORLIST_struct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsNAMEDCOLORLIST_struct.__Internal));
            *(global::icms2_clr.CmsNAMEDCOLORLIST_struct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsNAMEDCOLORLIST_struct(global::icms2_clr.CmsNAMEDCOLORLIST_struct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsNAMEDCOLORLIST_struct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CmsIoHandler
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsIoHandler> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsIoHandler>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsIoHandler __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsIoHandler(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsIoHandler __CreateInstance(global::icms2_clr.CmsIoHandler.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsIoHandler(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsIoHandler.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsIoHandler.__Internal));
            *(global::icms2_clr.CmsIoHandler.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsIoHandler(global::icms2_clr.CmsIoHandler.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsIoHandler(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CmsDateTimeNumber : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal ushort year;

            [FieldOffset(2)]
            internal ushort month;

            [FieldOffset(4)]
            internal ushort day;

            [FieldOffset(6)]
            internal ushort hours;

            [FieldOffset(8)]
            internal ushort minutes;

            [FieldOffset(10)]
            internal ushort seconds;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0cmsDateTimeNumber@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsDateTimeNumber> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsDateTimeNumber>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsDateTimeNumber __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsDateTimeNumber(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsDateTimeNumber __CreateInstance(global::icms2_clr.CmsDateTimeNumber.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsDateTimeNumber(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsDateTimeNumber.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsDateTimeNumber.__Internal));
            *(global::icms2_clr.CmsDateTimeNumber.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsDateTimeNumber(global::icms2_clr.CmsDateTimeNumber.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsDateTimeNumber(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CmsDateTimeNumber()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsDateTimeNumber.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CmsDateTimeNumber(global::icms2_clr.CmsDateTimeNumber _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsDateTimeNumber.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::icms2_clr.CmsDateTimeNumber.__Internal*) __Instance) = *((global::icms2_clr.CmsDateTimeNumber.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::icms2_clr.CmsDateTimeNumber __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ushort Year
        {
            get
            {
                return ((global::icms2_clr.CmsDateTimeNumber.__Internal*) __Instance)->year;
            }

            set
            {
                ((global::icms2_clr.CmsDateTimeNumber.__Internal*)__Instance)->year = value;
            }
        }

        public ushort Month
        {
            get
            {
                return ((global::icms2_clr.CmsDateTimeNumber.__Internal*) __Instance)->month;
            }

            set
            {
                ((global::icms2_clr.CmsDateTimeNumber.__Internal*)__Instance)->month = value;
            }
        }

        public ushort Day
        {
            get
            {
                return ((global::icms2_clr.CmsDateTimeNumber.__Internal*) __Instance)->day;
            }

            set
            {
                ((global::icms2_clr.CmsDateTimeNumber.__Internal*)__Instance)->day = value;
            }
        }

        public ushort Hours
        {
            get
            {
                return ((global::icms2_clr.CmsDateTimeNumber.__Internal*) __Instance)->hours;
            }

            set
            {
                ((global::icms2_clr.CmsDateTimeNumber.__Internal*)__Instance)->hours = value;
            }
        }

        public ushort Minutes
        {
            get
            {
                return ((global::icms2_clr.CmsDateTimeNumber.__Internal*) __Instance)->minutes;
            }

            set
            {
                ((global::icms2_clr.CmsDateTimeNumber.__Internal*)__Instance)->minutes = value;
            }
        }

        public ushort Seconds
        {
            get
            {
                return ((global::icms2_clr.CmsDateTimeNumber.__Internal*) __Instance)->seconds;
            }

            set
            {
                ((global::icms2_clr.CmsDateTimeNumber.__Internal*)__Instance)->seconds = value;
            }
        }
    }

    public unsafe partial class CmsEncodedXYZNumber : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int X;

            [FieldOffset(4)]
            internal int Y;

            [FieldOffset(8)]
            internal int Z;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0cmsEncodedXYZNumber@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsEncodedXYZNumber> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsEncodedXYZNumber>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsEncodedXYZNumber __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsEncodedXYZNumber(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsEncodedXYZNumber __CreateInstance(global::icms2_clr.CmsEncodedXYZNumber.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsEncodedXYZNumber(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsEncodedXYZNumber.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsEncodedXYZNumber.__Internal));
            *(global::icms2_clr.CmsEncodedXYZNumber.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsEncodedXYZNumber(global::icms2_clr.CmsEncodedXYZNumber.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsEncodedXYZNumber(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CmsEncodedXYZNumber()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsEncodedXYZNumber.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CmsEncodedXYZNumber(global::icms2_clr.CmsEncodedXYZNumber _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsEncodedXYZNumber.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::icms2_clr.CmsEncodedXYZNumber.__Internal*) __Instance) = *((global::icms2_clr.CmsEncodedXYZNumber.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::icms2_clr.CmsEncodedXYZNumber __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int X
        {
            get
            {
                return ((global::icms2_clr.CmsEncodedXYZNumber.__Internal*) __Instance)->X;
            }

            set
            {
                ((global::icms2_clr.CmsEncodedXYZNumber.__Internal*)__Instance)->X = value;
            }
        }

        public int Y
        {
            get
            {
                return ((global::icms2_clr.CmsEncodedXYZNumber.__Internal*) __Instance)->Y;
            }

            set
            {
                ((global::icms2_clr.CmsEncodedXYZNumber.__Internal*)__Instance)->Y = value;
            }
        }

        public int Z
        {
            get
            {
                return ((global::icms2_clr.CmsEncodedXYZNumber.__Internal*) __Instance)->Z;
            }

            set
            {
                ((global::icms2_clr.CmsEncodedXYZNumber.__Internal*)__Instance)->Z = value;
            }
        }
    }

    public unsafe partial struct CmsProfileID
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed byte ID8[16];

            [FieldOffset(0)]
            internal fixed ushort ID16[8];

            [FieldOffset(0)]
            internal fixed uint ID32[4];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0cmsProfileID@@QEAA@AEBT0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        private CmsProfileID.__Internal __instance;
        internal CmsProfileID.__Internal __Instance { get { return __instance; } }

        internal static global::icms2_clr.CmsProfileID __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsProfileID(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsProfileID __CreateInstance(global::icms2_clr.CmsProfileID.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsProfileID(native, skipVTables);
        }

        private CmsProfileID(global::icms2_clr.CmsProfileID.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private CmsProfileID(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::icms2_clr.CmsProfileID.__Internal*) native;
        }

        public CmsProfileID(global::icms2_clr.CmsProfileID _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public byte[] ID8
        {
            get
            {
                fixed (byte* __arrPtr = __instance.ID8)
                {
                    byte[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new byte[16];
                        for (int i = 0; i < 16; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (byte* __arrPtr = __instance.ID8)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 16; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public ushort[] ID16
        {
            get
            {
                fixed (ushort* __arrPtr = __instance.ID16)
                {
                    ushort[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new ushort[8];
                        for (int i = 0; i < 8; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (ushort* __arrPtr = __instance.ID16)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 8; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }

        public uint[] ID32
        {
            get
            {
                fixed (uint* __arrPtr = __instance.ID32)
                {
                    uint[] __value = null;
                    if (__arrPtr != null)
                    {
                        __value = new uint[4];
                        for (int i = 0; i < 4; i++)
                            __value[i] = __arrPtr[i];
                    }
                    return __value;
                }
            }

            set
            {
                fixed (uint* __arrPtr = __instance.ID32)
                {
                    if (value != null)
                    {
                        for (int i = 0; i < 4; i++)
                            __arrPtr[i] = value[i];
                    }
                }
            }
        }
    }

    public unsafe partial class CmsICCHeader : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 128)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint size;

            [FieldOffset(4)]
            internal uint cmmId;

            [FieldOffset(8)]
            internal uint version;

            [FieldOffset(12)]
            internal global::icms2_clr.CmsProfileClassSignature deviceClass;

            [FieldOffset(16)]
            internal global::icms2_clr.CmsColorSpaceSignature colorSpace;

            [FieldOffset(20)]
            internal global::icms2_clr.CmsColorSpaceSignature pcs;

            [FieldOffset(24)]
            internal global::icms2_clr.CmsDateTimeNumber.__Internal date;

            [FieldOffset(36)]
            internal uint magic;

            [FieldOffset(40)]
            internal global::icms2_clr.CmsPlatformSignature platform;

            [FieldOffset(44)]
            internal uint flags;

            [FieldOffset(48)]
            internal uint manufacturer;

            [FieldOffset(52)]
            internal uint model;

            [FieldOffset(56)]
            internal ulong attributes;

            [FieldOffset(64)]
            internal uint renderingIntent;

            [FieldOffset(68)]
            internal global::icms2_clr.CmsEncodedXYZNumber.__Internal illuminant;

            [FieldOffset(80)]
            internal uint creator;

            [FieldOffset(84)]
            internal global::icms2_clr.CmsProfileID.__Internal profileID;

            [FieldOffset(100)]
            internal fixed sbyte reserved[28];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0cmsICCHeader@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsICCHeader> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsICCHeader>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsICCHeader __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsICCHeader(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsICCHeader __CreateInstance(global::icms2_clr.CmsICCHeader.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsICCHeader(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsICCHeader.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsICCHeader.__Internal));
            *(global::icms2_clr.CmsICCHeader.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsICCHeader(global::icms2_clr.CmsICCHeader.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsICCHeader(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CmsICCHeader()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsICCHeader.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CmsICCHeader(global::icms2_clr.CmsICCHeader _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsICCHeader.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::icms2_clr.CmsICCHeader.__Internal*) __Instance) = *((global::icms2_clr.CmsICCHeader.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::icms2_clr.CmsICCHeader __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Size
        {
            get
            {
                return ((global::icms2_clr.CmsICCHeader.__Internal*) __Instance)->size;
            }

            set
            {
                ((global::icms2_clr.CmsICCHeader.__Internal*)__Instance)->size = value;
            }
        }

        public uint CmmId
        {
            get
            {
                return ((global::icms2_clr.CmsICCHeader.__Internal*) __Instance)->cmmId;
            }

            set
            {
                ((global::icms2_clr.CmsICCHeader.__Internal*)__Instance)->cmmId = value;
            }
        }

        public uint Version
        {
            get
            {
                return ((global::icms2_clr.CmsICCHeader.__Internal*) __Instance)->version;
            }

            set
            {
                ((global::icms2_clr.CmsICCHeader.__Internal*)__Instance)->version = value;
            }
        }

        public global::icms2_clr.CmsProfileClassSignature DeviceClass
        {
            get
            {
                return ((global::icms2_clr.CmsICCHeader.__Internal*) __Instance)->deviceClass;
            }

            set
            {
                ((global::icms2_clr.CmsICCHeader.__Internal*)__Instance)->deviceClass = value;
            }
        }

        public global::icms2_clr.CmsColorSpaceSignature ColorSpace
        {
            get
            {
                return ((global::icms2_clr.CmsICCHeader.__Internal*) __Instance)->colorSpace;
            }

            set
            {
                ((global::icms2_clr.CmsICCHeader.__Internal*)__Instance)->colorSpace = value;
            }
        }

        public global::icms2_clr.CmsColorSpaceSignature Pcs
        {
            get
            {
                return ((global::icms2_clr.CmsICCHeader.__Internal*) __Instance)->pcs;
            }

            set
            {
                ((global::icms2_clr.CmsICCHeader.__Internal*)__Instance)->pcs = value;
            }
        }

        public global::icms2_clr.CmsDateTimeNumber Date
        {
            get
            {
                return global::icms2_clr.CmsDateTimeNumber.__CreateInstance(new global::System.IntPtr(&((global::icms2_clr.CmsICCHeader.__Internal*) __Instance)->date));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::icms2_clr.CmsICCHeader.__Internal*)__Instance)->date = *(global::icms2_clr.CmsDateTimeNumber.__Internal*) value.__Instance;
            }
        }

        public uint Magic
        {
            get
            {
                return ((global::icms2_clr.CmsICCHeader.__Internal*) __Instance)->magic;
            }

            set
            {
                ((global::icms2_clr.CmsICCHeader.__Internal*)__Instance)->magic = value;
            }
        }

        public global::icms2_clr.CmsPlatformSignature Platform
        {
            get
            {
                return ((global::icms2_clr.CmsICCHeader.__Internal*) __Instance)->platform;
            }

            set
            {
                ((global::icms2_clr.CmsICCHeader.__Internal*)__Instance)->platform = value;
            }
        }

        public uint Flags
        {
            get
            {
                return ((global::icms2_clr.CmsICCHeader.__Internal*) __Instance)->flags;
            }

            set
            {
                ((global::icms2_clr.CmsICCHeader.__Internal*)__Instance)->flags = value;
            }
        }

        public uint Manufacturer
        {
            get
            {
                return ((global::icms2_clr.CmsICCHeader.__Internal*) __Instance)->manufacturer;
            }

            set
            {
                ((global::icms2_clr.CmsICCHeader.__Internal*)__Instance)->manufacturer = value;
            }
        }

        public uint Model
        {
            get
            {
                return ((global::icms2_clr.CmsICCHeader.__Internal*) __Instance)->model;
            }

            set
            {
                ((global::icms2_clr.CmsICCHeader.__Internal*)__Instance)->model = value;
            }
        }

        public ulong Attributes
        {
            get
            {
                return ((global::icms2_clr.CmsICCHeader.__Internal*) __Instance)->attributes;
            }

            set
            {
                ((global::icms2_clr.CmsICCHeader.__Internal*)__Instance)->attributes = value;
            }
        }

        public uint RenderingIntent
        {
            get
            {
                return ((global::icms2_clr.CmsICCHeader.__Internal*) __Instance)->renderingIntent;
            }

            set
            {
                ((global::icms2_clr.CmsICCHeader.__Internal*)__Instance)->renderingIntent = value;
            }
        }

        public global::icms2_clr.CmsEncodedXYZNumber Illuminant
        {
            get
            {
                return global::icms2_clr.CmsEncodedXYZNumber.__CreateInstance(new global::System.IntPtr(&((global::icms2_clr.CmsICCHeader.__Internal*) __Instance)->illuminant));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::icms2_clr.CmsICCHeader.__Internal*)__Instance)->illuminant = *(global::icms2_clr.CmsEncodedXYZNumber.__Internal*) value.__Instance;
            }
        }

        public uint Creator
        {
            get
            {
                return ((global::icms2_clr.CmsICCHeader.__Internal*) __Instance)->creator;
            }

            set
            {
                ((global::icms2_clr.CmsICCHeader.__Internal*)__Instance)->creator = value;
            }
        }

        public global::icms2_clr.CmsProfileID ProfileID
        {
            get
            {
                return global::icms2_clr.CmsProfileID.__CreateInstance(((global::icms2_clr.CmsICCHeader.__Internal*) __Instance)->profileID);
            }

            set
            {
                ((global::icms2_clr.CmsICCHeader.__Internal*)__Instance)->profileID = value.__Instance;
            }
        }

        public sbyte[] Reserved
        {
            get
            {
                sbyte[] __value = null;
                if (((global::icms2_clr.CmsICCHeader.__Internal*) __Instance)->reserved != null)
                {
                    __value = new sbyte[28];
                    for (int i = 0; i < 28; i++)
                        __value[i] = ((global::icms2_clr.CmsICCHeader.__Internal*) __Instance)->reserved[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 28; i++)
                        ((global::icms2_clr.CmsICCHeader.__Internal*)__Instance)->reserved[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class CmsTagBase : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::icms2_clr.CmsTagTypeSignature sig;

            [FieldOffset(4)]
            internal fixed sbyte reserved[4];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0cmsTagBase@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsTagBase> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsTagBase>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsTagBase __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsTagBase(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsTagBase __CreateInstance(global::icms2_clr.CmsTagBase.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsTagBase(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsTagBase.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsTagBase.__Internal));
            *(global::icms2_clr.CmsTagBase.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsTagBase(global::icms2_clr.CmsTagBase.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsTagBase(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CmsTagBase()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsTagBase.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CmsTagBase(global::icms2_clr.CmsTagBase _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsTagBase.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::icms2_clr.CmsTagBase.__Internal*) __Instance) = *((global::icms2_clr.CmsTagBase.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::icms2_clr.CmsTagBase __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::icms2_clr.CmsTagTypeSignature Sig
        {
            get
            {
                return ((global::icms2_clr.CmsTagBase.__Internal*) __Instance)->sig;
            }

            set
            {
                ((global::icms2_clr.CmsTagBase.__Internal*)__Instance)->sig = value;
            }
        }

        public sbyte[] Reserved
        {
            get
            {
                sbyte[] __value = null;
                if (((global::icms2_clr.CmsTagBase.__Internal*) __Instance)->reserved != null)
                {
                    __value = new sbyte[4];
                    for (int i = 0; i < 4; i++)
                        __value[i] = ((global::icms2_clr.CmsTagBase.__Internal*) __Instance)->reserved[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 4; i++)
                        ((global::icms2_clr.CmsTagBase.__Internal*)__Instance)->reserved[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class CmsTagEntry : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::icms2_clr.CmsTagSignature sig;

            [FieldOffset(4)]
            internal uint offset;

            [FieldOffset(8)]
            internal uint size;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0cmsTagEntry@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsTagEntry> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsTagEntry>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsTagEntry __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsTagEntry(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsTagEntry __CreateInstance(global::icms2_clr.CmsTagEntry.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsTagEntry(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsTagEntry.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsTagEntry.__Internal));
            *(global::icms2_clr.CmsTagEntry.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsTagEntry(global::icms2_clr.CmsTagEntry.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsTagEntry(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CmsTagEntry()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsTagEntry.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CmsTagEntry(global::icms2_clr.CmsTagEntry _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsTagEntry.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::icms2_clr.CmsTagEntry.__Internal*) __Instance) = *((global::icms2_clr.CmsTagEntry.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::icms2_clr.CmsTagEntry __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::icms2_clr.CmsTagSignature Sig
        {
            get
            {
                return ((global::icms2_clr.CmsTagEntry.__Internal*) __Instance)->sig;
            }

            set
            {
                ((global::icms2_clr.CmsTagEntry.__Internal*)__Instance)->sig = value;
            }
        }

        public uint Offset
        {
            get
            {
                return ((global::icms2_clr.CmsTagEntry.__Internal*) __Instance)->offset;
            }

            set
            {
                ((global::icms2_clr.CmsTagEntry.__Internal*)__Instance)->offset = value;
            }
        }

        public uint Size
        {
            get
            {
                return ((global::icms2_clr.CmsTagEntry.__Internal*) __Instance)->size;
            }

            set
            {
                ((global::icms2_clr.CmsTagEntry.__Internal*)__Instance)->size = value;
            }
        }
    }

    public unsafe partial class CmsCIEXYZ : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal double X;

            [FieldOffset(8)]
            internal double Y;

            [FieldOffset(16)]
            internal double Z;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0cmsCIEXYZ@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsCIEXYZ> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsCIEXYZ>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsCIEXYZ __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsCIEXYZ(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsCIEXYZ __CreateInstance(global::icms2_clr.CmsCIEXYZ.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsCIEXYZ(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsCIEXYZ.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsCIEXYZ.__Internal));
            *(global::icms2_clr.CmsCIEXYZ.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsCIEXYZ(global::icms2_clr.CmsCIEXYZ.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsCIEXYZ(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CmsCIEXYZ()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsCIEXYZ.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CmsCIEXYZ(global::icms2_clr.CmsCIEXYZ _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsCIEXYZ.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::icms2_clr.CmsCIEXYZ.__Internal*) __Instance) = *((global::icms2_clr.CmsCIEXYZ.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::icms2_clr.CmsCIEXYZ __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public double X
        {
            get
            {
                return ((global::icms2_clr.CmsCIEXYZ.__Internal*) __Instance)->X;
            }

            set
            {
                ((global::icms2_clr.CmsCIEXYZ.__Internal*)__Instance)->X = value;
            }
        }

        public double Y
        {
            get
            {
                return ((global::icms2_clr.CmsCIEXYZ.__Internal*) __Instance)->Y;
            }

            set
            {
                ((global::icms2_clr.CmsCIEXYZ.__Internal*)__Instance)->Y = value;
            }
        }

        public double Z
        {
            get
            {
                return ((global::icms2_clr.CmsCIEXYZ.__Internal*) __Instance)->Z;
            }

            set
            {
                ((global::icms2_clr.CmsCIEXYZ.__Internal*)__Instance)->Z = value;
            }
        }
    }

    public unsafe partial class CmsCIExyY : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal double x;

            [FieldOffset(8)]
            internal double y;

            [FieldOffset(16)]
            internal double Y;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0cmsCIExyY@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsCIExyY> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsCIExyY>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsCIExyY __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsCIExyY(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsCIExyY __CreateInstance(global::icms2_clr.CmsCIExyY.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsCIExyY(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsCIExyY.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsCIExyY.__Internal));
            *(global::icms2_clr.CmsCIExyY.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsCIExyY(global::icms2_clr.CmsCIExyY.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsCIExyY(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CmsCIExyY()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsCIExyY.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CmsCIExyY(global::icms2_clr.CmsCIExyY _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsCIExyY.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::icms2_clr.CmsCIExyY.__Internal*) __Instance) = *((global::icms2_clr.CmsCIExyY.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::icms2_clr.CmsCIExyY __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public double X
        {
            get
            {
                return ((global::icms2_clr.CmsCIExyY.__Internal*) __Instance)->x;
            }

            set
            {
                ((global::icms2_clr.CmsCIExyY.__Internal*)__Instance)->x = value;
            }
        }

        public double y
        {
            get
            {
                return ((global::icms2_clr.CmsCIExyY.__Internal*) __Instance)->y;
            }

            set
            {
                ((global::icms2_clr.CmsCIExyY.__Internal*)__Instance)->y = value;
            }
        }

        public double Y
        {
            get
            {
                return ((global::icms2_clr.CmsCIExyY.__Internal*) __Instance)->Y;
            }

            set
            {
                ((global::icms2_clr.CmsCIExyY.__Internal*)__Instance)->Y = value;
            }
        }
    }

    public unsafe partial class CmsCIELab : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal double L;

            [FieldOffset(8)]
            internal double a;

            [FieldOffset(16)]
            internal double b;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0cmsCIELab@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsCIELab> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsCIELab>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsCIELab __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsCIELab(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsCIELab __CreateInstance(global::icms2_clr.CmsCIELab.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsCIELab(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsCIELab.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsCIELab.__Internal));
            *(global::icms2_clr.CmsCIELab.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsCIELab(global::icms2_clr.CmsCIELab.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsCIELab(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CmsCIELab()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsCIELab.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CmsCIELab(global::icms2_clr.CmsCIELab _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsCIELab.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::icms2_clr.CmsCIELab.__Internal*) __Instance) = *((global::icms2_clr.CmsCIELab.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::icms2_clr.CmsCIELab __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public double L
        {
            get
            {
                return ((global::icms2_clr.CmsCIELab.__Internal*) __Instance)->L;
            }

            set
            {
                ((global::icms2_clr.CmsCIELab.__Internal*)__Instance)->L = value;
            }
        }

        public double A
        {
            get
            {
                return ((global::icms2_clr.CmsCIELab.__Internal*) __Instance)->a;
            }

            set
            {
                ((global::icms2_clr.CmsCIELab.__Internal*)__Instance)->a = value;
            }
        }

        public double B
        {
            get
            {
                return ((global::icms2_clr.CmsCIELab.__Internal*) __Instance)->b;
            }

            set
            {
                ((global::icms2_clr.CmsCIELab.__Internal*)__Instance)->b = value;
            }
        }
    }

    public unsafe partial class CmsCIELCh : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal double L;

            [FieldOffset(8)]
            internal double C;

            [FieldOffset(16)]
            internal double h;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0cmsCIELCh@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsCIELCh> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsCIELCh>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsCIELCh __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsCIELCh(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsCIELCh __CreateInstance(global::icms2_clr.CmsCIELCh.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsCIELCh(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsCIELCh.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsCIELCh.__Internal));
            *(global::icms2_clr.CmsCIELCh.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsCIELCh(global::icms2_clr.CmsCIELCh.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsCIELCh(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CmsCIELCh()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsCIELCh.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CmsCIELCh(global::icms2_clr.CmsCIELCh _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsCIELCh.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::icms2_clr.CmsCIELCh.__Internal*) __Instance) = *((global::icms2_clr.CmsCIELCh.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::icms2_clr.CmsCIELCh __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public double L
        {
            get
            {
                return ((global::icms2_clr.CmsCIELCh.__Internal*) __Instance)->L;
            }

            set
            {
                ((global::icms2_clr.CmsCIELCh.__Internal*)__Instance)->L = value;
            }
        }

        public double C
        {
            get
            {
                return ((global::icms2_clr.CmsCIELCh.__Internal*) __Instance)->C;
            }

            set
            {
                ((global::icms2_clr.CmsCIELCh.__Internal*)__Instance)->C = value;
            }
        }

        public double H
        {
            get
            {
                return ((global::icms2_clr.CmsCIELCh.__Internal*) __Instance)->h;
            }

            set
            {
                ((global::icms2_clr.CmsCIELCh.__Internal*)__Instance)->h = value;
            }
        }
    }

    public unsafe partial class CmsJCh : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal double J;

            [FieldOffset(8)]
            internal double C;

            [FieldOffset(16)]
            internal double h;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0cmsJCh@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsJCh> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsJCh>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsJCh __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsJCh(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsJCh __CreateInstance(global::icms2_clr.CmsJCh.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsJCh(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsJCh.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsJCh.__Internal));
            *(global::icms2_clr.CmsJCh.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsJCh(global::icms2_clr.CmsJCh.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsJCh(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CmsJCh()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsJCh.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CmsJCh(global::icms2_clr.CmsJCh _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsJCh.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::icms2_clr.CmsJCh.__Internal*) __Instance) = *((global::icms2_clr.CmsJCh.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::icms2_clr.CmsJCh __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public double J
        {
            get
            {
                return ((global::icms2_clr.CmsJCh.__Internal*) __Instance)->J;
            }

            set
            {
                ((global::icms2_clr.CmsJCh.__Internal*)__Instance)->J = value;
            }
        }

        public double C
        {
            get
            {
                return ((global::icms2_clr.CmsJCh.__Internal*) __Instance)->C;
            }

            set
            {
                ((global::icms2_clr.CmsJCh.__Internal*)__Instance)->C = value;
            }
        }

        public double H
        {
            get
            {
                return ((global::icms2_clr.CmsJCh.__Internal*) __Instance)->h;
            }

            set
            {
                ((global::icms2_clr.CmsJCh.__Internal*)__Instance)->h = value;
            }
        }
    }

    public unsafe partial class CmsCIEXYZTRIPLE : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 72)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::icms2_clr.CmsCIEXYZ.__Internal Red;

            [FieldOffset(24)]
            internal global::icms2_clr.CmsCIEXYZ.__Internal Green;

            [FieldOffset(48)]
            internal global::icms2_clr.CmsCIEXYZ.__Internal Blue;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0cmsCIEXYZTRIPLE@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsCIEXYZTRIPLE> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsCIEXYZTRIPLE>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsCIEXYZTRIPLE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsCIEXYZTRIPLE(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsCIEXYZTRIPLE __CreateInstance(global::icms2_clr.CmsCIEXYZTRIPLE.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsCIEXYZTRIPLE(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsCIEXYZTRIPLE.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsCIEXYZTRIPLE.__Internal));
            *(global::icms2_clr.CmsCIEXYZTRIPLE.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsCIEXYZTRIPLE(global::icms2_clr.CmsCIEXYZTRIPLE.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsCIEXYZTRIPLE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CmsCIEXYZTRIPLE()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsCIEXYZTRIPLE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CmsCIEXYZTRIPLE(global::icms2_clr.CmsCIEXYZTRIPLE _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsCIEXYZTRIPLE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::icms2_clr.CmsCIEXYZTRIPLE.__Internal*) __Instance) = *((global::icms2_clr.CmsCIEXYZTRIPLE.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::icms2_clr.CmsCIEXYZTRIPLE __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::icms2_clr.CmsCIEXYZ Red
        {
            get
            {
                return global::icms2_clr.CmsCIEXYZ.__CreateInstance(new global::System.IntPtr(&((global::icms2_clr.CmsCIEXYZTRIPLE.__Internal*) __Instance)->Red));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::icms2_clr.CmsCIEXYZTRIPLE.__Internal*)__Instance)->Red = *(global::icms2_clr.CmsCIEXYZ.__Internal*) value.__Instance;
            }
        }

        public global::icms2_clr.CmsCIEXYZ Green
        {
            get
            {
                return global::icms2_clr.CmsCIEXYZ.__CreateInstance(new global::System.IntPtr(&((global::icms2_clr.CmsCIEXYZTRIPLE.__Internal*) __Instance)->Green));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::icms2_clr.CmsCIEXYZTRIPLE.__Internal*)__Instance)->Green = *(global::icms2_clr.CmsCIEXYZ.__Internal*) value.__Instance;
            }
        }

        public global::icms2_clr.CmsCIEXYZ Blue
        {
            get
            {
                return global::icms2_clr.CmsCIEXYZ.__CreateInstance(new global::System.IntPtr(&((global::icms2_clr.CmsCIEXYZTRIPLE.__Internal*) __Instance)->Blue));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::icms2_clr.CmsCIEXYZTRIPLE.__Internal*)__Instance)->Blue = *(global::icms2_clr.CmsCIEXYZ.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class CmsCIExyYTRIPLE : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 72)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::icms2_clr.CmsCIExyY.__Internal Red;

            [FieldOffset(24)]
            internal global::icms2_clr.CmsCIExyY.__Internal Green;

            [FieldOffset(48)]
            internal global::icms2_clr.CmsCIExyY.__Internal Blue;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0cmsCIExyYTRIPLE@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsCIExyYTRIPLE> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsCIExyYTRIPLE>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsCIExyYTRIPLE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsCIExyYTRIPLE(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsCIExyYTRIPLE __CreateInstance(global::icms2_clr.CmsCIExyYTRIPLE.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsCIExyYTRIPLE(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsCIExyYTRIPLE.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsCIExyYTRIPLE.__Internal));
            *(global::icms2_clr.CmsCIExyYTRIPLE.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsCIExyYTRIPLE(global::icms2_clr.CmsCIExyYTRIPLE.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsCIExyYTRIPLE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CmsCIExyYTRIPLE()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsCIExyYTRIPLE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CmsCIExyYTRIPLE(global::icms2_clr.CmsCIExyYTRIPLE _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsCIExyYTRIPLE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::icms2_clr.CmsCIExyYTRIPLE.__Internal*) __Instance) = *((global::icms2_clr.CmsCIExyYTRIPLE.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::icms2_clr.CmsCIExyYTRIPLE __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::icms2_clr.CmsCIExyY Red
        {
            get
            {
                return global::icms2_clr.CmsCIExyY.__CreateInstance(new global::System.IntPtr(&((global::icms2_clr.CmsCIExyYTRIPLE.__Internal*) __Instance)->Red));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::icms2_clr.CmsCIExyYTRIPLE.__Internal*)__Instance)->Red = *(global::icms2_clr.CmsCIExyY.__Internal*) value.__Instance;
            }
        }

        public global::icms2_clr.CmsCIExyY Green
        {
            get
            {
                return global::icms2_clr.CmsCIExyY.__CreateInstance(new global::System.IntPtr(&((global::icms2_clr.CmsCIExyYTRIPLE.__Internal*) __Instance)->Green));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::icms2_clr.CmsCIExyYTRIPLE.__Internal*)__Instance)->Green = *(global::icms2_clr.CmsCIExyY.__Internal*) value.__Instance;
            }
        }

        public global::icms2_clr.CmsCIExyY Blue
        {
            get
            {
                return global::icms2_clr.CmsCIExyY.__CreateInstance(new global::System.IntPtr(&((global::icms2_clr.CmsCIExyYTRIPLE.__Internal*) __Instance)->Blue));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::icms2_clr.CmsCIExyYTRIPLE.__Internal*)__Instance)->Blue = *(global::icms2_clr.CmsCIExyY.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class CmsICCMeasurementConditions : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint Observer;

            [FieldOffset(8)]
            internal global::icms2_clr.CmsCIEXYZ.__Internal Backing;

            [FieldOffset(32)]
            internal uint Geometry;

            [FieldOffset(40)]
            internal double Flare;

            [FieldOffset(48)]
            internal uint IlluminantType;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0cmsICCMeasurementConditions@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsICCMeasurementConditions> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsICCMeasurementConditions>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsICCMeasurementConditions __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsICCMeasurementConditions(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsICCMeasurementConditions __CreateInstance(global::icms2_clr.CmsICCMeasurementConditions.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsICCMeasurementConditions(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsICCMeasurementConditions.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsICCMeasurementConditions.__Internal));
            *(global::icms2_clr.CmsICCMeasurementConditions.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsICCMeasurementConditions(global::icms2_clr.CmsICCMeasurementConditions.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsICCMeasurementConditions(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CmsICCMeasurementConditions()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsICCMeasurementConditions.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CmsICCMeasurementConditions(global::icms2_clr.CmsICCMeasurementConditions _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsICCMeasurementConditions.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::icms2_clr.CmsICCMeasurementConditions.__Internal*) __Instance) = *((global::icms2_clr.CmsICCMeasurementConditions.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::icms2_clr.CmsICCMeasurementConditions __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Observer
        {
            get
            {
                return ((global::icms2_clr.CmsICCMeasurementConditions.__Internal*) __Instance)->Observer;
            }

            set
            {
                ((global::icms2_clr.CmsICCMeasurementConditions.__Internal*)__Instance)->Observer = value;
            }
        }

        public global::icms2_clr.CmsCIEXYZ Backing
        {
            get
            {
                return global::icms2_clr.CmsCIEXYZ.__CreateInstance(new global::System.IntPtr(&((global::icms2_clr.CmsICCMeasurementConditions.__Internal*) __Instance)->Backing));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::icms2_clr.CmsICCMeasurementConditions.__Internal*)__Instance)->Backing = *(global::icms2_clr.CmsCIEXYZ.__Internal*) value.__Instance;
            }
        }

        public uint Geometry
        {
            get
            {
                return ((global::icms2_clr.CmsICCMeasurementConditions.__Internal*) __Instance)->Geometry;
            }

            set
            {
                ((global::icms2_clr.CmsICCMeasurementConditions.__Internal*)__Instance)->Geometry = value;
            }
        }

        public double Flare
        {
            get
            {
                return ((global::icms2_clr.CmsICCMeasurementConditions.__Internal*) __Instance)->Flare;
            }

            set
            {
                ((global::icms2_clr.CmsICCMeasurementConditions.__Internal*)__Instance)->Flare = value;
            }
        }

        public uint IlluminantType
        {
            get
            {
                return ((global::icms2_clr.CmsICCMeasurementConditions.__Internal*) __Instance)->IlluminantType;
            }

            set
            {
                ((global::icms2_clr.CmsICCMeasurementConditions.__Internal*)__Instance)->IlluminantType = value;
            }
        }
    }

    public unsafe partial class CmsICCViewingConditions : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::icms2_clr.CmsCIEXYZ.__Internal IlluminantXYZ;

            [FieldOffset(24)]
            internal global::icms2_clr.CmsCIEXYZ.__Internal SurroundXYZ;

            [FieldOffset(48)]
            internal uint IlluminantType;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0cmsICCViewingConditions@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsICCViewingConditions> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsICCViewingConditions>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsICCViewingConditions __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsICCViewingConditions(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsICCViewingConditions __CreateInstance(global::icms2_clr.CmsICCViewingConditions.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsICCViewingConditions(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsICCViewingConditions.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsICCViewingConditions.__Internal));
            *(global::icms2_clr.CmsICCViewingConditions.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsICCViewingConditions(global::icms2_clr.CmsICCViewingConditions.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsICCViewingConditions(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CmsICCViewingConditions()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsICCViewingConditions.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CmsICCViewingConditions(global::icms2_clr.CmsICCViewingConditions _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsICCViewingConditions.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::icms2_clr.CmsICCViewingConditions.__Internal*) __Instance) = *((global::icms2_clr.CmsICCViewingConditions.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::icms2_clr.CmsICCViewingConditions __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::icms2_clr.CmsCIEXYZ IlluminantXYZ
        {
            get
            {
                return global::icms2_clr.CmsCIEXYZ.__CreateInstance(new global::System.IntPtr(&((global::icms2_clr.CmsICCViewingConditions.__Internal*) __Instance)->IlluminantXYZ));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::icms2_clr.CmsICCViewingConditions.__Internal*)__Instance)->IlluminantXYZ = *(global::icms2_clr.CmsCIEXYZ.__Internal*) value.__Instance;
            }
        }

        public global::icms2_clr.CmsCIEXYZ SurroundXYZ
        {
            get
            {
                return global::icms2_clr.CmsCIEXYZ.__CreateInstance(new global::System.IntPtr(&((global::icms2_clr.CmsICCViewingConditions.__Internal*) __Instance)->SurroundXYZ));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::icms2_clr.CmsICCViewingConditions.__Internal*)__Instance)->SurroundXYZ = *(global::icms2_clr.CmsCIEXYZ.__Internal*) value.__Instance;
            }
        }

        public uint IlluminantType
        {
            get
            {
                return ((global::icms2_clr.CmsICCViewingConditions.__Internal*) __Instance)->IlluminantType;
            }

            set
            {
                ((global::icms2_clr.CmsICCViewingConditions.__Internal*)__Instance)->IlluminantType = value;
            }
        }
    }

    public unsafe partial class CmsViewingConditions : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::icms2_clr.CmsCIEXYZ.__Internal whitePoint;

            [FieldOffset(24)]
            internal double Yb;

            [FieldOffset(32)]
            internal double La;

            [FieldOffset(40)]
            internal uint surround;

            [FieldOffset(48)]
            internal double D_value;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0cmsViewingConditions@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsViewingConditions> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsViewingConditions>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsViewingConditions __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsViewingConditions(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsViewingConditions __CreateInstance(global::icms2_clr.CmsViewingConditions.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsViewingConditions(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsViewingConditions.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsViewingConditions.__Internal));
            *(global::icms2_clr.CmsViewingConditions.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsViewingConditions(global::icms2_clr.CmsViewingConditions.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsViewingConditions(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CmsViewingConditions()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsViewingConditions.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CmsViewingConditions(global::icms2_clr.CmsViewingConditions _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsViewingConditions.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::icms2_clr.CmsViewingConditions.__Internal*) __Instance) = *((global::icms2_clr.CmsViewingConditions.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::icms2_clr.CmsViewingConditions __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::icms2_clr.CmsCIEXYZ WhitePoint
        {
            get
            {
                return global::icms2_clr.CmsCIEXYZ.__CreateInstance(new global::System.IntPtr(&((global::icms2_clr.CmsViewingConditions.__Internal*) __Instance)->whitePoint));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::icms2_clr.CmsViewingConditions.__Internal*)__Instance)->whitePoint = *(global::icms2_clr.CmsCIEXYZ.__Internal*) value.__Instance;
            }
        }

        public double Yb
        {
            get
            {
                return ((global::icms2_clr.CmsViewingConditions.__Internal*) __Instance)->Yb;
            }

            set
            {
                ((global::icms2_clr.CmsViewingConditions.__Internal*)__Instance)->Yb = value;
            }
        }

        public double La
        {
            get
            {
                return ((global::icms2_clr.CmsViewingConditions.__Internal*) __Instance)->La;
            }

            set
            {
                ((global::icms2_clr.CmsViewingConditions.__Internal*)__Instance)->La = value;
            }
        }

        public uint Surround
        {
            get
            {
                return ((global::icms2_clr.CmsViewingConditions.__Internal*) __Instance)->surround;
            }

            set
            {
                ((global::icms2_clr.CmsViewingConditions.__Internal*)__Instance)->surround = value;
            }
        }

        public double D_value
        {
            get
            {
                return ((global::icms2_clr.CmsViewingConditions.__Internal*) __Instance)->D_value;
            }

            set
            {
                ((global::icms2_clr.CmsViewingConditions.__Internal*)__Instance)->D_value = value;
            }
        }
    }

    public unsafe partial class CmsCurveSegment : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 112)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal float x0;

            [FieldOffset(4)]
            internal float x1;

            [FieldOffset(8)]
            internal int Type;

            [FieldOffset(16)]
            internal fixed double Params[10];

            [FieldOffset(96)]
            internal uint nGridPoints;

            [FieldOffset(104)]
            internal global::System.IntPtr SampledPoints;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0cmsCurveSegment@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsCurveSegment> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsCurveSegment>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsCurveSegment __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsCurveSegment(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsCurveSegment __CreateInstance(global::icms2_clr.CmsCurveSegment.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsCurveSegment(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsCurveSegment.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsCurveSegment.__Internal));
            *(global::icms2_clr.CmsCurveSegment.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsCurveSegment(global::icms2_clr.CmsCurveSegment.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsCurveSegment(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CmsCurveSegment()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsCurveSegment.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CmsCurveSegment(global::icms2_clr.CmsCurveSegment _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsCurveSegment.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::icms2_clr.CmsCurveSegment.__Internal*) __Instance) = *((global::icms2_clr.CmsCurveSegment.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::icms2_clr.CmsCurveSegment __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public float X0
        {
            get
            {
                return ((global::icms2_clr.CmsCurveSegment.__Internal*) __Instance)->x0;
            }

            set
            {
                ((global::icms2_clr.CmsCurveSegment.__Internal*)__Instance)->x0 = value;
            }
        }

        public float X1
        {
            get
            {
                return ((global::icms2_clr.CmsCurveSegment.__Internal*) __Instance)->x1;
            }

            set
            {
                ((global::icms2_clr.CmsCurveSegment.__Internal*)__Instance)->x1 = value;
            }
        }

        public int Type
        {
            get
            {
                return ((global::icms2_clr.CmsCurveSegment.__Internal*) __Instance)->Type;
            }

            set
            {
                ((global::icms2_clr.CmsCurveSegment.__Internal*)__Instance)->Type = value;
            }
        }

        public double[] Params
        {
            get
            {
                double[] __value = null;
                if (((global::icms2_clr.CmsCurveSegment.__Internal*) __Instance)->Params != null)
                {
                    __value = new double[10];
                    for (int i = 0; i < 10; i++)
                        __value[i] = ((global::icms2_clr.CmsCurveSegment.__Internal*) __Instance)->Params[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 10; i++)
                        ((global::icms2_clr.CmsCurveSegment.__Internal*)__Instance)->Params[i] = value[i];
                }
            }
        }

        public uint NGridPoints
        {
            get
            {
                return ((global::icms2_clr.CmsCurveSegment.__Internal*) __Instance)->nGridPoints;
            }

            set
            {
                ((global::icms2_clr.CmsCurveSegment.__Internal*)__Instance)->nGridPoints = value;
            }
        }

        public float* SampledPoints
        {
            get
            {
                return (float*) ((global::icms2_clr.CmsCurveSegment.__Internal*) __Instance)->SampledPoints;
            }

            set
            {
                ((global::icms2_clr.CmsCurveSegment.__Internal*)__Instance)->SampledPoints = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class CmsUcrBg : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr Ucr;

            [FieldOffset(8)]
            internal global::System.IntPtr Bg;

            [FieldOffset(16)]
            internal global::System.IntPtr Desc;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0cmsUcrBg@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsUcrBg> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsUcrBg>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsUcrBg __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsUcrBg(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsUcrBg __CreateInstance(global::icms2_clr.CmsUcrBg.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsUcrBg(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsUcrBg.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsUcrBg.__Internal));
            *(global::icms2_clr.CmsUcrBg.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsUcrBg(global::icms2_clr.CmsUcrBg.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsUcrBg(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CmsUcrBg()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsUcrBg.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CmsUcrBg(global::icms2_clr.CmsUcrBg _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsUcrBg.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::icms2_clr.CmsUcrBg.__Internal*) __Instance) = *((global::icms2_clr.CmsUcrBg.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::icms2_clr.CmsUcrBg __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::icms2_clr.CmsCurveStruct Ucr
        {
            get
            {
                global::icms2_clr.CmsCurveStruct __result0;
                if (((global::icms2_clr.CmsUcrBg.__Internal*) __Instance)->Ucr == IntPtr.Zero) __result0 = null;
                else if (global::icms2_clr.CmsCurveStruct.NativeToManagedMap.ContainsKey(((global::icms2_clr.CmsUcrBg.__Internal*) __Instance)->Ucr))
                    __result0 = (global::icms2_clr.CmsCurveStruct) global::icms2_clr.CmsCurveStruct.NativeToManagedMap[((global::icms2_clr.CmsUcrBg.__Internal*) __Instance)->Ucr];
                else __result0 = global::icms2_clr.CmsCurveStruct.__CreateInstance(((global::icms2_clr.CmsUcrBg.__Internal*) __Instance)->Ucr);
                return __result0;
            }

            set
            {
                ((global::icms2_clr.CmsUcrBg.__Internal*)__Instance)->Ucr = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::icms2_clr.CmsCurveStruct Bg
        {
            get
            {
                global::icms2_clr.CmsCurveStruct __result0;
                if (((global::icms2_clr.CmsUcrBg.__Internal*) __Instance)->Bg == IntPtr.Zero) __result0 = null;
                else if (global::icms2_clr.CmsCurveStruct.NativeToManagedMap.ContainsKey(((global::icms2_clr.CmsUcrBg.__Internal*) __Instance)->Bg))
                    __result0 = (global::icms2_clr.CmsCurveStruct) global::icms2_clr.CmsCurveStruct.NativeToManagedMap[((global::icms2_clr.CmsUcrBg.__Internal*) __Instance)->Bg];
                else __result0 = global::icms2_clr.CmsCurveStruct.__CreateInstance(((global::icms2_clr.CmsUcrBg.__Internal*) __Instance)->Bg);
                return __result0;
            }

            set
            {
                ((global::icms2_clr.CmsUcrBg.__Internal*)__Instance)->Bg = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::icms2_clr.CmsMLU_struct Desc
        {
            get
            {
                global::icms2_clr.CmsMLU_struct __result0;
                if (((global::icms2_clr.CmsUcrBg.__Internal*) __Instance)->Desc == IntPtr.Zero) __result0 = null;
                else if (global::icms2_clr.CmsMLU_struct.NativeToManagedMap.ContainsKey(((global::icms2_clr.CmsUcrBg.__Internal*) __Instance)->Desc))
                    __result0 = (global::icms2_clr.CmsMLU_struct) global::icms2_clr.CmsMLU_struct.NativeToManagedMap[((global::icms2_clr.CmsUcrBg.__Internal*) __Instance)->Desc];
                else __result0 = global::icms2_clr.CmsMLU_struct.__CreateInstance(((global::icms2_clr.CmsUcrBg.__Internal*) __Instance)->Desc);
                return __result0;
            }

            set
            {
                ((global::icms2_clr.CmsUcrBg.__Internal*)__Instance)->Desc = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class CmsScreeningChannel : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal double Frequency;

            [FieldOffset(8)]
            internal double ScreenAngle;

            [FieldOffset(16)]
            internal uint SpotShape;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0cmsScreeningChannel@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsScreeningChannel> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsScreeningChannel>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsScreeningChannel __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsScreeningChannel(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsScreeningChannel __CreateInstance(global::icms2_clr.CmsScreeningChannel.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsScreeningChannel(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsScreeningChannel.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsScreeningChannel.__Internal));
            *(global::icms2_clr.CmsScreeningChannel.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsScreeningChannel(global::icms2_clr.CmsScreeningChannel.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsScreeningChannel(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CmsScreeningChannel()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsScreeningChannel.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CmsScreeningChannel(global::icms2_clr.CmsScreeningChannel _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsScreeningChannel.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::icms2_clr.CmsScreeningChannel.__Internal*) __Instance) = *((global::icms2_clr.CmsScreeningChannel.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::icms2_clr.CmsScreeningChannel __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public double Frequency
        {
            get
            {
                return ((global::icms2_clr.CmsScreeningChannel.__Internal*) __Instance)->Frequency;
            }

            set
            {
                ((global::icms2_clr.CmsScreeningChannel.__Internal*)__Instance)->Frequency = value;
            }
        }

        public double ScreenAngle
        {
            get
            {
                return ((global::icms2_clr.CmsScreeningChannel.__Internal*) __Instance)->ScreenAngle;
            }

            set
            {
                ((global::icms2_clr.CmsScreeningChannel.__Internal*)__Instance)->ScreenAngle = value;
            }
        }

        public uint SpotShape
        {
            get
            {
                return ((global::icms2_clr.CmsScreeningChannel.__Internal*) __Instance)->SpotShape;
            }

            set
            {
                ((global::icms2_clr.CmsScreeningChannel.__Internal*)__Instance)->SpotShape = value;
            }
        }
    }

    public unsafe partial class CmsScreening : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 392)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint Flag;

            [FieldOffset(4)]
            internal uint nChannels;

            [FieldOffset(8)]
            internal fixed byte Channels[384];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0cmsScreening@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsScreening> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsScreening>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsScreening __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsScreening(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsScreening __CreateInstance(global::icms2_clr.CmsScreening.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsScreening(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsScreening.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsScreening.__Internal));
            *(global::icms2_clr.CmsScreening.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsScreening(global::icms2_clr.CmsScreening.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsScreening(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CmsScreening()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsScreening.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CmsScreening(global::icms2_clr.CmsScreening _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsScreening.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::icms2_clr.CmsScreening.__Internal*) __Instance) = *((global::icms2_clr.CmsScreening.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::icms2_clr.CmsScreening __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Flag
        {
            get
            {
                return ((global::icms2_clr.CmsScreening.__Internal*) __Instance)->Flag;
            }

            set
            {
                ((global::icms2_clr.CmsScreening.__Internal*)__Instance)->Flag = value;
            }
        }

        public uint NChannels
        {
            get
            {
                return ((global::icms2_clr.CmsScreening.__Internal*) __Instance)->nChannels;
            }

            set
            {
                ((global::icms2_clr.CmsScreening.__Internal*)__Instance)->nChannels = value;
            }
        }

        public global::icms2_clr.CmsScreeningChannel[] Channels
        {
            get
            {
                global::icms2_clr.CmsScreeningChannel[] __value = null;
                if (((global::icms2_clr.CmsScreening.__Internal*) __Instance)->Channels != null)
                {
                    __value = new global::icms2_clr.CmsScreeningChannel[16];
                    for (int i = 0; i < 16; i++)
                        __value[i] = global::icms2_clr.CmsScreeningChannel.__CreateInstance(*((global::icms2_clr.CmsScreeningChannel.__Internal*)&(((global::icms2_clr.CmsScreening.__Internal*) __Instance)->Channels[i * sizeof(global::icms2_clr.CmsScreeningChannel.__Internal)])));
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 16)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 16; i++)
                        *(global::icms2_clr.CmsScreeningChannel.__Internal*) &((global::icms2_clr.CmsScreening.__Internal*)__Instance)->Channels[i * sizeof(global::icms2_clr.CmsScreeningChannel.__Internal)] = *(global::icms2_clr.CmsScreeningChannel.__Internal*)value[i].__Instance;
                }
            }
        }
    }

    public unsafe partial class CmsPSEQDESC : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 64)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint deviceMfg;

            [FieldOffset(4)]
            internal uint deviceModel;

            [FieldOffset(8)]
            internal ulong attributes;

            [FieldOffset(16)]
            internal global::icms2_clr.CmsTechnologySignature technology;

            [FieldOffset(20)]
            internal global::icms2_clr.CmsProfileID.__Internal ProfileID;

            [FieldOffset(40)]
            internal global::System.IntPtr Manufacturer;

            [FieldOffset(48)]
            internal global::System.IntPtr Model;

            [FieldOffset(56)]
            internal global::System.IntPtr Description;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0cmsPSEQDESC@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsPSEQDESC> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsPSEQDESC>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsPSEQDESC __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsPSEQDESC(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsPSEQDESC __CreateInstance(global::icms2_clr.CmsPSEQDESC.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsPSEQDESC(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsPSEQDESC.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsPSEQDESC.__Internal));
            *(global::icms2_clr.CmsPSEQDESC.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsPSEQDESC(global::icms2_clr.CmsPSEQDESC.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsPSEQDESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CmsPSEQDESC()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsPSEQDESC.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CmsPSEQDESC(global::icms2_clr.CmsPSEQDESC _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsPSEQDESC.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::icms2_clr.CmsPSEQDESC.__Internal*) __Instance) = *((global::icms2_clr.CmsPSEQDESC.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::icms2_clr.CmsPSEQDESC __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint DeviceMfg
        {
            get
            {
                return ((global::icms2_clr.CmsPSEQDESC.__Internal*) __Instance)->deviceMfg;
            }

            set
            {
                ((global::icms2_clr.CmsPSEQDESC.__Internal*)__Instance)->deviceMfg = value;
            }
        }

        public uint DeviceModel
        {
            get
            {
                return ((global::icms2_clr.CmsPSEQDESC.__Internal*) __Instance)->deviceModel;
            }

            set
            {
                ((global::icms2_clr.CmsPSEQDESC.__Internal*)__Instance)->deviceModel = value;
            }
        }

        public ulong Attributes
        {
            get
            {
                return ((global::icms2_clr.CmsPSEQDESC.__Internal*) __Instance)->attributes;
            }

            set
            {
                ((global::icms2_clr.CmsPSEQDESC.__Internal*)__Instance)->attributes = value;
            }
        }

        public global::icms2_clr.CmsTechnologySignature Technology
        {
            get
            {
                return ((global::icms2_clr.CmsPSEQDESC.__Internal*) __Instance)->technology;
            }

            set
            {
                ((global::icms2_clr.CmsPSEQDESC.__Internal*)__Instance)->technology = value;
            }
        }

        public global::icms2_clr.CmsProfileID ProfileID
        {
            get
            {
                return global::icms2_clr.CmsProfileID.__CreateInstance(((global::icms2_clr.CmsPSEQDESC.__Internal*) __Instance)->ProfileID);
            }

            set
            {
                ((global::icms2_clr.CmsPSEQDESC.__Internal*)__Instance)->ProfileID = value.__Instance;
            }
        }

        public global::icms2_clr.CmsMLU_struct Manufacturer
        {
            get
            {
                global::icms2_clr.CmsMLU_struct __result0;
                if (((global::icms2_clr.CmsPSEQDESC.__Internal*) __Instance)->Manufacturer == IntPtr.Zero) __result0 = null;
                else if (global::icms2_clr.CmsMLU_struct.NativeToManagedMap.ContainsKey(((global::icms2_clr.CmsPSEQDESC.__Internal*) __Instance)->Manufacturer))
                    __result0 = (global::icms2_clr.CmsMLU_struct) global::icms2_clr.CmsMLU_struct.NativeToManagedMap[((global::icms2_clr.CmsPSEQDESC.__Internal*) __Instance)->Manufacturer];
                else __result0 = global::icms2_clr.CmsMLU_struct.__CreateInstance(((global::icms2_clr.CmsPSEQDESC.__Internal*) __Instance)->Manufacturer);
                return __result0;
            }

            set
            {
                ((global::icms2_clr.CmsPSEQDESC.__Internal*)__Instance)->Manufacturer = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::icms2_clr.CmsMLU_struct Model
        {
            get
            {
                global::icms2_clr.CmsMLU_struct __result0;
                if (((global::icms2_clr.CmsPSEQDESC.__Internal*) __Instance)->Model == IntPtr.Zero) __result0 = null;
                else if (global::icms2_clr.CmsMLU_struct.NativeToManagedMap.ContainsKey(((global::icms2_clr.CmsPSEQDESC.__Internal*) __Instance)->Model))
                    __result0 = (global::icms2_clr.CmsMLU_struct) global::icms2_clr.CmsMLU_struct.NativeToManagedMap[((global::icms2_clr.CmsPSEQDESC.__Internal*) __Instance)->Model];
                else __result0 = global::icms2_clr.CmsMLU_struct.__CreateInstance(((global::icms2_clr.CmsPSEQDESC.__Internal*) __Instance)->Model);
                return __result0;
            }

            set
            {
                ((global::icms2_clr.CmsPSEQDESC.__Internal*)__Instance)->Model = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::icms2_clr.CmsMLU_struct Description
        {
            get
            {
                global::icms2_clr.CmsMLU_struct __result0;
                if (((global::icms2_clr.CmsPSEQDESC.__Internal*) __Instance)->Description == IntPtr.Zero) __result0 = null;
                else if (global::icms2_clr.CmsMLU_struct.NativeToManagedMap.ContainsKey(((global::icms2_clr.CmsPSEQDESC.__Internal*) __Instance)->Description))
                    __result0 = (global::icms2_clr.CmsMLU_struct) global::icms2_clr.CmsMLU_struct.NativeToManagedMap[((global::icms2_clr.CmsPSEQDESC.__Internal*) __Instance)->Description];
                else __result0 = global::icms2_clr.CmsMLU_struct.__CreateInstance(((global::icms2_clr.CmsPSEQDESC.__Internal*) __Instance)->Description);
                return __result0;
            }

            set
            {
                ((global::icms2_clr.CmsPSEQDESC.__Internal*)__Instance)->Description = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class CmsSEQ : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint n;

            [FieldOffset(8)]
            internal global::System.IntPtr ContextID;

            [FieldOffset(16)]
            internal global::System.IntPtr seq;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0cmsSEQ@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsSEQ> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsSEQ>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsSEQ __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsSEQ(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsSEQ __CreateInstance(global::icms2_clr.CmsSEQ.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsSEQ(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsSEQ.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsSEQ.__Internal));
            *(global::icms2_clr.CmsSEQ.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsSEQ(global::icms2_clr.CmsSEQ.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsSEQ(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CmsSEQ()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsSEQ.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CmsSEQ(global::icms2_clr.CmsSEQ _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsSEQ.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::icms2_clr.CmsSEQ.__Internal*) __Instance) = *((global::icms2_clr.CmsSEQ.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::icms2_clr.CmsSEQ __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint N
        {
            get
            {
                return ((global::icms2_clr.CmsSEQ.__Internal*) __Instance)->n;
            }

            set
            {
                ((global::icms2_clr.CmsSEQ.__Internal*)__Instance)->n = value;
            }
        }

        public global::icms2_clr.CmsContextStruct ContextID
        {
            get
            {
                global::icms2_clr.CmsContextStruct __result0;
                if (((global::icms2_clr.CmsSEQ.__Internal*) __Instance)->ContextID == IntPtr.Zero) __result0 = null;
                else if (global::icms2_clr.CmsContextStruct.NativeToManagedMap.ContainsKey(((global::icms2_clr.CmsSEQ.__Internal*) __Instance)->ContextID))
                    __result0 = (global::icms2_clr.CmsContextStruct) global::icms2_clr.CmsContextStruct.NativeToManagedMap[((global::icms2_clr.CmsSEQ.__Internal*) __Instance)->ContextID];
                else __result0 = global::icms2_clr.CmsContextStruct.__CreateInstance(((global::icms2_clr.CmsSEQ.__Internal*) __Instance)->ContextID);
                return __result0;
            }

            set
            {
                ((global::icms2_clr.CmsSEQ.__Internal*)__Instance)->ContextID = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::icms2_clr.CmsPSEQDESC Seq
        {
            get
            {
                global::icms2_clr.CmsPSEQDESC __result0;
                if (((global::icms2_clr.CmsSEQ.__Internal*) __Instance)->seq == IntPtr.Zero) __result0 = null;
                else if (global::icms2_clr.CmsPSEQDESC.NativeToManagedMap.ContainsKey(((global::icms2_clr.CmsSEQ.__Internal*) __Instance)->seq))
                    __result0 = (global::icms2_clr.CmsPSEQDESC) global::icms2_clr.CmsPSEQDESC.NativeToManagedMap[((global::icms2_clr.CmsSEQ.__Internal*) __Instance)->seq];
                else __result0 = global::icms2_clr.CmsPSEQDESC.__CreateInstance(((global::icms2_clr.CmsSEQ.__Internal*) __Instance)->seq);
                return __result0;
            }

            set
            {
                ((global::icms2_clr.CmsSEQ.__Internal*)__Instance)->seq = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class CmsDICTentryStruct : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr Next;

            [FieldOffset(8)]
            internal global::System.IntPtr DisplayName;

            [FieldOffset(16)]
            internal global::System.IntPtr DisplayValue;

            [FieldOffset(24)]
            internal global::System.IntPtr Name;

            [FieldOffset(32)]
            internal global::System.IntPtr Value;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_cmsDICTentry_struct@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsDICTentryStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::icms2_clr.CmsDICTentryStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::icms2_clr.CmsDICTentryStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsDICTentryStruct(native.ToPointer(), skipVTables);
        }

        internal static global::icms2_clr.CmsDICTentryStruct __CreateInstance(global::icms2_clr.CmsDICTentryStruct.__Internal native, bool skipVTables = false)
        {
            return new global::icms2_clr.CmsDICTentryStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::icms2_clr.CmsDICTentryStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsDICTentryStruct.__Internal));
            *(global::icms2_clr.CmsDICTentryStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmsDICTentryStruct(global::icms2_clr.CmsDICTentryStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmsDICTentryStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CmsDICTentryStruct()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsDICTentryStruct.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CmsDICTentryStruct(global::icms2_clr.CmsDICTentryStruct _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::icms2_clr.CmsDICTentryStruct.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::icms2_clr.CmsDICTentryStruct.__Internal*) __Instance) = *((global::icms2_clr.CmsDICTentryStruct.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::icms2_clr.CmsDICTentryStruct __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::icms2_clr.CmsDICTentryStruct Next
        {
            get
            {
                global::icms2_clr.CmsDICTentryStruct __result0;
                if (((global::icms2_clr.CmsDICTentryStruct.__Internal*) __Instance)->Next == IntPtr.Zero) __result0 = null;
                else if (global::icms2_clr.CmsDICTentryStruct.NativeToManagedMap.ContainsKey(((global::icms2_clr.CmsDICTentryStruct.__Internal*) __Instance)->Next))
                    __result0 = (global::icms2_clr.CmsDICTentryStruct) global::icms2_clr.CmsDICTentryStruct.NativeToManagedMap[((global::icms2_clr.CmsDICTentryStruct.__Internal*) __Instance)->Next];
                else __result0 = global::icms2_clr.CmsDICTentryStruct.__CreateInstance(((global::icms2_clr.CmsDICTentryStruct.__Internal*) __Instance)->Next);
                return __result0;
            }

            set
            {
                ((global::icms2_clr.CmsDICTentryStruct.__Internal*)__Instance)->Next = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::icms2_clr.CmsMLU_struct DisplayName
        {
            get
            {
                global::icms2_clr.CmsMLU_struct __result0;
                if (((global::icms2_clr.CmsDICTentryStruct.__Internal*) __Instance)->DisplayName == IntPtr.Zero) __result0 = null;
                else if (global::icms2_clr.CmsMLU_struct.NativeToManagedMap.ContainsKey(((global::icms2_clr.CmsDICTentryStruct.__Internal*) __Instance)->DisplayName))
                    __result0 = (global::icms2_clr.CmsMLU_struct) global::icms2_clr.CmsMLU_struct.NativeToManagedMap[((global::icms2_clr.CmsDICTentryStruct.__Internal*) __Instance)->DisplayName];
                else __result0 = global::icms2_clr.CmsMLU_struct.__CreateInstance(((global::icms2_clr.CmsDICTentryStruct.__Internal*) __Instance)->DisplayName);
                return __result0;
            }

            set
            {
                ((global::icms2_clr.CmsDICTentryStruct.__Internal*)__Instance)->DisplayName = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::icms2_clr.CmsMLU_struct DisplayValue
        {
            get
            {
                global::icms2_clr.CmsMLU_struct __result0;
                if (((global::icms2_clr.CmsDICTentryStruct.__Internal*) __Instance)->DisplayValue == IntPtr.Zero) __result0 = null;
                else if (global::icms2_clr.CmsMLU_struct.NativeToManagedMap.ContainsKey(((global::icms2_clr.CmsDICTentryStruct.__Internal*) __Instance)->DisplayValue))
                    __result0 = (global::icms2_clr.CmsMLU_struct) global::icms2_clr.CmsMLU_struct.NativeToManagedMap[((global::icms2_clr.CmsDICTentryStruct.__Internal*) __Instance)->DisplayValue];
                else __result0 = global::icms2_clr.CmsMLU_struct.__CreateInstance(((global::icms2_clr.CmsDICTentryStruct.__Internal*) __Instance)->DisplayValue);
                return __result0;
            }

            set
            {
                ((global::icms2_clr.CmsDICTentryStruct.__Internal*)__Instance)->DisplayValue = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public char* Name
        {
            get
            {
                return (char*) ((global::icms2_clr.CmsDICTentryStruct.__Internal*) __Instance)->Name;
            }

            set
            {
                ((global::icms2_clr.CmsDICTentryStruct.__Internal*)__Instance)->Name = (global::System.IntPtr) value;
            }
        }

        public char* Value
        {
            get
            {
                return (char*) ((global::icms2_clr.CmsDICTentryStruct.__Internal*) __Instance)->Value;
            }

            set
            {
                ((global::icms2_clr.CmsDICTentryStruct.__Internal*)__Instance)->Value = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class lcms2
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetEncodedCMMversion")]
            internal static extern int CmsGetEncodedCMMversion();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsstrcasecmp")]
            internal static extern int Cmsstrcasecmp([MarshalAs(UnmanagedType.LPStr)] string s1, [MarshalAs(UnmanagedType.LPStr)] string s2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCreateContext")]
            internal static extern global::System.IntPtr CmsCreateContext(global::System.IntPtr Plugin, global::System.IntPtr UserData);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsDeleteContext")]
            internal static extern void CmsDeleteContext(global::System.IntPtr ContexID);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsDupContext")]
            internal static extern global::System.IntPtr CmsDupContext(global::System.IntPtr ContextID, global::System.IntPtr NewUserData);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetContextUserData")]
            internal static extern global::System.IntPtr CmsGetContextUserData(global::System.IntPtr ContextID);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsPlugin")]
            internal static extern int CmsPlugin(global::System.IntPtr Plugin);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsPluginTHR")]
            internal static extern int CmsPluginTHR(global::System.IntPtr ContextID, global::System.IntPtr Plugin);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsUnregisterPlugins")]
            internal static extern void CmsUnregisterPlugins();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsUnregisterPluginsTHR")]
            internal static extern void CmsUnregisterPluginsTHR(global::System.IntPtr ContextID);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsSetLogErrorHandler")]
            internal static extern void CmsSetLogErrorHandler(global::System.IntPtr Fn);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsSetLogErrorHandlerTHR")]
            internal static extern void CmsSetLogErrorHandlerTHR(global::System.IntPtr ContextID, global::System.IntPtr Fn);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsD50_XYZ")]
            internal static extern global::System.IntPtr CmsD50XYZ();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsD50_xyY")]
            internal static extern global::System.IntPtr CmsD50XyY();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsXYZ2xyY")]
            internal static extern void CmsXYZ2xyY(global::System.IntPtr Dest, global::System.IntPtr Source);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsxyY2XYZ")]
            internal static extern void CmsxyY2XYZ(global::System.IntPtr Dest, global::System.IntPtr Source);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsXYZ2Lab")]
            internal static extern void CmsXYZ2Lab(global::System.IntPtr WhitePoint, global::System.IntPtr Lab, global::System.IntPtr xyz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsLab2XYZ")]
            internal static extern void CmsLab2XYZ(global::System.IntPtr WhitePoint, global::System.IntPtr xyz, global::System.IntPtr Lab);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsLab2LCh")]
            internal static extern void CmsLab2LCh(global::System.IntPtr LCh, global::System.IntPtr Lab);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsLCh2Lab")]
            internal static extern void CmsLCh2Lab(global::System.IntPtr Lab, global::System.IntPtr LCh);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsLabEncoded2Float")]
            internal static extern void CmsLabEncoded2Float(global::System.IntPtr Lab, ushort[] wLab);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsLabEncoded2FloatV2")]
            internal static extern void CmsLabEncoded2FloatV2(global::System.IntPtr Lab, ushort[] wLab);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsFloat2LabEncoded")]
            internal static extern void CmsFloat2LabEncoded(ushort[] wLab, global::System.IntPtr Lab);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsFloat2LabEncodedV2")]
            internal static extern void CmsFloat2LabEncodedV2(ushort[] wLab, global::System.IntPtr Lab);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsXYZEncoded2Float")]
            internal static extern void CmsXYZEncoded2Float(global::System.IntPtr fxyz, ushort[] XYZ);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsFloat2XYZEncoded")]
            internal static extern void CmsFloat2XYZEncoded(ushort[] XYZ, global::System.IntPtr fXYZ);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsDeltaE")]
            internal static extern double CmsDeltaE(global::System.IntPtr Lab1, global::System.IntPtr Lab2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCIE94DeltaE")]
            internal static extern double CmsCIE94DeltaE(global::System.IntPtr Lab1, global::System.IntPtr Lab2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsBFDdeltaE")]
            internal static extern double CmsBFDdeltaE(global::System.IntPtr Lab1, global::System.IntPtr Lab2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCMCdeltaE")]
            internal static extern double CmsCMCdeltaE(global::System.IntPtr Lab1, global::System.IntPtr Lab2, double l, double c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCIE2000DeltaE")]
            internal static extern double CmsCIE2000DeltaE(global::System.IntPtr Lab1, global::System.IntPtr Lab2, double Kl, double Kc, double Kh);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsWhitePointFromTemp")]
            internal static extern int CmsWhitePointFromTemp(global::System.IntPtr WhitePoint, double TempK);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsTempFromWhitePoint")]
            internal static extern int CmsTempFromWhitePoint(double* TempK, global::System.IntPtr WhitePoint);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsAdaptToIlluminant")]
            internal static extern int CmsAdaptToIlluminant(global::System.IntPtr Result, global::System.IntPtr SourceWhitePt, global::System.IntPtr Illuminant, global::System.IntPtr Value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCIECAM02Init")]
            internal static extern global::System.IntPtr CmsCIECAM02Init(global::System.IntPtr ContextID, global::System.IntPtr pVC);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCIECAM02Done")]
            internal static extern void CmsCIECAM02Done(global::System.IntPtr hModel);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCIECAM02Forward")]
            internal static extern void CmsCIECAM02Forward(global::System.IntPtr hModel, global::System.IntPtr pIn, global::System.IntPtr pOut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCIECAM02Reverse")]
            internal static extern void CmsCIECAM02Reverse(global::System.IntPtr hModel, global::System.IntPtr pIn, global::System.IntPtr pOut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsBuildSegmentedToneCurve")]
            internal static extern global::System.IntPtr CmsBuildSegmentedToneCurve(global::System.IntPtr ContextID, uint nSegments, global::icms2_clr.CmsCurveSegment.__Internal[] Segments);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsBuildParametricToneCurve")]
            internal static extern global::System.IntPtr CmsBuildParametricToneCurve(global::System.IntPtr ContextID, int Type, double[] Params);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsBuildGamma")]
            internal static extern global::System.IntPtr CmsBuildGamma(global::System.IntPtr ContextID, double Gamma);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsBuildTabulatedToneCurve16")]
            internal static extern global::System.IntPtr CmsBuildTabulatedToneCurve16(global::System.IntPtr ContextID, uint nEntries, ushort[] values);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsBuildTabulatedToneCurveFloat")]
            internal static extern global::System.IntPtr CmsBuildTabulatedToneCurveFloat(global::System.IntPtr ContextID, uint nEntries, float[] values);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsFreeToneCurve")]
            internal static extern void CmsFreeToneCurve(global::System.IntPtr Curve);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsFreeToneCurveTriple")]
            internal static extern void CmsFreeToneCurveTriple(global::System.IntPtr[] Curve);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsDupToneCurve")]
            internal static extern global::System.IntPtr CmsDupToneCurve(global::System.IntPtr Src);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsReverseToneCurve")]
            internal static extern global::System.IntPtr CmsReverseToneCurve(global::System.IntPtr InGamma);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsReverseToneCurveEx")]
            internal static extern global::System.IntPtr CmsReverseToneCurveEx(uint nResultSamples, global::System.IntPtr InGamma);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsJoinToneCurve")]
            internal static extern global::System.IntPtr CmsJoinToneCurve(global::System.IntPtr ContextID, global::System.IntPtr X, global::System.IntPtr Y, uint nPoints);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsSmoothToneCurve")]
            internal static extern int CmsSmoothToneCurve(global::System.IntPtr Tab, double lambda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsEvalToneCurveFloat")]
            internal static extern float CmsEvalToneCurveFloat(global::System.IntPtr Curve, float v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsEvalToneCurve16")]
            internal static extern ushort CmsEvalToneCurve16(global::System.IntPtr Curve, ushort v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIsToneCurveMultisegment")]
            internal static extern int CmsIsToneCurveMultisegment(global::System.IntPtr InGamma);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIsToneCurveLinear")]
            internal static extern int CmsIsToneCurveLinear(global::System.IntPtr Curve);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIsToneCurveMonotonic")]
            internal static extern int CmsIsToneCurveMonotonic(global::System.IntPtr t);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIsToneCurveDescending")]
            internal static extern int CmsIsToneCurveDescending(global::System.IntPtr t);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetToneCurveParametricType")]
            internal static extern int CmsGetToneCurveParametricType(global::System.IntPtr t);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsEstimateGamma")]
            internal static extern double CmsEstimateGamma(global::System.IntPtr t, double Precision);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetToneCurveEstimatedTableEntries")]
            internal static extern uint CmsGetToneCurveEstimatedTableEntries(global::System.IntPtr t);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetToneCurveEstimatedTable")]
            internal static extern ushort* CmsGetToneCurveEstimatedTable(global::System.IntPtr t);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsPipelineAlloc")]
            internal static extern global::System.IntPtr CmsPipelineAlloc(global::System.IntPtr ContextID, uint InputChannels, uint OutputChannels);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsPipelineFree")]
            internal static extern void CmsPipelineFree(global::System.IntPtr lut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsPipelineDup")]
            internal static extern global::System.IntPtr CmsPipelineDup(global::System.IntPtr Orig);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetPipelineContextID")]
            internal static extern global::System.IntPtr CmsGetPipelineContextID(global::System.IntPtr lut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsPipelineInputChannels")]
            internal static extern uint CmsPipelineInputChannels(global::System.IntPtr lut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsPipelineOutputChannels")]
            internal static extern uint CmsPipelineOutputChannels(global::System.IntPtr lut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsPipelineStageCount")]
            internal static extern uint CmsPipelineStageCount(global::System.IntPtr lut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsPipelineGetPtrToFirstStage")]
            internal static extern global::System.IntPtr CmsPipelineGetPtrToFirstStage(global::System.IntPtr lut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsPipelineGetPtrToLastStage")]
            internal static extern global::System.IntPtr CmsPipelineGetPtrToLastStage(global::System.IntPtr lut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsPipelineEval16")]
            internal static extern void CmsPipelineEval16(ushort[] In, ushort[] Out, global::System.IntPtr lut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsPipelineEvalFloat")]
            internal static extern void CmsPipelineEvalFloat(float[] In, float[] Out, global::System.IntPtr lut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsPipelineEvalReverseFloat")]
            internal static extern int CmsPipelineEvalReverseFloat(float[] Target, float[] Result, float[] Hint, global::System.IntPtr lut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsPipelineCat")]
            internal static extern int CmsPipelineCat(global::System.IntPtr l1, global::System.IntPtr l2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsPipelineSetSaveAs8bitsFlag")]
            internal static extern int CmsPipelineSetSaveAs8bitsFlag(global::System.IntPtr lut, int On);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsPipelineInsertStage")]
            internal static extern int CmsPipelineInsertStage(global::System.IntPtr lut, global::icms2_clr.CmsStageLoc loc, global::System.IntPtr mpe);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsPipelineUnlinkStage")]
            internal static extern void CmsPipelineUnlinkStage(global::System.IntPtr lut, global::icms2_clr.CmsStageLoc loc, global::System.IntPtr mpe);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsPipelineCheckAndRetreiveStages")]
            internal static extern int CmsPipelineCheckAndRetreiveStages(global::System.IntPtr Lut, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsStageAllocIdentity")]
            internal static extern global::System.IntPtr CmsStageAllocIdentity(global::System.IntPtr ContextID, uint nChannels);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsStageAllocToneCurves")]
            internal static extern global::System.IntPtr CmsStageAllocToneCurves(global::System.IntPtr ContextID, uint nChannels, global::System.IntPtr[] Curves);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsStageAllocMatrix")]
            internal static extern global::System.IntPtr CmsStageAllocMatrix(global::System.IntPtr ContextID, uint Rows, uint Cols, double* Matrix, double* Offset);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsStageAllocCLut16bit")]
            internal static extern global::System.IntPtr CmsStageAllocCLut16bit(global::System.IntPtr ContextID, uint nGridPoints, uint inputChan, uint outputChan, ushort* Table);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsStageAllocCLutFloat")]
            internal static extern global::System.IntPtr CmsStageAllocCLutFloat(global::System.IntPtr ContextID, uint nGridPoints, uint inputChan, uint outputChan, float* Table);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsStageAllocCLut16bitGranular")]
            internal static extern global::System.IntPtr CmsStageAllocCLut16bitGranular(global::System.IntPtr ContextID, uint[] clutPoints, uint inputChan, uint outputChan, ushort* Table);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsStageAllocCLutFloatGranular")]
            internal static extern global::System.IntPtr CmsStageAllocCLutFloatGranular(global::System.IntPtr ContextID, uint[] clutPoints, uint inputChan, uint outputChan, float* Table);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsStageDup")]
            internal static extern global::System.IntPtr CmsStageDup(global::System.IntPtr mpe);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsStageFree")]
            internal static extern void CmsStageFree(global::System.IntPtr mpe);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsStageNext")]
            internal static extern global::System.IntPtr CmsStageNext(global::System.IntPtr mpe);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsStageInputChannels")]
            internal static extern uint CmsStageInputChannels(global::System.IntPtr mpe);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsStageOutputChannels")]
            internal static extern uint CmsStageOutputChannels(global::System.IntPtr mpe);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsStageType")]
            internal static extern global::icms2_clr.CmsStageSignature CmsStageType(global::System.IntPtr mpe);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsStageData")]
            internal static extern global::System.IntPtr CmsStageData(global::System.IntPtr mpe);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsStageSampleCLut16bit")]
            internal static extern int CmsStageSampleCLut16bit(global::System.IntPtr mpe, global::System.IntPtr Sampler, global::System.IntPtr Cargo, uint dwFlags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsStageSampleCLutFloat")]
            internal static extern int CmsStageSampleCLutFloat(global::System.IntPtr mpe, global::System.IntPtr Sampler, global::System.IntPtr Cargo, uint dwFlags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsSliceSpace16")]
            internal static extern int CmsSliceSpace16(uint nInputs, uint[] clutPoints, global::System.IntPtr Sampler, global::System.IntPtr Cargo);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsSliceSpaceFloat")]
            internal static extern int CmsSliceSpaceFloat(uint nInputs, uint[] clutPoints, global::System.IntPtr Sampler, global::System.IntPtr Cargo);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsMLUalloc")]
            internal static extern global::System.IntPtr CmsMLUalloc(global::System.IntPtr ContextID, uint nItems);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsMLUfree")]
            internal static extern void CmsMLUfree(global::System.IntPtr mlu);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsMLUdup")]
            internal static extern global::System.IntPtr CmsMLUdup(global::System.IntPtr mlu);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsMLUsetASCII")]
            internal static extern int CmsMLUsetASCII(global::System.IntPtr mlu, sbyte[] LanguageCode, sbyte[] CountryCode, [MarshalAs(UnmanagedType.LPStr)] string ASCIIString);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsMLUsetWide")]
            internal static extern int CmsMLUsetWide(global::System.IntPtr mlu, sbyte[] LanguageCode, sbyte[] CountryCode, [MarshalAs(UnmanagedType.LPStr)] string WideString);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsMLUgetASCII")]
            internal static extern uint CmsMLUgetASCII(global::System.IntPtr mlu, sbyte[] LanguageCode, sbyte[] CountryCode, sbyte* Buffer, uint BufferSize);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsMLUgetWide")]
            internal static extern uint CmsMLUgetWide(global::System.IntPtr mlu, sbyte[] LanguageCode, sbyte[] CountryCode, char* Buffer, uint BufferSize);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsMLUgetTranslation")]
            internal static extern int CmsMLUgetTranslation(global::System.IntPtr mlu, sbyte[] LanguageCode, sbyte[] CountryCode, sbyte[] ObtainedLanguage, sbyte[] ObtainedCountry);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsMLUtranslationsCount")]
            internal static extern uint CmsMLUtranslationsCount(global::System.IntPtr mlu);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsMLUtranslationsCodes")]
            internal static extern int CmsMLUtranslationsCodes(global::System.IntPtr mlu, uint idx, sbyte[] LanguageCode, sbyte[] CountryCode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsAllocNamedColorList")]
            internal static extern global::System.IntPtr CmsAllocNamedColorList(global::System.IntPtr ContextID, uint n, uint ColorantCount, [MarshalAs(UnmanagedType.LPStr)] string Prefix, [MarshalAs(UnmanagedType.LPStr)] string Suffix);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsFreeNamedColorList")]
            internal static extern void CmsFreeNamedColorList(global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsDupNamedColorList")]
            internal static extern global::System.IntPtr CmsDupNamedColorList(global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsAppendNamedColor")]
            internal static extern int CmsAppendNamedColor(global::System.IntPtr v, [MarshalAs(UnmanagedType.LPStr)] string Name, ushort[] PCS, ushort[] Colorant);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsNamedColorCount")]
            internal static extern uint CmsNamedColorCount(global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsNamedColorIndex")]
            internal static extern int CmsNamedColorIndex(global::System.IntPtr v, [MarshalAs(UnmanagedType.LPStr)] string Name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsNamedColorInfo")]
            internal static extern int CmsNamedColorInfo(global::System.IntPtr NamedColorList, uint nColor, sbyte* Name, sbyte* Prefix, sbyte* Suffix, ushort* PCS, ushort* Colorant);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetNamedColorList")]
            internal static extern global::System.IntPtr CmsGetNamedColorList(global::System.IntPtr xform);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsAllocProfileSequenceDescription")]
            internal static extern global::System.IntPtr CmsAllocProfileSequenceDescription(global::System.IntPtr ContextID, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsDupProfileSequenceDescription")]
            internal static extern global::System.IntPtr CmsDupProfileSequenceDescription(global::System.IntPtr pseq);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsFreeProfileSequenceDescription")]
            internal static extern void CmsFreeProfileSequenceDescription(global::System.IntPtr pseq);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsDictAlloc")]
            internal static extern global::System.IntPtr CmsDictAlloc(global::System.IntPtr ContextID);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsDictFree")]
            internal static extern void CmsDictFree(global::System.IntPtr hDict);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsDictDup")]
            internal static extern global::System.IntPtr CmsDictDup(global::System.IntPtr hDict);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsDictAddEntry")]
            internal static extern int CmsDictAddEntry(global::System.IntPtr hDict, [MarshalAs(UnmanagedType.LPStr)] string Name, [MarshalAs(UnmanagedType.LPStr)] string Value, global::System.IntPtr DisplayName, global::System.IntPtr DisplayValue);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsDictGetEntryList")]
            internal static extern global::System.IntPtr CmsDictGetEntryList(global::System.IntPtr hDict);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsDictNextEntry")]
            internal static extern global::System.IntPtr CmsDictNextEntry(global::System.IntPtr e);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCreateProfilePlaceholder")]
            internal static extern global::System.IntPtr CmsCreateProfilePlaceholder(global::System.IntPtr ContextID);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetProfileContextID")]
            internal static extern global::System.IntPtr CmsGetProfileContextID(global::System.IntPtr hProfile);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetTagCount")]
            internal static extern int CmsGetTagCount(global::System.IntPtr hProfile);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetTagSignature")]
            internal static extern global::icms2_clr.CmsTagSignature CmsGetTagSignature(global::System.IntPtr hProfile, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIsTag")]
            internal static extern int CmsIsTag(global::System.IntPtr hProfile, global::icms2_clr.CmsTagSignature sig);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsReadTag")]
            internal static extern global::System.IntPtr CmsReadTag(global::System.IntPtr hProfile, global::icms2_clr.CmsTagSignature sig);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsWriteTag")]
            internal static extern int CmsWriteTag(global::System.IntPtr hProfile, global::icms2_clr.CmsTagSignature sig, global::System.IntPtr data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsLinkTag")]
            internal static extern int CmsLinkTag(global::System.IntPtr hProfile, global::icms2_clr.CmsTagSignature sig, global::icms2_clr.CmsTagSignature dest);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsTagLinkedTo")]
            internal static extern global::icms2_clr.CmsTagSignature CmsTagLinkedTo(global::System.IntPtr hProfile, global::icms2_clr.CmsTagSignature sig);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsReadRawTag")]
            internal static extern uint CmsReadRawTag(global::System.IntPtr hProfile, global::icms2_clr.CmsTagSignature sig, global::System.IntPtr Buffer, uint BufferSize);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsWriteRawTag")]
            internal static extern int CmsWriteRawTag(global::System.IntPtr hProfile, global::icms2_clr.CmsTagSignature sig, global::System.IntPtr data, uint Size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetHeaderFlags")]
            internal static extern uint CmsGetHeaderFlags(global::System.IntPtr hProfile);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetHeaderAttributes")]
            internal static extern void CmsGetHeaderAttributes(global::System.IntPtr hProfile, ulong* Flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetHeaderProfileID")]
            internal static extern void CmsGetHeaderProfileID(global::System.IntPtr hProfile, byte* ProfileID);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetHeaderRenderingIntent")]
            internal static extern uint CmsGetHeaderRenderingIntent(global::System.IntPtr hProfile);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsSetHeaderFlags")]
            internal static extern void CmsSetHeaderFlags(global::System.IntPtr hProfile, uint Flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetHeaderManufacturer")]
            internal static extern uint CmsGetHeaderManufacturer(global::System.IntPtr hProfile);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsSetHeaderManufacturer")]
            internal static extern void CmsSetHeaderManufacturer(global::System.IntPtr hProfile, uint manufacturer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetHeaderCreator")]
            internal static extern uint CmsGetHeaderCreator(global::System.IntPtr hProfile);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetHeaderModel")]
            internal static extern uint CmsGetHeaderModel(global::System.IntPtr hProfile);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsSetHeaderModel")]
            internal static extern void CmsSetHeaderModel(global::System.IntPtr hProfile, uint model);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsSetHeaderAttributes")]
            internal static extern void CmsSetHeaderAttributes(global::System.IntPtr hProfile, ulong Flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsSetHeaderProfileID")]
            internal static extern void CmsSetHeaderProfileID(global::System.IntPtr hProfile, byte* ProfileID);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsSetHeaderRenderingIntent")]
            internal static extern void CmsSetHeaderRenderingIntent(global::System.IntPtr hProfile, uint RenderingIntent);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetPCS")]
            internal static extern global::icms2_clr.CmsColorSpaceSignature CmsGetPCS(global::System.IntPtr hProfile);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsSetPCS")]
            internal static extern void CmsSetPCS(global::System.IntPtr hProfile, global::icms2_clr.CmsColorSpaceSignature pcs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetColorSpace")]
            internal static extern global::icms2_clr.CmsColorSpaceSignature CmsGetColorSpace(global::System.IntPtr hProfile);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsSetColorSpace")]
            internal static extern void CmsSetColorSpace(global::System.IntPtr hProfile, global::icms2_clr.CmsColorSpaceSignature sig);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetDeviceClass")]
            internal static extern global::icms2_clr.CmsProfileClassSignature CmsGetDeviceClass(global::System.IntPtr hProfile);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsSetDeviceClass")]
            internal static extern void CmsSetDeviceClass(global::System.IntPtr hProfile, global::icms2_clr.CmsProfileClassSignature sig);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsSetProfileVersion")]
            internal static extern void CmsSetProfileVersion(global::System.IntPtr hProfile, double Version);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetProfileVersion")]
            internal static extern double CmsGetProfileVersion(global::System.IntPtr hProfile);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetEncodedICCversion")]
            internal static extern uint CmsGetEncodedICCversion(global::System.IntPtr hProfile);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsSetEncodedICCversion")]
            internal static extern void CmsSetEncodedICCversion(global::System.IntPtr hProfile, uint Version);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIsIntentSupported")]
            internal static extern int CmsIsIntentSupported(global::System.IntPtr hProfile, uint Intent, uint UsedDirection);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIsMatrixShaper")]
            internal static extern int CmsIsMatrixShaper(global::System.IntPtr hProfile);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIsCLUT")]
            internal static extern int CmsIsCLUT(global::System.IntPtr hProfile, uint Intent, uint UsedDirection);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_cmsICCcolorSpace")]
            internal static extern global::icms2_clr.CmsColorSpaceSignature CmsICCcolorSpace(int OurNotation);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_cmsLCMScolorSpace")]
            internal static extern int CmsLCMScolorSpace(global::icms2_clr.CmsColorSpaceSignature ProfileSpace);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsChannelsOf")]
            internal static extern uint CmsChannelsOf(global::icms2_clr.CmsColorSpaceSignature ColorSpace);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsFormatterForColorspaceOfProfile")]
            internal static extern uint CmsFormatterForColorspaceOfProfile(global::System.IntPtr hProfile, uint nBytes, int lIsFloat);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsFormatterForPCSOfProfile")]
            internal static extern uint CmsFormatterForPCSOfProfile(global::System.IntPtr hProfile, uint nBytes, int lIsFloat);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetProfileInfo")]
            internal static extern uint CmsGetProfileInfo(global::System.IntPtr hProfile, global::icms2_clr.CmsInfoType Info, sbyte[] LanguageCode, sbyte[] CountryCode, char* Buffer, uint BufferSize);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetProfileInfoASCII")]
            internal static extern uint CmsGetProfileInfoASCII(global::System.IntPtr hProfile, global::icms2_clr.CmsInfoType Info, sbyte[] LanguageCode, sbyte[] CountryCode, sbyte* Buffer, uint BufferSize);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsOpenIOhandlerFromFile")]
            internal static extern global::System.IntPtr CmsOpenIOhandlerFromFile(global::System.IntPtr ContextID, [MarshalAs(UnmanagedType.LPStr)] string FileName, [MarshalAs(UnmanagedType.LPStr)] string AccessMode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsOpenIOhandlerFromMem")]
            internal static extern global::System.IntPtr CmsOpenIOhandlerFromMem(global::System.IntPtr ContextID, global::System.IntPtr Buffer, uint size, [MarshalAs(UnmanagedType.LPStr)] string AccessMode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsOpenIOhandlerFromNULL")]
            internal static extern global::System.IntPtr CmsOpenIOhandlerFromNULL(global::System.IntPtr ContextID);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetProfileIOhandler")]
            internal static extern global::System.IntPtr CmsGetProfileIOhandler(global::System.IntPtr hProfile);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCloseIOhandler")]
            internal static extern int CmsCloseIOhandler(global::System.IntPtr io);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsMD5computeID")]
            internal static extern int CmsMD5computeID(global::System.IntPtr hProfile);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsOpenProfileFromFile")]
            internal static extern global::System.IntPtr CmsOpenProfileFromFile([MarshalAs(UnmanagedType.LPStr)] string ICCProfile, [MarshalAs(UnmanagedType.LPStr)] string sAccess);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsOpenProfileFromFileTHR")]
            internal static extern global::System.IntPtr CmsOpenProfileFromFileTHR(global::System.IntPtr ContextID, [MarshalAs(UnmanagedType.LPStr)] string ICCProfile, [MarshalAs(UnmanagedType.LPStr)] string sAccess);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsOpenProfileFromMem")]
            internal static extern global::System.IntPtr CmsOpenProfileFromMem(global::System.IntPtr MemPtr, uint dwSize);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsOpenProfileFromMemTHR")]
            internal static extern global::System.IntPtr CmsOpenProfileFromMemTHR(global::System.IntPtr ContextID, global::System.IntPtr MemPtr, uint dwSize);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsOpenProfileFromIOhandlerTHR")]
            internal static extern global::System.IntPtr CmsOpenProfileFromIOhandlerTHR(global::System.IntPtr ContextID, global::System.IntPtr io);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsOpenProfileFromIOhandler2THR")]
            internal static extern global::System.IntPtr CmsOpenProfileFromIOhandler2THR(global::System.IntPtr ContextID, global::System.IntPtr io, int write);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCloseProfile")]
            internal static extern int CmsCloseProfile(global::System.IntPtr hProfile);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsSaveProfileToFile")]
            internal static extern int CmsSaveProfileToFile(global::System.IntPtr hProfile, [MarshalAs(UnmanagedType.LPStr)] string FileName);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsSaveProfileToMem")]
            internal static extern int CmsSaveProfileToMem(global::System.IntPtr hProfile, global::System.IntPtr MemPtr, uint* BytesNeeded);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsSaveProfileToIOhandler")]
            internal static extern uint CmsSaveProfileToIOhandler(global::System.IntPtr hProfile, global::System.IntPtr io);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCreateRGBProfileTHR")]
            internal static extern global::System.IntPtr CmsCreateRGBProfileTHR(global::System.IntPtr ContextID, global::System.IntPtr WhitePoint, global::System.IntPtr Primaries, global::System.IntPtr[] TransferFunction);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCreateRGBProfile")]
            internal static extern global::System.IntPtr CmsCreateRGBProfile(global::System.IntPtr WhitePoint, global::System.IntPtr Primaries, global::System.IntPtr[] TransferFunction);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCreateGrayProfileTHR")]
            internal static extern global::System.IntPtr CmsCreateGrayProfileTHR(global::System.IntPtr ContextID, global::System.IntPtr WhitePoint, global::System.IntPtr TransferFunction);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCreateGrayProfile")]
            internal static extern global::System.IntPtr CmsCreateGrayProfile(global::System.IntPtr WhitePoint, global::System.IntPtr TransferFunction);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCreateLinearizationDeviceLinkTHR")]
            internal static extern global::System.IntPtr CmsCreateLinearizationDeviceLinkTHR(global::System.IntPtr ContextID, global::icms2_clr.CmsColorSpaceSignature ColorSpace, global::System.IntPtr[] TransferFunctions);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCreateLinearizationDeviceLink")]
            internal static extern global::System.IntPtr CmsCreateLinearizationDeviceLink(global::icms2_clr.CmsColorSpaceSignature ColorSpace, global::System.IntPtr[] TransferFunctions);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCreateInkLimitingDeviceLinkTHR")]
            internal static extern global::System.IntPtr CmsCreateInkLimitingDeviceLinkTHR(global::System.IntPtr ContextID, global::icms2_clr.CmsColorSpaceSignature ColorSpace, double Limit);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCreateInkLimitingDeviceLink")]
            internal static extern global::System.IntPtr CmsCreateInkLimitingDeviceLink(global::icms2_clr.CmsColorSpaceSignature ColorSpace, double Limit);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCreateLab2ProfileTHR")]
            internal static extern global::System.IntPtr CmsCreateLab2ProfileTHR(global::System.IntPtr ContextID, global::System.IntPtr WhitePoint);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCreateLab2Profile")]
            internal static extern global::System.IntPtr CmsCreateLab2Profile(global::System.IntPtr WhitePoint);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCreateLab4ProfileTHR")]
            internal static extern global::System.IntPtr CmsCreateLab4ProfileTHR(global::System.IntPtr ContextID, global::System.IntPtr WhitePoint);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCreateLab4Profile")]
            internal static extern global::System.IntPtr CmsCreateLab4Profile(global::System.IntPtr WhitePoint);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCreateXYZProfileTHR")]
            internal static extern global::System.IntPtr CmsCreateXYZProfileTHR(global::System.IntPtr ContextID);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCreateXYZProfile")]
            internal static extern global::System.IntPtr CmsCreateXYZProfile();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCreate_sRGBProfileTHR")]
            internal static extern global::System.IntPtr CmsCreateSRGBProfileTHR(global::System.IntPtr ContextID);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCreate_sRGBProfile")]
            internal static extern global::System.IntPtr CmsCreateSRGBProfile();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCreateBCHSWabstractProfileTHR")]
            internal static extern global::System.IntPtr CmsCreateBCHSWabstractProfileTHR(global::System.IntPtr ContextID, uint nLUTPoints, double Bright, double Contrast, double Hue, double Saturation, uint TempSrc, uint TempDest);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCreateBCHSWabstractProfile")]
            internal static extern global::System.IntPtr CmsCreateBCHSWabstractProfile(uint nLUTPoints, double Bright, double Contrast, double Hue, double Saturation, uint TempSrc, uint TempDest);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCreateNULLProfileTHR")]
            internal static extern global::System.IntPtr CmsCreateNULLProfileTHR(global::System.IntPtr ContextID);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCreateNULLProfile")]
            internal static extern global::System.IntPtr CmsCreateNULLProfile();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsTransform2DeviceLink")]
            internal static extern global::System.IntPtr CmsTransform2DeviceLink(global::System.IntPtr hTransform, double Version, uint dwFlags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetSupportedIntents")]
            internal static extern uint CmsGetSupportedIntents(uint nMax, uint* Codes, sbyte** Descriptions);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetSupportedIntentsTHR")]
            internal static extern uint CmsGetSupportedIntentsTHR(global::System.IntPtr ContextID, uint nMax, uint* Codes, sbyte** Descriptions);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCreateTransformTHR")]
            internal static extern global::System.IntPtr CmsCreateTransformTHR(global::System.IntPtr ContextID, global::System.IntPtr Input, uint InputFormat, global::System.IntPtr Output, uint OutputFormat, uint Intent, uint dwFlags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCreateTransform")]
            internal static extern global::System.IntPtr CmsCreateTransform(global::System.IntPtr Input, uint InputFormat, global::System.IntPtr Output, uint OutputFormat, uint Intent, uint dwFlags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCreateProofingTransformTHR")]
            internal static extern global::System.IntPtr CmsCreateProofingTransformTHR(global::System.IntPtr ContextID, global::System.IntPtr Input, uint InputFormat, global::System.IntPtr Output, uint OutputFormat, global::System.IntPtr Proofing, uint Intent, uint ProofingIntent, uint dwFlags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCreateProofingTransform")]
            internal static extern global::System.IntPtr CmsCreateProofingTransform(global::System.IntPtr Input, uint InputFormat, global::System.IntPtr Output, uint OutputFormat, global::System.IntPtr Proofing, uint Intent, uint ProofingIntent, uint dwFlags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCreateMultiprofileTransformTHR")]
            internal static extern global::System.IntPtr CmsCreateMultiprofileTransformTHR(global::System.IntPtr ContextID, global::System.IntPtr[] hProfiles, uint nProfiles, uint InputFormat, uint OutputFormat, uint Intent, uint dwFlags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCreateMultiprofileTransform")]
            internal static extern global::System.IntPtr CmsCreateMultiprofileTransform(global::System.IntPtr[] hProfiles, uint nProfiles, uint InputFormat, uint OutputFormat, uint Intent, uint dwFlags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsCreateExtendedTransform")]
            internal static extern global::System.IntPtr CmsCreateExtendedTransform(global::System.IntPtr ContextID, uint nProfiles, global::System.IntPtr[] hProfiles, int[] BPC, uint[] Intents, double[] AdaptationStates, global::System.IntPtr hGamutProfile, uint nGamutPCSposition, uint InputFormat, uint OutputFormat, uint dwFlags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsDeleteTransform")]
            internal static extern void CmsDeleteTransform(global::System.IntPtr hTransform);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsDoTransform")]
            internal static extern void CmsDoTransform(global::System.IntPtr Transform, global::System.IntPtr InputBuffer, global::System.IntPtr OutputBuffer, uint Size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsDoTransformStride")]
            internal static extern void CmsDoTransformStride(global::System.IntPtr Transform, global::System.IntPtr InputBuffer, global::System.IntPtr OutputBuffer, uint Size, uint Stride);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsDoTransformLineStride")]
            internal static extern void CmsDoTransformLineStride(global::System.IntPtr Transform, global::System.IntPtr InputBuffer, global::System.IntPtr OutputBuffer, uint PixelsPerLine, uint LineCount, uint BytesPerLineIn, uint BytesPerLineOut, uint BytesPerPlaneIn, uint BytesPerPlaneOut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsSetAlarmCodes")]
            internal static extern void CmsSetAlarmCodes(ushort[] NewAlarm);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetAlarmCodes")]
            internal static extern void CmsGetAlarmCodes(ushort[] NewAlarm);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsSetAlarmCodesTHR")]
            internal static extern void CmsSetAlarmCodesTHR(global::System.IntPtr ContextID, ushort[] AlarmCodes);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetAlarmCodesTHR")]
            internal static extern void CmsGetAlarmCodesTHR(global::System.IntPtr ContextID, ushort[] AlarmCodes);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsSetAdaptationState")]
            internal static extern double CmsSetAdaptationState(double d);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsSetAdaptationStateTHR")]
            internal static extern double CmsSetAdaptationStateTHR(global::System.IntPtr ContextID, double d);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetTransformContextID")]
            internal static extern global::System.IntPtr CmsGetTransformContextID(global::System.IntPtr hTransform);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetTransformInputFormat")]
            internal static extern uint CmsGetTransformInputFormat(global::System.IntPtr hTransform);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetTransformOutputFormat")]
            internal static extern uint CmsGetTransformOutputFormat(global::System.IntPtr hTransform);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsChangeBuffersFormat")]
            internal static extern int CmsChangeBuffersFormat(global::System.IntPtr hTransform, uint InputFormat, uint OutputFormat);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetPostScriptColorResource")]
            internal static extern uint CmsGetPostScriptColorResource(global::System.IntPtr ContextID, global::icms2_clr.CmsPSResourceType Type, global::System.IntPtr hProfile, uint Intent, uint dwFlags, global::System.IntPtr io);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetPostScriptCSA")]
            internal static extern uint CmsGetPostScriptCSA(global::System.IntPtr ContextID, global::System.IntPtr hProfile, uint Intent, uint dwFlags, global::System.IntPtr Buffer, uint dwBufferLen);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGetPostScriptCRD")]
            internal static extern uint CmsGetPostScriptCRD(global::System.IntPtr ContextID, global::System.IntPtr hProfile, uint Intent, uint dwFlags, global::System.IntPtr Buffer, uint dwBufferLen);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8Alloc")]
            internal static extern global::System.IntPtr CmsIT8Alloc(global::System.IntPtr ContextID);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8Free")]
            internal static extern void CmsIT8Free(global::System.IntPtr hIT8);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8TableCount")]
            internal static extern uint CmsIT8TableCount(global::System.IntPtr hIT8);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8SetTable")]
            internal static extern int CmsIT8SetTable(global::System.IntPtr hIT8, uint nTable);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8LoadFromFile")]
            internal static extern global::System.IntPtr CmsIT8LoadFromFile(global::System.IntPtr ContextID, [MarshalAs(UnmanagedType.LPStr)] string cFileName);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8LoadFromMem")]
            internal static extern global::System.IntPtr CmsIT8LoadFromMem(global::System.IntPtr ContextID, global::System.IntPtr Ptr, uint len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8SaveToFile")]
            internal static extern int CmsIT8SaveToFile(global::System.IntPtr hIT8, [MarshalAs(UnmanagedType.LPStr)] string cFileName);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8SaveToMem")]
            internal static extern int CmsIT8SaveToMem(global::System.IntPtr hIT8, global::System.IntPtr MemPtr, uint* BytesNeeded);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8GetSheetType")]
            internal static extern global::System.IntPtr CmsIT8GetSheetType(global::System.IntPtr hIT8);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8SetSheetType")]
            internal static extern int CmsIT8SetSheetType(global::System.IntPtr hIT8, [MarshalAs(UnmanagedType.LPStr)] string Type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8SetComment")]
            internal static extern int CmsIT8SetComment(global::System.IntPtr hIT8, [MarshalAs(UnmanagedType.LPStr)] string cComment);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8SetPropertyStr")]
            internal static extern int CmsIT8SetPropertyStr(global::System.IntPtr hIT8, [MarshalAs(UnmanagedType.LPStr)] string cProp, [MarshalAs(UnmanagedType.LPStr)] string Str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8SetPropertyDbl")]
            internal static extern int CmsIT8SetPropertyDbl(global::System.IntPtr hIT8, [MarshalAs(UnmanagedType.LPStr)] string cProp, double Val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8SetPropertyHex")]
            internal static extern int CmsIT8SetPropertyHex(global::System.IntPtr hIT8, [MarshalAs(UnmanagedType.LPStr)] string cProp, uint Val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8SetPropertyMulti")]
            internal static extern int CmsIT8SetPropertyMulti(global::System.IntPtr hIT8, [MarshalAs(UnmanagedType.LPStr)] string Key, [MarshalAs(UnmanagedType.LPStr)] string SubKey, [MarshalAs(UnmanagedType.LPStr)] string Buffer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8SetPropertyUncooked")]
            internal static extern int CmsIT8SetPropertyUncooked(global::System.IntPtr hIT8, [MarshalAs(UnmanagedType.LPStr)] string Key, [MarshalAs(UnmanagedType.LPStr)] string Buffer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8GetProperty")]
            internal static extern global::System.IntPtr CmsIT8GetProperty(global::System.IntPtr hIT8, [MarshalAs(UnmanagedType.LPStr)] string cProp);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8GetPropertyDbl")]
            internal static extern double CmsIT8GetPropertyDbl(global::System.IntPtr hIT8, [MarshalAs(UnmanagedType.LPStr)] string cProp);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8GetPropertyMulti")]
            internal static extern global::System.IntPtr CmsIT8GetPropertyMulti(global::System.IntPtr hIT8, [MarshalAs(UnmanagedType.LPStr)] string Key, [MarshalAs(UnmanagedType.LPStr)] string SubKey);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8EnumProperties")]
            internal static extern uint CmsIT8EnumProperties(global::System.IntPtr hIT8, sbyte*** PropertyNames);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8EnumPropertyMulti")]
            internal static extern uint CmsIT8EnumPropertyMulti(global::System.IntPtr hIT8, [MarshalAs(UnmanagedType.LPStr)] string cProp, sbyte*** SubpropertyNames);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8GetDataRowCol")]
            internal static extern global::System.IntPtr CmsIT8GetDataRowCol(global::System.IntPtr hIT8, int row, int col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8GetDataRowColDbl")]
            internal static extern double CmsIT8GetDataRowColDbl(global::System.IntPtr hIT8, int row, int col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8SetDataRowCol")]
            internal static extern int CmsIT8SetDataRowCol(global::System.IntPtr hIT8, int row, int col, [MarshalAs(UnmanagedType.LPStr)] string Val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8SetDataRowColDbl")]
            internal static extern int CmsIT8SetDataRowColDbl(global::System.IntPtr hIT8, int row, int col, double Val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8GetData")]
            internal static extern global::System.IntPtr CmsIT8GetData(global::System.IntPtr hIT8, [MarshalAs(UnmanagedType.LPStr)] string cPatch, [MarshalAs(UnmanagedType.LPStr)] string cSample);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8GetDataDbl")]
            internal static extern double CmsIT8GetDataDbl(global::System.IntPtr hIT8, [MarshalAs(UnmanagedType.LPStr)] string cPatch, [MarshalAs(UnmanagedType.LPStr)] string cSample);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8SetData")]
            internal static extern int CmsIT8SetData(global::System.IntPtr hIT8, [MarshalAs(UnmanagedType.LPStr)] string cPatch, [MarshalAs(UnmanagedType.LPStr)] string cSample, [MarshalAs(UnmanagedType.LPStr)] string Val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8SetDataDbl")]
            internal static extern int CmsIT8SetDataDbl(global::System.IntPtr hIT8, [MarshalAs(UnmanagedType.LPStr)] string cPatch, [MarshalAs(UnmanagedType.LPStr)] string cSample, double Val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8FindDataFormat")]
            internal static extern int CmsIT8FindDataFormat(global::System.IntPtr hIT8, [MarshalAs(UnmanagedType.LPStr)] string cSample);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8SetDataFormat")]
            internal static extern int CmsIT8SetDataFormat(global::System.IntPtr hIT8, int n, [MarshalAs(UnmanagedType.LPStr)] string Sample);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8EnumDataFormat")]
            internal static extern int CmsIT8EnumDataFormat(global::System.IntPtr hIT8, sbyte*** SampleNames);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8GetPatchName")]
            internal static extern global::System.IntPtr CmsIT8GetPatchName(global::System.IntPtr hIT8, int nPatch, sbyte* buffer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8GetPatchByName")]
            internal static extern int CmsIT8GetPatchByName(global::System.IntPtr hIT8, [MarshalAs(UnmanagedType.LPStr)] string cPatch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8SetTableByLabel")]
            internal static extern int CmsIT8SetTableByLabel(global::System.IntPtr hIT8, [MarshalAs(UnmanagedType.LPStr)] string cSet, [MarshalAs(UnmanagedType.LPStr)] string cField, [MarshalAs(UnmanagedType.LPStr)] string ExpectedType);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8SetIndexColumn")]
            internal static extern int CmsIT8SetIndexColumn(global::System.IntPtr hIT8, [MarshalAs(UnmanagedType.LPStr)] string cSample);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsIT8DefineDblFormat")]
            internal static extern void CmsIT8DefineDblFormat(global::System.IntPtr hIT8, [MarshalAs(UnmanagedType.LPStr)] string Formatter);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGBDAlloc")]
            internal static extern global::System.IntPtr CmsGBDAlloc(global::System.IntPtr ContextID);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGBDFree")]
            internal static extern void CmsGBDFree(global::System.IntPtr hGBD);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGDBAddPoint")]
            internal static extern int CmsGDBAddPoint(global::System.IntPtr hGBD, global::System.IntPtr Lab);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGDBCompute")]
            internal static extern int CmsGDBCompute(global::System.IntPtr hGDB, uint dwFlags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsGDBCheckPoint")]
            internal static extern int CmsGDBCheckPoint(global::System.IntPtr hGBD, global::System.IntPtr Lab);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsDetectBlackPoint")]
            internal static extern int CmsDetectBlackPoint(global::System.IntPtr BlackPoint, global::System.IntPtr hProfile, uint Intent, uint dwFlags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsDetectDestinationBlackPoint")]
            internal static extern int CmsDetectDestinationBlackPoint(global::System.IntPtr BlackPoint, global::System.IntPtr hProfile, uint Intent, uint dwFlags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsDetectTAC")]
            internal static extern double CmsDetectTAC(global::System.IntPtr hProfile);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("icms2_clr", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cmsDesaturateLab")]
            internal static extern int CmsDesaturateLab(global::System.IntPtr Lab, double amax, double amin, double bmax, double bmin);
        }

        public static int CmsGetEncodedCMMversion()
        {
            var __ret = __Internal.CmsGetEncodedCMMversion();
            return __ret;
        }

        public static int Cmsstrcasecmp(string s1, string s2)
        {
            var __ret = __Internal.Cmsstrcasecmp(s1, s2);
            return __ret;
        }

        public static global::icms2_clr.CmsContextStruct CmsCreateContext(global::System.IntPtr Plugin, global::System.IntPtr UserData)
        {
            var __ret = __Internal.CmsCreateContext(Plugin, UserData);
            global::icms2_clr.CmsContextStruct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsContextStruct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsContextStruct) global::icms2_clr.CmsContextStruct.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsContextStruct.__CreateInstance(__ret);
            return __result0;
        }

        public static void CmsDeleteContext(global::icms2_clr.CmsContextStruct ContexID)
        {
            var __arg0 = ReferenceEquals(ContexID, null) ? global::System.IntPtr.Zero : ContexID.__Instance;
            __Internal.CmsDeleteContext(__arg0);
        }

        public static global::icms2_clr.CmsContextStruct CmsDupContext(global::icms2_clr.CmsContextStruct ContextID, global::System.IntPtr NewUserData)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsDupContext(__arg0, NewUserData);
            global::icms2_clr.CmsContextStruct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsContextStruct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsContextStruct) global::icms2_clr.CmsContextStruct.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsContextStruct.__CreateInstance(__ret);
            return __result0;
        }

        public static global::System.IntPtr CmsGetContextUserData(global::icms2_clr.CmsContextStruct ContextID)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsGetContextUserData(__arg0);
            return __ret;
        }

        public static int CmsPlugin(global::System.IntPtr Plugin)
        {
            var __ret = __Internal.CmsPlugin(Plugin);
            return __ret;
        }

        public static int CmsPluginTHR(global::icms2_clr.CmsContextStruct ContextID, global::System.IntPtr Plugin)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsPluginTHR(__arg0, Plugin);
            return __ret;
        }

        public static void CmsUnregisterPlugins()
        {
            __Internal.CmsUnregisterPlugins();
        }

        public static void CmsUnregisterPluginsTHR(global::icms2_clr.CmsContextStruct ContextID)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            __Internal.CmsUnregisterPluginsTHR(__arg0);
        }

        public static void CmsSetLogErrorHandler(global::icms2_clr.CmsLogErrorHandlerFunction Fn)
        {
            var __arg0 = Fn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(Fn);
            __Internal.CmsSetLogErrorHandler(__arg0);
        }

        public static void CmsSetLogErrorHandlerTHR(global::icms2_clr.CmsContextStruct ContextID, global::icms2_clr.CmsLogErrorHandlerFunction Fn)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __arg1 = Fn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(Fn);
            __Internal.CmsSetLogErrorHandlerTHR(__arg0, __arg1);
        }

        public static global::icms2_clr.CmsCIEXYZ CmsD50XYZ()
        {
            var __ret = __Internal.CmsD50XYZ();
            global::icms2_clr.CmsCIEXYZ __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsCIEXYZ.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsCIEXYZ) global::icms2_clr.CmsCIEXYZ.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsCIEXYZ.__CreateInstance(__ret);
            return __result0;
        }

        public static global::icms2_clr.CmsCIExyY CmsD50XyY()
        {
            var __ret = __Internal.CmsD50XyY();
            global::icms2_clr.CmsCIExyY __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsCIExyY.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsCIExyY) global::icms2_clr.CmsCIExyY.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsCIExyY.__CreateInstance(__ret);
            return __result0;
        }

        public static void CmsXYZ2xyY(global::icms2_clr.CmsCIExyY Dest, global::icms2_clr.CmsCIEXYZ Source)
        {
            var __arg0 = ReferenceEquals(Dest, null) ? global::System.IntPtr.Zero : Dest.__Instance;
            var __arg1 = ReferenceEquals(Source, null) ? global::System.IntPtr.Zero : Source.__Instance;
            __Internal.CmsXYZ2xyY(__arg0, __arg1);
        }

        public static void CmsxyY2XYZ(global::icms2_clr.CmsCIEXYZ Dest, global::icms2_clr.CmsCIExyY Source)
        {
            var __arg0 = ReferenceEquals(Dest, null) ? global::System.IntPtr.Zero : Dest.__Instance;
            var __arg1 = ReferenceEquals(Source, null) ? global::System.IntPtr.Zero : Source.__Instance;
            __Internal.CmsxyY2XYZ(__arg0, __arg1);
        }

        public static void CmsXYZ2Lab(global::icms2_clr.CmsCIEXYZ WhitePoint, global::icms2_clr.CmsCIELab Lab, global::icms2_clr.CmsCIEXYZ xyz)
        {
            var __arg0 = ReferenceEquals(WhitePoint, null) ? global::System.IntPtr.Zero : WhitePoint.__Instance;
            var __arg1 = ReferenceEquals(Lab, null) ? global::System.IntPtr.Zero : Lab.__Instance;
            var __arg2 = ReferenceEquals(xyz, null) ? global::System.IntPtr.Zero : xyz.__Instance;
            __Internal.CmsXYZ2Lab(__arg0, __arg1, __arg2);
        }

        public static void CmsLab2XYZ(global::icms2_clr.CmsCIEXYZ WhitePoint, global::icms2_clr.CmsCIEXYZ xyz, global::icms2_clr.CmsCIELab Lab)
        {
            var __arg0 = ReferenceEquals(WhitePoint, null) ? global::System.IntPtr.Zero : WhitePoint.__Instance;
            var __arg1 = ReferenceEquals(xyz, null) ? global::System.IntPtr.Zero : xyz.__Instance;
            var __arg2 = ReferenceEquals(Lab, null) ? global::System.IntPtr.Zero : Lab.__Instance;
            __Internal.CmsLab2XYZ(__arg0, __arg1, __arg2);
        }

        public static void CmsLab2LCh(global::icms2_clr.CmsCIELCh LCh, global::icms2_clr.CmsCIELab Lab)
        {
            var __arg0 = ReferenceEquals(LCh, null) ? global::System.IntPtr.Zero : LCh.__Instance;
            var __arg1 = ReferenceEquals(Lab, null) ? global::System.IntPtr.Zero : Lab.__Instance;
            __Internal.CmsLab2LCh(__arg0, __arg1);
        }

        public static void CmsLCh2Lab(global::icms2_clr.CmsCIELab Lab, global::icms2_clr.CmsCIELCh LCh)
        {
            var __arg0 = ReferenceEquals(Lab, null) ? global::System.IntPtr.Zero : Lab.__Instance;
            var __arg1 = ReferenceEquals(LCh, null) ? global::System.IntPtr.Zero : LCh.__Instance;
            __Internal.CmsLCh2Lab(__arg0, __arg1);
        }

        public static void CmsLabEncoded2Float(global::icms2_clr.CmsCIELab Lab, ushort[] wLab)
        {
            var __arg0 = ReferenceEquals(Lab, null) ? global::System.IntPtr.Zero : Lab.__Instance;
            if (wLab == null || wLab.Length != 3)
                throw new ArgumentOutOfRangeException("wLab", "The dimensions of the provided array don't match the required size.");
            __Internal.CmsLabEncoded2Float(__arg0, wLab);
        }

        public static void CmsLabEncoded2FloatV2(global::icms2_clr.CmsCIELab Lab, ushort[] wLab)
        {
            var __arg0 = ReferenceEquals(Lab, null) ? global::System.IntPtr.Zero : Lab.__Instance;
            if (wLab == null || wLab.Length != 3)
                throw new ArgumentOutOfRangeException("wLab", "The dimensions of the provided array don't match the required size.");
            __Internal.CmsLabEncoded2FloatV2(__arg0, wLab);
        }

        public static void CmsFloat2LabEncoded(ushort[] wLab, global::icms2_clr.CmsCIELab Lab)
        {
            if (wLab == null || wLab.Length != 3)
                throw new ArgumentOutOfRangeException("wLab", "The dimensions of the provided array don't match the required size.");
            var __arg1 = ReferenceEquals(Lab, null) ? global::System.IntPtr.Zero : Lab.__Instance;
            __Internal.CmsFloat2LabEncoded(wLab, __arg1);
        }

        public static void CmsFloat2LabEncodedV2(ushort[] wLab, global::icms2_clr.CmsCIELab Lab)
        {
            if (wLab == null || wLab.Length != 3)
                throw new ArgumentOutOfRangeException("wLab", "The dimensions of the provided array don't match the required size.");
            var __arg1 = ReferenceEquals(Lab, null) ? global::System.IntPtr.Zero : Lab.__Instance;
            __Internal.CmsFloat2LabEncodedV2(wLab, __arg1);
        }

        public static void CmsXYZEncoded2Float(global::icms2_clr.CmsCIEXYZ fxyz, ushort[] XYZ)
        {
            var __arg0 = ReferenceEquals(fxyz, null) ? global::System.IntPtr.Zero : fxyz.__Instance;
            if (XYZ == null || XYZ.Length != 3)
                throw new ArgumentOutOfRangeException("XYZ", "The dimensions of the provided array don't match the required size.");
            __Internal.CmsXYZEncoded2Float(__arg0, XYZ);
        }

        public static void CmsFloat2XYZEncoded(ushort[] XYZ, global::icms2_clr.CmsCIEXYZ fXYZ)
        {
            if (XYZ == null || XYZ.Length != 3)
                throw new ArgumentOutOfRangeException("XYZ", "The dimensions of the provided array don't match the required size.");
            var __arg1 = ReferenceEquals(fXYZ, null) ? global::System.IntPtr.Zero : fXYZ.__Instance;
            __Internal.CmsFloat2XYZEncoded(XYZ, __arg1);
        }

        public static double CmsDeltaE(global::icms2_clr.CmsCIELab Lab1, global::icms2_clr.CmsCIELab Lab2)
        {
            var __arg0 = ReferenceEquals(Lab1, null) ? global::System.IntPtr.Zero : Lab1.__Instance;
            var __arg1 = ReferenceEquals(Lab2, null) ? global::System.IntPtr.Zero : Lab2.__Instance;
            var __ret = __Internal.CmsDeltaE(__arg0, __arg1);
            return __ret;
        }

        public static double CmsCIE94DeltaE(global::icms2_clr.CmsCIELab Lab1, global::icms2_clr.CmsCIELab Lab2)
        {
            var __arg0 = ReferenceEquals(Lab1, null) ? global::System.IntPtr.Zero : Lab1.__Instance;
            var __arg1 = ReferenceEquals(Lab2, null) ? global::System.IntPtr.Zero : Lab2.__Instance;
            var __ret = __Internal.CmsCIE94DeltaE(__arg0, __arg1);
            return __ret;
        }

        public static double CmsBFDdeltaE(global::icms2_clr.CmsCIELab Lab1, global::icms2_clr.CmsCIELab Lab2)
        {
            var __arg0 = ReferenceEquals(Lab1, null) ? global::System.IntPtr.Zero : Lab1.__Instance;
            var __arg1 = ReferenceEquals(Lab2, null) ? global::System.IntPtr.Zero : Lab2.__Instance;
            var __ret = __Internal.CmsBFDdeltaE(__arg0, __arg1);
            return __ret;
        }

        public static double CmsCMCdeltaE(global::icms2_clr.CmsCIELab Lab1, global::icms2_clr.CmsCIELab Lab2, double l, double c)
        {
            var __arg0 = ReferenceEquals(Lab1, null) ? global::System.IntPtr.Zero : Lab1.__Instance;
            var __arg1 = ReferenceEquals(Lab2, null) ? global::System.IntPtr.Zero : Lab2.__Instance;
            var __ret = __Internal.CmsCMCdeltaE(__arg0, __arg1, l, c);
            return __ret;
        }

        public static double CmsCIE2000DeltaE(global::icms2_clr.CmsCIELab Lab1, global::icms2_clr.CmsCIELab Lab2, double Kl, double Kc, double Kh)
        {
            var __arg0 = ReferenceEquals(Lab1, null) ? global::System.IntPtr.Zero : Lab1.__Instance;
            var __arg1 = ReferenceEquals(Lab2, null) ? global::System.IntPtr.Zero : Lab2.__Instance;
            var __ret = __Internal.CmsCIE2000DeltaE(__arg0, __arg1, Kl, Kc, Kh);
            return __ret;
        }

        public static int CmsWhitePointFromTemp(global::icms2_clr.CmsCIExyY WhitePoint, double TempK)
        {
            var __arg0 = ReferenceEquals(WhitePoint, null) ? global::System.IntPtr.Zero : WhitePoint.__Instance;
            var __ret = __Internal.CmsWhitePointFromTemp(__arg0, TempK);
            return __ret;
        }

        public static int CmsTempFromWhitePoint(ref double TempK, global::icms2_clr.CmsCIExyY WhitePoint)
        {
            fixed (double* __TempK0 = &TempK)
            {
                var __arg0 = __TempK0;
                var __arg1 = ReferenceEquals(WhitePoint, null) ? global::System.IntPtr.Zero : WhitePoint.__Instance;
                var __ret = __Internal.CmsTempFromWhitePoint(__arg0, __arg1);
                return __ret;
            }
        }

        public static int CmsAdaptToIlluminant(global::icms2_clr.CmsCIEXYZ Result, global::icms2_clr.CmsCIEXYZ SourceWhitePt, global::icms2_clr.CmsCIEXYZ Illuminant, global::icms2_clr.CmsCIEXYZ Value)
        {
            var __arg0 = ReferenceEquals(Result, null) ? global::System.IntPtr.Zero : Result.__Instance;
            var __arg1 = ReferenceEquals(SourceWhitePt, null) ? global::System.IntPtr.Zero : SourceWhitePt.__Instance;
            var __arg2 = ReferenceEquals(Illuminant, null) ? global::System.IntPtr.Zero : Illuminant.__Instance;
            var __arg3 = ReferenceEquals(Value, null) ? global::System.IntPtr.Zero : Value.__Instance;
            var __ret = __Internal.CmsAdaptToIlluminant(__arg0, __arg1, __arg2, __arg3);
            return __ret;
        }

        public static global::System.IntPtr CmsCIECAM02Init(global::icms2_clr.CmsContextStruct ContextID, global::icms2_clr.CmsViewingConditions pVC)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __arg1 = ReferenceEquals(pVC, null) ? global::System.IntPtr.Zero : pVC.__Instance;
            var __ret = __Internal.CmsCIECAM02Init(__arg0, __arg1);
            return __ret;
        }

        public static void CmsCIECAM02Done(global::System.IntPtr hModel)
        {
            __Internal.CmsCIECAM02Done(hModel);
        }

        public static void CmsCIECAM02Forward(global::System.IntPtr hModel, global::icms2_clr.CmsCIEXYZ pIn, global::icms2_clr.CmsJCh pOut)
        {
            var __arg1 = ReferenceEquals(pIn, null) ? global::System.IntPtr.Zero : pIn.__Instance;
            var __arg2 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            __Internal.CmsCIECAM02Forward(hModel, __arg1, __arg2);
        }

        public static void CmsCIECAM02Reverse(global::System.IntPtr hModel, global::icms2_clr.CmsJCh pIn, global::icms2_clr.CmsCIEXYZ pOut)
        {
            var __arg1 = ReferenceEquals(pIn, null) ? global::System.IntPtr.Zero : pIn.__Instance;
            var __arg2 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            __Internal.CmsCIECAM02Reverse(hModel, __arg1, __arg2);
        }

        public static global::icms2_clr.CmsCurveStruct CmsBuildSegmentedToneCurve(global::icms2_clr.CmsContextStruct ContextID, uint nSegments, global::icms2_clr.CmsCurveSegment[] Segments)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            global::icms2_clr.CmsCurveSegment.__Internal[] __Segments;
            if (ReferenceEquals(Segments, null))
                __Segments = null;
            else
            {
                __Segments = new global::icms2_clr.CmsCurveSegment.__Internal[Segments.Length];
                for (int i = 0; i < __Segments.Length; i++)
                {
                    var __element = Segments[i];
                    __Segments[i] = ReferenceEquals(__element, null) ? new global::icms2_clr.CmsCurveSegment.__Internal() : *(global::icms2_clr.CmsCurveSegment.__Internal*) __element.__Instance;
                }
            }
            var __arg2 = __Segments;
            var __ret = __Internal.CmsBuildSegmentedToneCurve(__arg0, nSegments, __arg2);
            global::icms2_clr.CmsCurveStruct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsCurveStruct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsCurveStruct) global::icms2_clr.CmsCurveStruct.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsCurveStruct.__CreateInstance(__ret);
            return __result0;
        }

        public static global::icms2_clr.CmsCurveStruct CmsBuildParametricToneCurve(global::icms2_clr.CmsContextStruct ContextID, int Type, double[] Params)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsBuildParametricToneCurve(__arg0, Type, Params);
            global::icms2_clr.CmsCurveStruct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsCurveStruct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsCurveStruct) global::icms2_clr.CmsCurveStruct.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsCurveStruct.__CreateInstance(__ret);
            return __result0;
        }

        public static global::icms2_clr.CmsCurveStruct CmsBuildGamma(global::icms2_clr.CmsContextStruct ContextID, double Gamma)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsBuildGamma(__arg0, Gamma);
            global::icms2_clr.CmsCurveStruct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsCurveStruct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsCurveStruct) global::icms2_clr.CmsCurveStruct.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsCurveStruct.__CreateInstance(__ret);
            return __result0;
        }

        public static global::icms2_clr.CmsCurveStruct CmsBuildTabulatedToneCurve16(global::icms2_clr.CmsContextStruct ContextID, uint nEntries, ushort[] values)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsBuildTabulatedToneCurve16(__arg0, nEntries, values);
            global::icms2_clr.CmsCurveStruct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsCurveStruct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsCurveStruct) global::icms2_clr.CmsCurveStruct.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsCurveStruct.__CreateInstance(__ret);
            return __result0;
        }

        public static global::icms2_clr.CmsCurveStruct CmsBuildTabulatedToneCurveFloat(global::icms2_clr.CmsContextStruct ContextID, uint nEntries, float[] values)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsBuildTabulatedToneCurveFloat(__arg0, nEntries, values);
            global::icms2_clr.CmsCurveStruct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsCurveStruct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsCurveStruct) global::icms2_clr.CmsCurveStruct.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsCurveStruct.__CreateInstance(__ret);
            return __result0;
        }

        public static void CmsFreeToneCurve(global::icms2_clr.CmsCurveStruct Curve)
        {
            var __arg0 = ReferenceEquals(Curve, null) ? global::System.IntPtr.Zero : Curve.__Instance;
            __Internal.CmsFreeToneCurve(__arg0);
        }

        public static void CmsFreeToneCurveTriple(global::icms2_clr.CmsCurveStruct[] Curve)
        {
            if (Curve == null || Curve.Length != 3)
                throw new ArgumentOutOfRangeException("Curve", "The dimensions of the provided array don't match the required size.");
            global::System.IntPtr[] __Curve;
            if (ReferenceEquals(Curve, null))
                __Curve = null;
            else
            {
                __Curve = new global::System.IntPtr[Curve.Length];
                for (int i = 0; i < __Curve.Length; i++)
                {
                    var __element = Curve[i];
                    __Curve[i] = ReferenceEquals(__element, null) ? global::System.IntPtr.Zero : __element.__Instance;
                }
            }
            var __arg0 = __Curve;
            __Internal.CmsFreeToneCurveTriple(__arg0);
        }

        public static global::icms2_clr.CmsCurveStruct CmsDupToneCurve(global::icms2_clr.CmsCurveStruct Src)
        {
            var __arg0 = ReferenceEquals(Src, null) ? global::System.IntPtr.Zero : Src.__Instance;
            var __ret = __Internal.CmsDupToneCurve(__arg0);
            global::icms2_clr.CmsCurveStruct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsCurveStruct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsCurveStruct) global::icms2_clr.CmsCurveStruct.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsCurveStruct.__CreateInstance(__ret);
            return __result0;
        }

        public static global::icms2_clr.CmsCurveStruct CmsReverseToneCurve(global::icms2_clr.CmsCurveStruct InGamma)
        {
            var __arg0 = ReferenceEquals(InGamma, null) ? global::System.IntPtr.Zero : InGamma.__Instance;
            var __ret = __Internal.CmsReverseToneCurve(__arg0);
            global::icms2_clr.CmsCurveStruct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsCurveStruct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsCurveStruct) global::icms2_clr.CmsCurveStruct.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsCurveStruct.__CreateInstance(__ret);
            return __result0;
        }

        public static global::icms2_clr.CmsCurveStruct CmsReverseToneCurveEx(uint nResultSamples, global::icms2_clr.CmsCurveStruct InGamma)
        {
            var __arg1 = ReferenceEquals(InGamma, null) ? global::System.IntPtr.Zero : InGamma.__Instance;
            var __ret = __Internal.CmsReverseToneCurveEx(nResultSamples, __arg1);
            global::icms2_clr.CmsCurveStruct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsCurveStruct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsCurveStruct) global::icms2_clr.CmsCurveStruct.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsCurveStruct.__CreateInstance(__ret);
            return __result0;
        }

        public static global::icms2_clr.CmsCurveStruct CmsJoinToneCurve(global::icms2_clr.CmsContextStruct ContextID, global::icms2_clr.CmsCurveStruct X, global::icms2_clr.CmsCurveStruct Y, uint nPoints)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __arg1 = ReferenceEquals(X, null) ? global::System.IntPtr.Zero : X.__Instance;
            var __arg2 = ReferenceEquals(Y, null) ? global::System.IntPtr.Zero : Y.__Instance;
            var __ret = __Internal.CmsJoinToneCurve(__arg0, __arg1, __arg2, nPoints);
            global::icms2_clr.CmsCurveStruct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsCurveStruct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsCurveStruct) global::icms2_clr.CmsCurveStruct.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsCurveStruct.__CreateInstance(__ret);
            return __result0;
        }

        public static int CmsSmoothToneCurve(global::icms2_clr.CmsCurveStruct Tab, double lambda)
        {
            var __arg0 = ReferenceEquals(Tab, null) ? global::System.IntPtr.Zero : Tab.__Instance;
            var __ret = __Internal.CmsSmoothToneCurve(__arg0, lambda);
            return __ret;
        }

        public static float CmsEvalToneCurveFloat(global::icms2_clr.CmsCurveStruct Curve, float v)
        {
            var __arg0 = ReferenceEquals(Curve, null) ? global::System.IntPtr.Zero : Curve.__Instance;
            var __ret = __Internal.CmsEvalToneCurveFloat(__arg0, v);
            return __ret;
        }

        public static ushort CmsEvalToneCurve16(global::icms2_clr.CmsCurveStruct Curve, ushort v)
        {
            var __arg0 = ReferenceEquals(Curve, null) ? global::System.IntPtr.Zero : Curve.__Instance;
            var __ret = __Internal.CmsEvalToneCurve16(__arg0, v);
            return __ret;
        }

        public static int CmsIsToneCurveMultisegment(global::icms2_clr.CmsCurveStruct InGamma)
        {
            var __arg0 = ReferenceEquals(InGamma, null) ? global::System.IntPtr.Zero : InGamma.__Instance;
            var __ret = __Internal.CmsIsToneCurveMultisegment(__arg0);
            return __ret;
        }

        public static int CmsIsToneCurveLinear(global::icms2_clr.CmsCurveStruct Curve)
        {
            var __arg0 = ReferenceEquals(Curve, null) ? global::System.IntPtr.Zero : Curve.__Instance;
            var __ret = __Internal.CmsIsToneCurveLinear(__arg0);
            return __ret;
        }

        public static int CmsIsToneCurveMonotonic(global::icms2_clr.CmsCurveStruct t)
        {
            var __arg0 = ReferenceEquals(t, null) ? global::System.IntPtr.Zero : t.__Instance;
            var __ret = __Internal.CmsIsToneCurveMonotonic(__arg0);
            return __ret;
        }

        public static int CmsIsToneCurveDescending(global::icms2_clr.CmsCurveStruct t)
        {
            var __arg0 = ReferenceEquals(t, null) ? global::System.IntPtr.Zero : t.__Instance;
            var __ret = __Internal.CmsIsToneCurveDescending(__arg0);
            return __ret;
        }

        public static int CmsGetToneCurveParametricType(global::icms2_clr.CmsCurveStruct t)
        {
            var __arg0 = ReferenceEquals(t, null) ? global::System.IntPtr.Zero : t.__Instance;
            var __ret = __Internal.CmsGetToneCurveParametricType(__arg0);
            return __ret;
        }

        public static double CmsEstimateGamma(global::icms2_clr.CmsCurveStruct t, double Precision)
        {
            var __arg0 = ReferenceEquals(t, null) ? global::System.IntPtr.Zero : t.__Instance;
            var __ret = __Internal.CmsEstimateGamma(__arg0, Precision);
            return __ret;
        }

        public static uint CmsGetToneCurveEstimatedTableEntries(global::icms2_clr.CmsCurveStruct t)
        {
            var __arg0 = ReferenceEquals(t, null) ? global::System.IntPtr.Zero : t.__Instance;
            var __ret = __Internal.CmsGetToneCurveEstimatedTableEntries(__arg0);
            return __ret;
        }

        public static ushort* CmsGetToneCurveEstimatedTable(global::icms2_clr.CmsCurveStruct t)
        {
            var __arg0 = ReferenceEquals(t, null) ? global::System.IntPtr.Zero : t.__Instance;
            var __ret = __Internal.CmsGetToneCurveEstimatedTable(__arg0);
            return __ret;
        }

        public static global::icms2_clr.CmsPipelineStruct CmsPipelineAlloc(global::icms2_clr.CmsContextStruct ContextID, uint InputChannels, uint OutputChannels)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsPipelineAlloc(__arg0, InputChannels, OutputChannels);
            global::icms2_clr.CmsPipelineStruct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsPipelineStruct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsPipelineStruct) global::icms2_clr.CmsPipelineStruct.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsPipelineStruct.__CreateInstance(__ret);
            return __result0;
        }

        public static void CmsPipelineFree(global::icms2_clr.CmsPipelineStruct lut)
        {
            var __arg0 = ReferenceEquals(lut, null) ? global::System.IntPtr.Zero : lut.__Instance;
            __Internal.CmsPipelineFree(__arg0);
        }

        public static global::icms2_clr.CmsPipelineStruct CmsPipelineDup(global::icms2_clr.CmsPipelineStruct Orig)
        {
            var __arg0 = ReferenceEquals(Orig, null) ? global::System.IntPtr.Zero : Orig.__Instance;
            var __ret = __Internal.CmsPipelineDup(__arg0);
            global::icms2_clr.CmsPipelineStruct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsPipelineStruct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsPipelineStruct) global::icms2_clr.CmsPipelineStruct.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsPipelineStruct.__CreateInstance(__ret);
            return __result0;
        }

        public static global::icms2_clr.CmsContextStruct CmsGetPipelineContextID(global::icms2_clr.CmsPipelineStruct lut)
        {
            var __arg0 = ReferenceEquals(lut, null) ? global::System.IntPtr.Zero : lut.__Instance;
            var __ret = __Internal.CmsGetPipelineContextID(__arg0);
            global::icms2_clr.CmsContextStruct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsContextStruct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsContextStruct) global::icms2_clr.CmsContextStruct.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsContextStruct.__CreateInstance(__ret);
            return __result0;
        }

        public static uint CmsPipelineInputChannels(global::icms2_clr.CmsPipelineStruct lut)
        {
            var __arg0 = ReferenceEquals(lut, null) ? global::System.IntPtr.Zero : lut.__Instance;
            var __ret = __Internal.CmsPipelineInputChannels(__arg0);
            return __ret;
        }

        public static uint CmsPipelineOutputChannels(global::icms2_clr.CmsPipelineStruct lut)
        {
            var __arg0 = ReferenceEquals(lut, null) ? global::System.IntPtr.Zero : lut.__Instance;
            var __ret = __Internal.CmsPipelineOutputChannels(__arg0);
            return __ret;
        }

        public static uint CmsPipelineStageCount(global::icms2_clr.CmsPipelineStruct lut)
        {
            var __arg0 = ReferenceEquals(lut, null) ? global::System.IntPtr.Zero : lut.__Instance;
            var __ret = __Internal.CmsPipelineStageCount(__arg0);
            return __ret;
        }

        public static global::icms2_clr.CmsStageStruct CmsPipelineGetPtrToFirstStage(global::icms2_clr.CmsPipelineStruct lut)
        {
            var __arg0 = ReferenceEquals(lut, null) ? global::System.IntPtr.Zero : lut.__Instance;
            var __ret = __Internal.CmsPipelineGetPtrToFirstStage(__arg0);
            global::icms2_clr.CmsStageStruct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsStageStruct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsStageStruct) global::icms2_clr.CmsStageStruct.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsStageStruct.__CreateInstance(__ret);
            return __result0;
        }

        public static global::icms2_clr.CmsStageStruct CmsPipelineGetPtrToLastStage(global::icms2_clr.CmsPipelineStruct lut)
        {
            var __arg0 = ReferenceEquals(lut, null) ? global::System.IntPtr.Zero : lut.__Instance;
            var __ret = __Internal.CmsPipelineGetPtrToLastStage(__arg0);
            global::icms2_clr.CmsStageStruct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsStageStruct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsStageStruct) global::icms2_clr.CmsStageStruct.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsStageStruct.__CreateInstance(__ret);
            return __result0;
        }

        public static void CmsPipelineEval16(ushort[] In, ushort[] Out, global::icms2_clr.CmsPipelineStruct lut)
        {
            var __arg2 = ReferenceEquals(lut, null) ? global::System.IntPtr.Zero : lut.__Instance;
            __Internal.CmsPipelineEval16(In, Out, __arg2);
        }

        public static void CmsPipelineEvalFloat(float[] In, float[] Out, global::icms2_clr.CmsPipelineStruct lut)
        {
            var __arg2 = ReferenceEquals(lut, null) ? global::System.IntPtr.Zero : lut.__Instance;
            __Internal.CmsPipelineEvalFloat(In, Out, __arg2);
        }

        public static int CmsPipelineEvalReverseFloat(float[] Target, float[] Result, float[] Hint, global::icms2_clr.CmsPipelineStruct lut)
        {
            var __arg3 = ReferenceEquals(lut, null) ? global::System.IntPtr.Zero : lut.__Instance;
            var __ret = __Internal.CmsPipelineEvalReverseFloat(Target, Result, Hint, __arg3);
            return __ret;
        }

        public static int CmsPipelineCat(global::icms2_clr.CmsPipelineStruct l1, global::icms2_clr.CmsPipelineStruct l2)
        {
            var __arg0 = ReferenceEquals(l1, null) ? global::System.IntPtr.Zero : l1.__Instance;
            var __arg1 = ReferenceEquals(l2, null) ? global::System.IntPtr.Zero : l2.__Instance;
            var __ret = __Internal.CmsPipelineCat(__arg0, __arg1);
            return __ret;
        }

        public static int CmsPipelineSetSaveAs8bitsFlag(global::icms2_clr.CmsPipelineStruct lut, int On)
        {
            var __arg0 = ReferenceEquals(lut, null) ? global::System.IntPtr.Zero : lut.__Instance;
            var __ret = __Internal.CmsPipelineSetSaveAs8bitsFlag(__arg0, On);
            return __ret;
        }

        public static int CmsPipelineInsertStage(global::icms2_clr.CmsPipelineStruct lut, global::icms2_clr.CmsStageLoc loc, global::icms2_clr.CmsStageStruct mpe)
        {
            var __arg0 = ReferenceEquals(lut, null) ? global::System.IntPtr.Zero : lut.__Instance;
            var __arg2 = ReferenceEquals(mpe, null) ? global::System.IntPtr.Zero : mpe.__Instance;
            var __ret = __Internal.CmsPipelineInsertStage(__arg0, loc, __arg2);
            return __ret;
        }

        public static void CmsPipelineUnlinkStage(global::icms2_clr.CmsPipelineStruct lut, global::icms2_clr.CmsStageLoc loc, global::icms2_clr.CmsStageStruct mpe)
        {
            var __arg0 = ReferenceEquals(lut, null) ? global::System.IntPtr.Zero : lut.__Instance;
            var ____arg2 = ReferenceEquals(mpe, null) ? global::System.IntPtr.Zero : mpe.__Instance;
            var __arg2 = new global::System.IntPtr(&____arg2);
            __Internal.CmsPipelineUnlinkStage(__arg0, loc, __arg2);
        }

        public static int CmsPipelineCheckAndRetreiveStages(global::icms2_clr.CmsPipelineStruct Lut, uint n)
        {
            var __arg0 = ReferenceEquals(Lut, null) ? global::System.IntPtr.Zero : Lut.__Instance;
            var __ret = __Internal.CmsPipelineCheckAndRetreiveStages(__arg0, n);
            return __ret;
        }

        public static global::icms2_clr.CmsStageStruct CmsStageAllocIdentity(global::icms2_clr.CmsContextStruct ContextID, uint nChannels)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsStageAllocIdentity(__arg0, nChannels);
            global::icms2_clr.CmsStageStruct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsStageStruct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsStageStruct) global::icms2_clr.CmsStageStruct.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsStageStruct.__CreateInstance(__ret);
            return __result0;
        }

        public static global::icms2_clr.CmsStageStruct CmsStageAllocToneCurves(global::icms2_clr.CmsContextStruct ContextID, uint nChannels, global::icms2_clr.CmsCurveStruct[] Curves)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            global::System.IntPtr[] __Curves;
            if (ReferenceEquals(Curves, null))
                __Curves = null;
            else
            {
                __Curves = new global::System.IntPtr[Curves.Length];
                for (int i = 0; i < __Curves.Length; i++)
                {
                    var __element = Curves[i];
                    __Curves[i] = ReferenceEquals(__element, null) ? global::System.IntPtr.Zero : __element.__Instance;
                }
            }
            var __arg2 = __Curves;
            var __ret = __Internal.CmsStageAllocToneCurves(__arg0, nChannels, __arg2);
            global::icms2_clr.CmsStageStruct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsStageStruct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsStageStruct) global::icms2_clr.CmsStageStruct.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsStageStruct.__CreateInstance(__ret);
            return __result0;
        }

        public static global::icms2_clr.CmsStageStruct CmsStageAllocMatrix(global::icms2_clr.CmsContextStruct ContextID, uint Rows, uint Cols, ref double Matrix, ref double Offset)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            fixed (double* __Matrix3 = &Matrix)
            {
                var __arg3 = __Matrix3;
                fixed (double* __Offset4 = &Offset)
                {
                    var __arg4 = __Offset4;
                    var __ret = __Internal.CmsStageAllocMatrix(__arg0, Rows, Cols, __arg3, __arg4);
                    global::icms2_clr.CmsStageStruct __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::icms2_clr.CmsStageStruct.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::icms2_clr.CmsStageStruct) global::icms2_clr.CmsStageStruct.NativeToManagedMap[__ret];
                    else __result0 = global::icms2_clr.CmsStageStruct.__CreateInstance(__ret);
                    return __result0;
                }
            }
        }

        public static global::icms2_clr.CmsStageStruct CmsStageAllocCLut16bit(global::icms2_clr.CmsContextStruct ContextID, uint nGridPoints, uint inputChan, uint outputChan, ref ushort Table)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            fixed (ushort* __Table4 = &Table)
            {
                var __arg4 = __Table4;
                var __ret = __Internal.CmsStageAllocCLut16bit(__arg0, nGridPoints, inputChan, outputChan, __arg4);
                global::icms2_clr.CmsStageStruct __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::icms2_clr.CmsStageStruct.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::icms2_clr.CmsStageStruct) global::icms2_clr.CmsStageStruct.NativeToManagedMap[__ret];
                else __result0 = global::icms2_clr.CmsStageStruct.__CreateInstance(__ret);
                return __result0;
            }
        }

        public static global::icms2_clr.CmsStageStruct CmsStageAllocCLutFloat(global::icms2_clr.CmsContextStruct ContextID, uint nGridPoints, uint inputChan, uint outputChan, ref float Table)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            fixed (float* __Table4 = &Table)
            {
                var __arg4 = __Table4;
                var __ret = __Internal.CmsStageAllocCLutFloat(__arg0, nGridPoints, inputChan, outputChan, __arg4);
                global::icms2_clr.CmsStageStruct __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::icms2_clr.CmsStageStruct.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::icms2_clr.CmsStageStruct) global::icms2_clr.CmsStageStruct.NativeToManagedMap[__ret];
                else __result0 = global::icms2_clr.CmsStageStruct.__CreateInstance(__ret);
                return __result0;
            }
        }

        public static global::icms2_clr.CmsStageStruct CmsStageAllocCLut16bitGranular(global::icms2_clr.CmsContextStruct ContextID, uint[] clutPoints, uint inputChan, uint outputChan, ref ushort Table)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            fixed (ushort* __Table4 = &Table)
            {
                var __arg4 = __Table4;
                var __ret = __Internal.CmsStageAllocCLut16bitGranular(__arg0, clutPoints, inputChan, outputChan, __arg4);
                global::icms2_clr.CmsStageStruct __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::icms2_clr.CmsStageStruct.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::icms2_clr.CmsStageStruct) global::icms2_clr.CmsStageStruct.NativeToManagedMap[__ret];
                else __result0 = global::icms2_clr.CmsStageStruct.__CreateInstance(__ret);
                return __result0;
            }
        }

        public static global::icms2_clr.CmsStageStruct CmsStageAllocCLutFloatGranular(global::icms2_clr.CmsContextStruct ContextID, uint[] clutPoints, uint inputChan, uint outputChan, ref float Table)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            fixed (float* __Table4 = &Table)
            {
                var __arg4 = __Table4;
                var __ret = __Internal.CmsStageAllocCLutFloatGranular(__arg0, clutPoints, inputChan, outputChan, __arg4);
                global::icms2_clr.CmsStageStruct __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::icms2_clr.CmsStageStruct.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::icms2_clr.CmsStageStruct) global::icms2_clr.CmsStageStruct.NativeToManagedMap[__ret];
                else __result0 = global::icms2_clr.CmsStageStruct.__CreateInstance(__ret);
                return __result0;
            }
        }

        public static global::icms2_clr.CmsStageStruct CmsStageDup(global::icms2_clr.CmsStageStruct mpe)
        {
            var __arg0 = ReferenceEquals(mpe, null) ? global::System.IntPtr.Zero : mpe.__Instance;
            var __ret = __Internal.CmsStageDup(__arg0);
            global::icms2_clr.CmsStageStruct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsStageStruct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsStageStruct) global::icms2_clr.CmsStageStruct.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsStageStruct.__CreateInstance(__ret);
            return __result0;
        }

        public static void CmsStageFree(global::icms2_clr.CmsStageStruct mpe)
        {
            var __arg0 = ReferenceEquals(mpe, null) ? global::System.IntPtr.Zero : mpe.__Instance;
            __Internal.CmsStageFree(__arg0);
        }

        public static global::icms2_clr.CmsStageStruct CmsStageNext(global::icms2_clr.CmsStageStruct mpe)
        {
            var __arg0 = ReferenceEquals(mpe, null) ? global::System.IntPtr.Zero : mpe.__Instance;
            var __ret = __Internal.CmsStageNext(__arg0);
            global::icms2_clr.CmsStageStruct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsStageStruct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsStageStruct) global::icms2_clr.CmsStageStruct.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsStageStruct.__CreateInstance(__ret);
            return __result0;
        }

        public static uint CmsStageInputChannels(global::icms2_clr.CmsStageStruct mpe)
        {
            var __arg0 = ReferenceEquals(mpe, null) ? global::System.IntPtr.Zero : mpe.__Instance;
            var __ret = __Internal.CmsStageInputChannels(__arg0);
            return __ret;
        }

        public static uint CmsStageOutputChannels(global::icms2_clr.CmsStageStruct mpe)
        {
            var __arg0 = ReferenceEquals(mpe, null) ? global::System.IntPtr.Zero : mpe.__Instance;
            var __ret = __Internal.CmsStageOutputChannels(__arg0);
            return __ret;
        }

        public static global::icms2_clr.CmsStageSignature CmsStageType(global::icms2_clr.CmsStageStruct mpe)
        {
            var __arg0 = ReferenceEquals(mpe, null) ? global::System.IntPtr.Zero : mpe.__Instance;
            var __ret = __Internal.CmsStageType(__arg0);
            return __ret;
        }

        public static global::System.IntPtr CmsStageData(global::icms2_clr.CmsStageStruct mpe)
        {
            var __arg0 = ReferenceEquals(mpe, null) ? global::System.IntPtr.Zero : mpe.__Instance;
            var __ret = __Internal.CmsStageData(__arg0);
            return __ret;
        }

        public static int CmsStageSampleCLut16bit(global::icms2_clr.CmsStageStruct mpe, global::icms2_clr.CmsSAMPLER16 Sampler, global::System.IntPtr Cargo, uint dwFlags)
        {
            var __arg0 = ReferenceEquals(mpe, null) ? global::System.IntPtr.Zero : mpe.__Instance;
            var __arg1 = Sampler == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(Sampler);
            var __ret = __Internal.CmsStageSampleCLut16bit(__arg0, __arg1, Cargo, dwFlags);
            return __ret;
        }

        public static int CmsStageSampleCLutFloat(global::icms2_clr.CmsStageStruct mpe, global::icms2_clr.CmsSAMPLERFLOAT Sampler, global::System.IntPtr Cargo, uint dwFlags)
        {
            var __arg0 = ReferenceEquals(mpe, null) ? global::System.IntPtr.Zero : mpe.__Instance;
            var __arg1 = Sampler == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(Sampler);
            var __ret = __Internal.CmsStageSampleCLutFloat(__arg0, __arg1, Cargo, dwFlags);
            return __ret;
        }

        public static int CmsSliceSpace16(uint nInputs, uint[] clutPoints, global::icms2_clr.CmsSAMPLER16 Sampler, global::System.IntPtr Cargo)
        {
            var __arg2 = Sampler == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(Sampler);
            var __ret = __Internal.CmsSliceSpace16(nInputs, clutPoints, __arg2, Cargo);
            return __ret;
        }

        public static int CmsSliceSpaceFloat(uint nInputs, uint[] clutPoints, global::icms2_clr.CmsSAMPLERFLOAT Sampler, global::System.IntPtr Cargo)
        {
            var __arg2 = Sampler == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(Sampler);
            var __ret = __Internal.CmsSliceSpaceFloat(nInputs, clutPoints, __arg2, Cargo);
            return __ret;
        }

        public static global::icms2_clr.CmsMLU_struct CmsMLUalloc(global::icms2_clr.CmsContextStruct ContextID, uint nItems)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsMLUalloc(__arg0, nItems);
            global::icms2_clr.CmsMLU_struct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsMLU_struct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsMLU_struct) global::icms2_clr.CmsMLU_struct.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsMLU_struct.__CreateInstance(__ret);
            return __result0;
        }

        public static void CmsMLUfree(global::icms2_clr.CmsMLU_struct mlu)
        {
            var __arg0 = ReferenceEquals(mlu, null) ? global::System.IntPtr.Zero : mlu.__Instance;
            __Internal.CmsMLUfree(__arg0);
        }

        public static global::icms2_clr.CmsMLU_struct CmsMLUdup(global::icms2_clr.CmsMLU_struct mlu)
        {
            var __arg0 = ReferenceEquals(mlu, null) ? global::System.IntPtr.Zero : mlu.__Instance;
            var __ret = __Internal.CmsMLUdup(__arg0);
            global::icms2_clr.CmsMLU_struct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsMLU_struct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsMLU_struct) global::icms2_clr.CmsMLU_struct.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsMLU_struct.__CreateInstance(__ret);
            return __result0;
        }

        public static int CmsMLUsetASCII(global::icms2_clr.CmsMLU_struct mlu, sbyte[] LanguageCode, sbyte[] CountryCode, string ASCIIString)
        {
            var __arg0 = ReferenceEquals(mlu, null) ? global::System.IntPtr.Zero : mlu.__Instance;
            if (LanguageCode == null || LanguageCode.Length != 3)
                throw new ArgumentOutOfRangeException("LanguageCode", "The dimensions of the provided array don't match the required size.");
            if (CountryCode == null || CountryCode.Length != 3)
                throw new ArgumentOutOfRangeException("CountryCode", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.CmsMLUsetASCII(__arg0, LanguageCode, CountryCode, ASCIIString);
            return __ret;
        }

        public static int CmsMLUsetWide(global::icms2_clr.CmsMLU_struct mlu, sbyte[] LanguageCode, sbyte[] CountryCode, string WideString)
        {
            var __arg0 = ReferenceEquals(mlu, null) ? global::System.IntPtr.Zero : mlu.__Instance;
            if (LanguageCode == null || LanguageCode.Length != 3)
                throw new ArgumentOutOfRangeException("LanguageCode", "The dimensions of the provided array don't match the required size.");
            if (CountryCode == null || CountryCode.Length != 3)
                throw new ArgumentOutOfRangeException("CountryCode", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.CmsMLUsetWide(__arg0, LanguageCode, CountryCode, WideString);
            return __ret;
        }

        public static uint CmsMLUgetASCII(global::icms2_clr.CmsMLU_struct mlu, sbyte[] LanguageCode, sbyte[] CountryCode, sbyte* Buffer, uint BufferSize)
        {
            var __arg0 = ReferenceEquals(mlu, null) ? global::System.IntPtr.Zero : mlu.__Instance;
            if (LanguageCode == null || LanguageCode.Length != 3)
                throw new ArgumentOutOfRangeException("LanguageCode", "The dimensions of the provided array don't match the required size.");
            if (CountryCode == null || CountryCode.Length != 3)
                throw new ArgumentOutOfRangeException("CountryCode", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.CmsMLUgetASCII(__arg0, LanguageCode, CountryCode, Buffer, BufferSize);
            return __ret;
        }

        public static uint CmsMLUgetWide(global::icms2_clr.CmsMLU_struct mlu, sbyte[] LanguageCode, sbyte[] CountryCode, char* Buffer, uint BufferSize)
        {
            var __arg0 = ReferenceEquals(mlu, null) ? global::System.IntPtr.Zero : mlu.__Instance;
            if (LanguageCode == null || LanguageCode.Length != 3)
                throw new ArgumentOutOfRangeException("LanguageCode", "The dimensions of the provided array don't match the required size.");
            if (CountryCode == null || CountryCode.Length != 3)
                throw new ArgumentOutOfRangeException("CountryCode", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.CmsMLUgetWide(__arg0, LanguageCode, CountryCode, Buffer, BufferSize);
            return __ret;
        }

        public static int CmsMLUgetTranslation(global::icms2_clr.CmsMLU_struct mlu, sbyte[] LanguageCode, sbyte[] CountryCode, sbyte[] ObtainedLanguage, sbyte[] ObtainedCountry)
        {
            var __arg0 = ReferenceEquals(mlu, null) ? global::System.IntPtr.Zero : mlu.__Instance;
            if (LanguageCode == null || LanguageCode.Length != 3)
                throw new ArgumentOutOfRangeException("LanguageCode", "The dimensions of the provided array don't match the required size.");
            if (CountryCode == null || CountryCode.Length != 3)
                throw new ArgumentOutOfRangeException("CountryCode", "The dimensions of the provided array don't match the required size.");
            if (ObtainedLanguage == null || ObtainedLanguage.Length != 3)
                throw new ArgumentOutOfRangeException("ObtainedLanguage", "The dimensions of the provided array don't match the required size.");
            if (ObtainedCountry == null || ObtainedCountry.Length != 3)
                throw new ArgumentOutOfRangeException("ObtainedCountry", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.CmsMLUgetTranslation(__arg0, LanguageCode, CountryCode, ObtainedLanguage, ObtainedCountry);
            return __ret;
        }

        public static uint CmsMLUtranslationsCount(global::icms2_clr.CmsMLU_struct mlu)
        {
            var __arg0 = ReferenceEquals(mlu, null) ? global::System.IntPtr.Zero : mlu.__Instance;
            var __ret = __Internal.CmsMLUtranslationsCount(__arg0);
            return __ret;
        }

        public static int CmsMLUtranslationsCodes(global::icms2_clr.CmsMLU_struct mlu, uint idx, sbyte[] LanguageCode, sbyte[] CountryCode)
        {
            var __arg0 = ReferenceEquals(mlu, null) ? global::System.IntPtr.Zero : mlu.__Instance;
            if (LanguageCode == null || LanguageCode.Length != 3)
                throw new ArgumentOutOfRangeException("LanguageCode", "The dimensions of the provided array don't match the required size.");
            if (CountryCode == null || CountryCode.Length != 3)
                throw new ArgumentOutOfRangeException("CountryCode", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.CmsMLUtranslationsCodes(__arg0, idx, LanguageCode, CountryCode);
            return __ret;
        }

        public static global::icms2_clr.CmsNAMEDCOLORLIST_struct CmsAllocNamedColorList(global::icms2_clr.CmsContextStruct ContextID, uint n, uint ColorantCount, string Prefix, string Suffix)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsAllocNamedColorList(__arg0, n, ColorantCount, Prefix, Suffix);
            global::icms2_clr.CmsNAMEDCOLORLIST_struct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsNAMEDCOLORLIST_struct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsNAMEDCOLORLIST_struct) global::icms2_clr.CmsNAMEDCOLORLIST_struct.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsNAMEDCOLORLIST_struct.__CreateInstance(__ret);
            return __result0;
        }

        public static void CmsFreeNamedColorList(global::icms2_clr.CmsNAMEDCOLORLIST_struct v)
        {
            var __arg0 = ReferenceEquals(v, null) ? global::System.IntPtr.Zero : v.__Instance;
            __Internal.CmsFreeNamedColorList(__arg0);
        }

        public static global::icms2_clr.CmsNAMEDCOLORLIST_struct CmsDupNamedColorList(global::icms2_clr.CmsNAMEDCOLORLIST_struct v)
        {
            var __arg0 = ReferenceEquals(v, null) ? global::System.IntPtr.Zero : v.__Instance;
            var __ret = __Internal.CmsDupNamedColorList(__arg0);
            global::icms2_clr.CmsNAMEDCOLORLIST_struct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsNAMEDCOLORLIST_struct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsNAMEDCOLORLIST_struct) global::icms2_clr.CmsNAMEDCOLORLIST_struct.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsNAMEDCOLORLIST_struct.__CreateInstance(__ret);
            return __result0;
        }

        public static int CmsAppendNamedColor(global::icms2_clr.CmsNAMEDCOLORLIST_struct v, string Name, ushort[] PCS, ushort[] Colorant)
        {
            var __arg0 = ReferenceEquals(v, null) ? global::System.IntPtr.Zero : v.__Instance;
            if (PCS == null || PCS.Length != 3)
                throw new ArgumentOutOfRangeException("PCS", "The dimensions of the provided array don't match the required size.");
            if (Colorant == null || Colorant.Length != 16)
                throw new ArgumentOutOfRangeException("Colorant", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.CmsAppendNamedColor(__arg0, Name, PCS, Colorant);
            return __ret;
        }

        public static uint CmsNamedColorCount(global::icms2_clr.CmsNAMEDCOLORLIST_struct v)
        {
            var __arg0 = ReferenceEquals(v, null) ? global::System.IntPtr.Zero : v.__Instance;
            var __ret = __Internal.CmsNamedColorCount(__arg0);
            return __ret;
        }

        public static int CmsNamedColorIndex(global::icms2_clr.CmsNAMEDCOLORLIST_struct v, string Name)
        {
            var __arg0 = ReferenceEquals(v, null) ? global::System.IntPtr.Zero : v.__Instance;
            var __ret = __Internal.CmsNamedColorIndex(__arg0, Name);
            return __ret;
        }

        public static int CmsNamedColorInfo(global::icms2_clr.CmsNAMEDCOLORLIST_struct NamedColorList, uint nColor, sbyte* Name, sbyte* Prefix, sbyte* Suffix, ref ushort PCS, ref ushort Colorant)
        {
            var __arg0 = ReferenceEquals(NamedColorList, null) ? global::System.IntPtr.Zero : NamedColorList.__Instance;
            fixed (ushort* __PCS5 = &PCS)
            {
                var __arg5 = __PCS5;
                fixed (ushort* __Colorant6 = &Colorant)
                {
                    var __arg6 = __Colorant6;
                    var __ret = __Internal.CmsNamedColorInfo(__arg0, nColor, Name, Prefix, Suffix, __arg5, __arg6);
                    return __ret;
                }
            }
        }

        public static global::icms2_clr.CmsNAMEDCOLORLIST_struct CmsGetNamedColorList(global::System.IntPtr xform)
        {
            var __ret = __Internal.CmsGetNamedColorList(xform);
            global::icms2_clr.CmsNAMEDCOLORLIST_struct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsNAMEDCOLORLIST_struct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsNAMEDCOLORLIST_struct) global::icms2_clr.CmsNAMEDCOLORLIST_struct.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsNAMEDCOLORLIST_struct.__CreateInstance(__ret);
            return __result0;
        }

        public static global::icms2_clr.CmsSEQ CmsAllocProfileSequenceDescription(global::icms2_clr.CmsContextStruct ContextID, uint n)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsAllocProfileSequenceDescription(__arg0, n);
            global::icms2_clr.CmsSEQ __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsSEQ.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsSEQ) global::icms2_clr.CmsSEQ.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsSEQ.__CreateInstance(__ret);
            return __result0;
        }

        public static global::icms2_clr.CmsSEQ CmsDupProfileSequenceDescription(global::icms2_clr.CmsSEQ pseq)
        {
            var __arg0 = ReferenceEquals(pseq, null) ? global::System.IntPtr.Zero : pseq.__Instance;
            var __ret = __Internal.CmsDupProfileSequenceDescription(__arg0);
            global::icms2_clr.CmsSEQ __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsSEQ.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsSEQ) global::icms2_clr.CmsSEQ.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsSEQ.__CreateInstance(__ret);
            return __result0;
        }

        public static void CmsFreeProfileSequenceDescription(global::icms2_clr.CmsSEQ pseq)
        {
            var __arg0 = ReferenceEquals(pseq, null) ? global::System.IntPtr.Zero : pseq.__Instance;
            __Internal.CmsFreeProfileSequenceDescription(__arg0);
        }

        public static global::System.IntPtr CmsDictAlloc(global::icms2_clr.CmsContextStruct ContextID)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsDictAlloc(__arg0);
            return __ret;
        }

        public static void CmsDictFree(global::System.IntPtr hDict)
        {
            __Internal.CmsDictFree(hDict);
        }

        public static global::System.IntPtr CmsDictDup(global::System.IntPtr hDict)
        {
            var __ret = __Internal.CmsDictDup(hDict);
            return __ret;
        }

        public static int CmsDictAddEntry(global::System.IntPtr hDict, string Name, string Value, global::icms2_clr.CmsMLU_struct DisplayName, global::icms2_clr.CmsMLU_struct DisplayValue)
        {
            var __arg3 = ReferenceEquals(DisplayName, null) ? global::System.IntPtr.Zero : DisplayName.__Instance;
            var __arg4 = ReferenceEquals(DisplayValue, null) ? global::System.IntPtr.Zero : DisplayValue.__Instance;
            var __ret = __Internal.CmsDictAddEntry(hDict, Name, Value, __arg3, __arg4);
            return __ret;
        }

        public static global::icms2_clr.CmsDICTentryStruct CmsDictGetEntryList(global::System.IntPtr hDict)
        {
            var __ret = __Internal.CmsDictGetEntryList(hDict);
            global::icms2_clr.CmsDICTentryStruct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsDICTentryStruct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsDICTentryStruct) global::icms2_clr.CmsDICTentryStruct.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsDICTentryStruct.__CreateInstance(__ret);
            return __result0;
        }

        public static global::icms2_clr.CmsDICTentryStruct CmsDictNextEntry(global::icms2_clr.CmsDICTentryStruct e)
        {
            var __arg0 = ReferenceEquals(e, null) ? global::System.IntPtr.Zero : e.__Instance;
            var __ret = __Internal.CmsDictNextEntry(__arg0);
            global::icms2_clr.CmsDICTentryStruct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsDICTentryStruct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsDICTentryStruct) global::icms2_clr.CmsDICTentryStruct.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsDICTentryStruct.__CreateInstance(__ret);
            return __result0;
        }

        public static global::System.IntPtr CmsCreateProfilePlaceholder(global::icms2_clr.CmsContextStruct ContextID)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsCreateProfilePlaceholder(__arg0);
            return __ret;
        }

        public static global::icms2_clr.CmsContextStruct CmsGetProfileContextID(global::System.IntPtr hProfile)
        {
            var __ret = __Internal.CmsGetProfileContextID(hProfile);
            global::icms2_clr.CmsContextStruct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsContextStruct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsContextStruct) global::icms2_clr.CmsContextStruct.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsContextStruct.__CreateInstance(__ret);
            return __result0;
        }

        public static int CmsGetTagCount(global::System.IntPtr hProfile)
        {
            var __ret = __Internal.CmsGetTagCount(hProfile);
            return __ret;
        }

        public static global::icms2_clr.CmsTagSignature CmsGetTagSignature(global::System.IntPtr hProfile, uint n)
        {
            var __ret = __Internal.CmsGetTagSignature(hProfile, n);
            return __ret;
        }

        public static int CmsIsTag(global::System.IntPtr hProfile, global::icms2_clr.CmsTagSignature sig)
        {
            var __ret = __Internal.CmsIsTag(hProfile, sig);
            return __ret;
        }

        public static global::System.IntPtr CmsReadTag(global::System.IntPtr hProfile, global::icms2_clr.CmsTagSignature sig)
        {
            var __ret = __Internal.CmsReadTag(hProfile, sig);
            return __ret;
        }

        public static int CmsWriteTag(global::System.IntPtr hProfile, global::icms2_clr.CmsTagSignature sig, global::System.IntPtr data)
        {
            var __ret = __Internal.CmsWriteTag(hProfile, sig, data);
            return __ret;
        }

        public static int CmsLinkTag(global::System.IntPtr hProfile, global::icms2_clr.CmsTagSignature sig, global::icms2_clr.CmsTagSignature dest)
        {
            var __ret = __Internal.CmsLinkTag(hProfile, sig, dest);
            return __ret;
        }

        public static global::icms2_clr.CmsTagSignature CmsTagLinkedTo(global::System.IntPtr hProfile, global::icms2_clr.CmsTagSignature sig)
        {
            var __ret = __Internal.CmsTagLinkedTo(hProfile, sig);
            return __ret;
        }

        public static uint CmsReadRawTag(global::System.IntPtr hProfile, global::icms2_clr.CmsTagSignature sig, global::System.IntPtr Buffer, uint BufferSize)
        {
            var __ret = __Internal.CmsReadRawTag(hProfile, sig, Buffer, BufferSize);
            return __ret;
        }

        public static int CmsWriteRawTag(global::System.IntPtr hProfile, global::icms2_clr.CmsTagSignature sig, global::System.IntPtr data, uint Size)
        {
            var __ret = __Internal.CmsWriteRawTag(hProfile, sig, data, Size);
            return __ret;
        }

        public static uint CmsGetHeaderFlags(global::System.IntPtr hProfile)
        {
            var __ret = __Internal.CmsGetHeaderFlags(hProfile);
            return __ret;
        }

        public static void CmsGetHeaderAttributes(global::System.IntPtr hProfile, ref ulong Flags)
        {
            fixed (ulong* __Flags1 = &Flags)
            {
                var __arg1 = __Flags1;
                __Internal.CmsGetHeaderAttributes(hProfile, __arg1);
            }
        }

        public static void CmsGetHeaderProfileID(global::System.IntPtr hProfile, byte* ProfileID)
        {
            __Internal.CmsGetHeaderProfileID(hProfile, ProfileID);
        }

        public static uint CmsGetHeaderRenderingIntent(global::System.IntPtr hProfile)
        {
            var __ret = __Internal.CmsGetHeaderRenderingIntent(hProfile);
            return __ret;
        }

        public static void CmsSetHeaderFlags(global::System.IntPtr hProfile, uint Flags)
        {
            __Internal.CmsSetHeaderFlags(hProfile, Flags);
        }

        public static uint CmsGetHeaderManufacturer(global::System.IntPtr hProfile)
        {
            var __ret = __Internal.CmsGetHeaderManufacturer(hProfile);
            return __ret;
        }

        public static void CmsSetHeaderManufacturer(global::System.IntPtr hProfile, uint manufacturer)
        {
            __Internal.CmsSetHeaderManufacturer(hProfile, manufacturer);
        }

        public static uint CmsGetHeaderCreator(global::System.IntPtr hProfile)
        {
            var __ret = __Internal.CmsGetHeaderCreator(hProfile);
            return __ret;
        }

        public static uint CmsGetHeaderModel(global::System.IntPtr hProfile)
        {
            var __ret = __Internal.CmsGetHeaderModel(hProfile);
            return __ret;
        }

        public static void CmsSetHeaderModel(global::System.IntPtr hProfile, uint model)
        {
            __Internal.CmsSetHeaderModel(hProfile, model);
        }

        public static void CmsSetHeaderAttributes(global::System.IntPtr hProfile, ulong Flags)
        {
            __Internal.CmsSetHeaderAttributes(hProfile, Flags);
        }

        public static void CmsSetHeaderProfileID(global::System.IntPtr hProfile, byte* ProfileID)
        {
            __Internal.CmsSetHeaderProfileID(hProfile, ProfileID);
        }

        public static void CmsSetHeaderRenderingIntent(global::System.IntPtr hProfile, uint RenderingIntent)
        {
            __Internal.CmsSetHeaderRenderingIntent(hProfile, RenderingIntent);
        }

        public static global::icms2_clr.CmsColorSpaceSignature CmsGetPCS(global::System.IntPtr hProfile)
        {
            var __ret = __Internal.CmsGetPCS(hProfile);
            return __ret;
        }

        public static void CmsSetPCS(global::System.IntPtr hProfile, global::icms2_clr.CmsColorSpaceSignature pcs)
        {
            __Internal.CmsSetPCS(hProfile, pcs);
        }

        public static global::icms2_clr.CmsColorSpaceSignature CmsGetColorSpace(global::System.IntPtr hProfile)
        {
            var __ret = __Internal.CmsGetColorSpace(hProfile);
            return __ret;
        }

        public static void CmsSetColorSpace(global::System.IntPtr hProfile, global::icms2_clr.CmsColorSpaceSignature sig)
        {
            __Internal.CmsSetColorSpace(hProfile, sig);
        }

        public static global::icms2_clr.CmsProfileClassSignature CmsGetDeviceClass(global::System.IntPtr hProfile)
        {
            var __ret = __Internal.CmsGetDeviceClass(hProfile);
            return __ret;
        }

        public static void CmsSetDeviceClass(global::System.IntPtr hProfile, global::icms2_clr.CmsProfileClassSignature sig)
        {
            __Internal.CmsSetDeviceClass(hProfile, sig);
        }

        public static void CmsSetProfileVersion(global::System.IntPtr hProfile, double Version)
        {
            __Internal.CmsSetProfileVersion(hProfile, Version);
        }

        public static double CmsGetProfileVersion(global::System.IntPtr hProfile)
        {
            var __ret = __Internal.CmsGetProfileVersion(hProfile);
            return __ret;
        }

        public static uint CmsGetEncodedICCversion(global::System.IntPtr hProfile)
        {
            var __ret = __Internal.CmsGetEncodedICCversion(hProfile);
            return __ret;
        }

        public static void CmsSetEncodedICCversion(global::System.IntPtr hProfile, uint Version)
        {
            __Internal.CmsSetEncodedICCversion(hProfile, Version);
        }

        public static int CmsIsIntentSupported(global::System.IntPtr hProfile, uint Intent, uint UsedDirection)
        {
            var __ret = __Internal.CmsIsIntentSupported(hProfile, Intent, UsedDirection);
            return __ret;
        }

        public static int CmsIsMatrixShaper(global::System.IntPtr hProfile)
        {
            var __ret = __Internal.CmsIsMatrixShaper(hProfile);
            return __ret;
        }

        public static int CmsIsCLUT(global::System.IntPtr hProfile, uint Intent, uint UsedDirection)
        {
            var __ret = __Internal.CmsIsCLUT(hProfile, Intent, UsedDirection);
            return __ret;
        }

        public static global::icms2_clr.CmsColorSpaceSignature CmsICCcolorSpace(int OurNotation)
        {
            var __ret = __Internal.CmsICCcolorSpace(OurNotation);
            return __ret;
        }

        public static int CmsLCMScolorSpace(global::icms2_clr.CmsColorSpaceSignature ProfileSpace)
        {
            var __ret = __Internal.CmsLCMScolorSpace(ProfileSpace);
            return __ret;
        }

        public static uint CmsChannelsOf(global::icms2_clr.CmsColorSpaceSignature ColorSpace)
        {
            var __ret = __Internal.CmsChannelsOf(ColorSpace);
            return __ret;
        }

        public static uint CmsFormatterForColorspaceOfProfile(global::System.IntPtr hProfile, uint nBytes, int lIsFloat)
        {
            var __ret = __Internal.CmsFormatterForColorspaceOfProfile(hProfile, nBytes, lIsFloat);
            return __ret;
        }

        public static uint CmsFormatterForPCSOfProfile(global::System.IntPtr hProfile, uint nBytes, int lIsFloat)
        {
            var __ret = __Internal.CmsFormatterForPCSOfProfile(hProfile, nBytes, lIsFloat);
            return __ret;
        }

        public static uint CmsGetProfileInfo(global::System.IntPtr hProfile, global::icms2_clr.CmsInfoType Info, sbyte[] LanguageCode, sbyte[] CountryCode, char* Buffer, uint BufferSize)
        {
            if (LanguageCode == null || LanguageCode.Length != 3)
                throw new ArgumentOutOfRangeException("LanguageCode", "The dimensions of the provided array don't match the required size.");
            if (CountryCode == null || CountryCode.Length != 3)
                throw new ArgumentOutOfRangeException("CountryCode", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.CmsGetProfileInfo(hProfile, Info, LanguageCode, CountryCode, Buffer, BufferSize);
            return __ret;
        }

        public static uint CmsGetProfileInfoASCII(global::System.IntPtr hProfile, global::icms2_clr.CmsInfoType Info, sbyte[] LanguageCode, sbyte[] CountryCode, sbyte* Buffer, uint BufferSize)
        {
            if (LanguageCode == null || LanguageCode.Length != 3)
                throw new ArgumentOutOfRangeException("LanguageCode", "The dimensions of the provided array don't match the required size.");
            if (CountryCode == null || CountryCode.Length != 3)
                throw new ArgumentOutOfRangeException("CountryCode", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.CmsGetProfileInfoASCII(hProfile, Info, LanguageCode, CountryCode, Buffer, BufferSize);
            return __ret;
        }

        public static global::icms2_clr.CmsIoHandler CmsOpenIOhandlerFromFile(global::icms2_clr.CmsContextStruct ContextID, string FileName, string AccessMode)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsOpenIOhandlerFromFile(__arg0, FileName, AccessMode);
            global::icms2_clr.CmsIoHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsIoHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsIoHandler) global::icms2_clr.CmsIoHandler.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsIoHandler.__CreateInstance(__ret);
            return __result0;
        }

        public static global::icms2_clr.CmsIoHandler CmsOpenIOhandlerFromMem(global::icms2_clr.CmsContextStruct ContextID, global::System.IntPtr Buffer, uint size, string AccessMode)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsOpenIOhandlerFromMem(__arg0, Buffer, size, AccessMode);
            global::icms2_clr.CmsIoHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsIoHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsIoHandler) global::icms2_clr.CmsIoHandler.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsIoHandler.__CreateInstance(__ret);
            return __result0;
        }

        public static global::icms2_clr.CmsIoHandler CmsOpenIOhandlerFromNULL(global::icms2_clr.CmsContextStruct ContextID)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsOpenIOhandlerFromNULL(__arg0);
            global::icms2_clr.CmsIoHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsIoHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsIoHandler) global::icms2_clr.CmsIoHandler.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsIoHandler.__CreateInstance(__ret);
            return __result0;
        }

        public static global::icms2_clr.CmsIoHandler CmsGetProfileIOhandler(global::System.IntPtr hProfile)
        {
            var __ret = __Internal.CmsGetProfileIOhandler(hProfile);
            global::icms2_clr.CmsIoHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsIoHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsIoHandler) global::icms2_clr.CmsIoHandler.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsIoHandler.__CreateInstance(__ret);
            return __result0;
        }

        public static int CmsCloseIOhandler(global::icms2_clr.CmsIoHandler io)
        {
            var __arg0 = ReferenceEquals(io, null) ? global::System.IntPtr.Zero : io.__Instance;
            var __ret = __Internal.CmsCloseIOhandler(__arg0);
            return __ret;
        }

        public static int CmsMD5computeID(global::System.IntPtr hProfile)
        {
            var __ret = __Internal.CmsMD5computeID(hProfile);
            return __ret;
        }

        public static global::System.IntPtr CmsOpenProfileFromFile(string ICCProfile, string sAccess)
        {
            var __ret = __Internal.CmsOpenProfileFromFile(ICCProfile, sAccess);
            return __ret;
        }

        public static global::System.IntPtr CmsOpenProfileFromFileTHR(global::icms2_clr.CmsContextStruct ContextID, string ICCProfile, string sAccess)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsOpenProfileFromFileTHR(__arg0, ICCProfile, sAccess);
            return __ret;
        }

        public static global::System.IntPtr CmsOpenProfileFromMem(global::System.IntPtr MemPtr, uint dwSize)
        {
            var __ret = __Internal.CmsOpenProfileFromMem(MemPtr, dwSize);
            return __ret;
        }

        public static global::System.IntPtr CmsOpenProfileFromMemTHR(global::icms2_clr.CmsContextStruct ContextID, global::System.IntPtr MemPtr, uint dwSize)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsOpenProfileFromMemTHR(__arg0, MemPtr, dwSize);
            return __ret;
        }

        public static global::System.IntPtr CmsOpenProfileFromIOhandlerTHR(global::icms2_clr.CmsContextStruct ContextID, global::icms2_clr.CmsIoHandler io)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __arg1 = ReferenceEquals(io, null) ? global::System.IntPtr.Zero : io.__Instance;
            var __ret = __Internal.CmsOpenProfileFromIOhandlerTHR(__arg0, __arg1);
            return __ret;
        }

        public static global::System.IntPtr CmsOpenProfileFromIOhandler2THR(global::icms2_clr.CmsContextStruct ContextID, global::icms2_clr.CmsIoHandler io, int write)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __arg1 = ReferenceEquals(io, null) ? global::System.IntPtr.Zero : io.__Instance;
            var __ret = __Internal.CmsOpenProfileFromIOhandler2THR(__arg0, __arg1, write);
            return __ret;
        }

        public static int CmsCloseProfile(global::System.IntPtr hProfile)
        {
            var __ret = __Internal.CmsCloseProfile(hProfile);
            return __ret;
        }

        public static int CmsSaveProfileToFile(global::System.IntPtr hProfile, string FileName)
        {
            var __ret = __Internal.CmsSaveProfileToFile(hProfile, FileName);
            return __ret;
        }

        public static int CmsSaveProfileToMem(global::System.IntPtr hProfile, global::System.IntPtr MemPtr, ref uint BytesNeeded)
        {
            fixed (uint* __BytesNeeded2 = &BytesNeeded)
            {
                var __arg2 = __BytesNeeded2;
                var __ret = __Internal.CmsSaveProfileToMem(hProfile, MemPtr, __arg2);
                return __ret;
            }
        }

        public static uint CmsSaveProfileToIOhandler(global::System.IntPtr hProfile, global::icms2_clr.CmsIoHandler io)
        {
            var __arg1 = ReferenceEquals(io, null) ? global::System.IntPtr.Zero : io.__Instance;
            var __ret = __Internal.CmsSaveProfileToIOhandler(hProfile, __arg1);
            return __ret;
        }

        public static global::System.IntPtr CmsCreateRGBProfileTHR(global::icms2_clr.CmsContextStruct ContextID, global::icms2_clr.CmsCIExyY WhitePoint, global::icms2_clr.CmsCIExyYTRIPLE Primaries, global::icms2_clr.CmsCurveStruct[] TransferFunction)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __arg1 = ReferenceEquals(WhitePoint, null) ? global::System.IntPtr.Zero : WhitePoint.__Instance;
            var __arg2 = ReferenceEquals(Primaries, null) ? global::System.IntPtr.Zero : Primaries.__Instance;
            if (TransferFunction == null || TransferFunction.Length != 3)
                throw new ArgumentOutOfRangeException("TransferFunction", "The dimensions of the provided array don't match the required size.");
            global::System.IntPtr[] __TransferFunction;
            if (ReferenceEquals(TransferFunction, null))
                __TransferFunction = null;
            else
            {
                __TransferFunction = new global::System.IntPtr[TransferFunction.Length];
                for (int i = 0; i < __TransferFunction.Length; i++)
                {
                    var __element = TransferFunction[i];
                    __TransferFunction[i] = ReferenceEquals(__element, null) ? global::System.IntPtr.Zero : __element.__Instance;
                }
            }
            var __arg3 = __TransferFunction;
            var __ret = __Internal.CmsCreateRGBProfileTHR(__arg0, __arg1, __arg2, __arg3);
            return __ret;
        }

        public static global::System.IntPtr CmsCreateRGBProfile(global::icms2_clr.CmsCIExyY WhitePoint, global::icms2_clr.CmsCIExyYTRIPLE Primaries, global::icms2_clr.CmsCurveStruct[] TransferFunction)
        {
            var __arg0 = ReferenceEquals(WhitePoint, null) ? global::System.IntPtr.Zero : WhitePoint.__Instance;
            var __arg1 = ReferenceEquals(Primaries, null) ? global::System.IntPtr.Zero : Primaries.__Instance;
            if (TransferFunction == null || TransferFunction.Length != 3)
                throw new ArgumentOutOfRangeException("TransferFunction", "The dimensions of the provided array don't match the required size.");
            global::System.IntPtr[] __TransferFunction;
            if (ReferenceEquals(TransferFunction, null))
                __TransferFunction = null;
            else
            {
                __TransferFunction = new global::System.IntPtr[TransferFunction.Length];
                for (int i = 0; i < __TransferFunction.Length; i++)
                {
                    var __element = TransferFunction[i];
                    __TransferFunction[i] = ReferenceEquals(__element, null) ? global::System.IntPtr.Zero : __element.__Instance;
                }
            }
            var __arg2 = __TransferFunction;
            var __ret = __Internal.CmsCreateRGBProfile(__arg0, __arg1, __arg2);
            return __ret;
        }

        public static global::System.IntPtr CmsCreateGrayProfileTHR(global::icms2_clr.CmsContextStruct ContextID, global::icms2_clr.CmsCIExyY WhitePoint, global::icms2_clr.CmsCurveStruct TransferFunction)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __arg1 = ReferenceEquals(WhitePoint, null) ? global::System.IntPtr.Zero : WhitePoint.__Instance;
            var __arg2 = ReferenceEquals(TransferFunction, null) ? global::System.IntPtr.Zero : TransferFunction.__Instance;
            var __ret = __Internal.CmsCreateGrayProfileTHR(__arg0, __arg1, __arg2);
            return __ret;
        }

        public static global::System.IntPtr CmsCreateGrayProfile(global::icms2_clr.CmsCIExyY WhitePoint, global::icms2_clr.CmsCurveStruct TransferFunction)
        {
            var __arg0 = ReferenceEquals(WhitePoint, null) ? global::System.IntPtr.Zero : WhitePoint.__Instance;
            var __arg1 = ReferenceEquals(TransferFunction, null) ? global::System.IntPtr.Zero : TransferFunction.__Instance;
            var __ret = __Internal.CmsCreateGrayProfile(__arg0, __arg1);
            return __ret;
        }

        public static global::System.IntPtr CmsCreateLinearizationDeviceLinkTHR(global::icms2_clr.CmsContextStruct ContextID, global::icms2_clr.CmsColorSpaceSignature ColorSpace, global::icms2_clr.CmsCurveStruct[] TransferFunctions)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            global::System.IntPtr[] __TransferFunctions;
            if (ReferenceEquals(TransferFunctions, null))
                __TransferFunctions = null;
            else
            {
                __TransferFunctions = new global::System.IntPtr[TransferFunctions.Length];
                for (int i = 0; i < __TransferFunctions.Length; i++)
                {
                    var __element = TransferFunctions[i];
                    __TransferFunctions[i] = ReferenceEquals(__element, null) ? global::System.IntPtr.Zero : __element.__Instance;
                }
            }
            var __arg2 = __TransferFunctions;
            var __ret = __Internal.CmsCreateLinearizationDeviceLinkTHR(__arg0, ColorSpace, __arg2);
            return __ret;
        }

        public static global::System.IntPtr CmsCreateLinearizationDeviceLink(global::icms2_clr.CmsColorSpaceSignature ColorSpace, global::icms2_clr.CmsCurveStruct[] TransferFunctions)
        {
            global::System.IntPtr[] __TransferFunctions;
            if (ReferenceEquals(TransferFunctions, null))
                __TransferFunctions = null;
            else
            {
                __TransferFunctions = new global::System.IntPtr[TransferFunctions.Length];
                for (int i = 0; i < __TransferFunctions.Length; i++)
                {
                    var __element = TransferFunctions[i];
                    __TransferFunctions[i] = ReferenceEquals(__element, null) ? global::System.IntPtr.Zero : __element.__Instance;
                }
            }
            var __arg1 = __TransferFunctions;
            var __ret = __Internal.CmsCreateLinearizationDeviceLink(ColorSpace, __arg1);
            return __ret;
        }

        public static global::System.IntPtr CmsCreateInkLimitingDeviceLinkTHR(global::icms2_clr.CmsContextStruct ContextID, global::icms2_clr.CmsColorSpaceSignature ColorSpace, double Limit)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsCreateInkLimitingDeviceLinkTHR(__arg0, ColorSpace, Limit);
            return __ret;
        }

        public static global::System.IntPtr CmsCreateInkLimitingDeviceLink(global::icms2_clr.CmsColorSpaceSignature ColorSpace, double Limit)
        {
            var __ret = __Internal.CmsCreateInkLimitingDeviceLink(ColorSpace, Limit);
            return __ret;
        }

        public static global::System.IntPtr CmsCreateLab2ProfileTHR(global::icms2_clr.CmsContextStruct ContextID, global::icms2_clr.CmsCIExyY WhitePoint)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __arg1 = ReferenceEquals(WhitePoint, null) ? global::System.IntPtr.Zero : WhitePoint.__Instance;
            var __ret = __Internal.CmsCreateLab2ProfileTHR(__arg0, __arg1);
            return __ret;
        }

        public static global::System.IntPtr CmsCreateLab2Profile(global::icms2_clr.CmsCIExyY WhitePoint)
        {
            var __arg0 = ReferenceEquals(WhitePoint, null) ? global::System.IntPtr.Zero : WhitePoint.__Instance;
            var __ret = __Internal.CmsCreateLab2Profile(__arg0);
            return __ret;
        }

        public static global::System.IntPtr CmsCreateLab4ProfileTHR(global::icms2_clr.CmsContextStruct ContextID, global::icms2_clr.CmsCIExyY WhitePoint)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __arg1 = ReferenceEquals(WhitePoint, null) ? global::System.IntPtr.Zero : WhitePoint.__Instance;
            var __ret = __Internal.CmsCreateLab4ProfileTHR(__arg0, __arg1);
            return __ret;
        }

        public static global::System.IntPtr CmsCreateLab4Profile(global::icms2_clr.CmsCIExyY WhitePoint)
        {
            var __arg0 = ReferenceEquals(WhitePoint, null) ? global::System.IntPtr.Zero : WhitePoint.__Instance;
            var __ret = __Internal.CmsCreateLab4Profile(__arg0);
            return __ret;
        }

        public static global::System.IntPtr CmsCreateXYZProfileTHR(global::icms2_clr.CmsContextStruct ContextID)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsCreateXYZProfileTHR(__arg0);
            return __ret;
        }

        public static global::System.IntPtr CmsCreateXYZProfile()
        {
            var __ret = __Internal.CmsCreateXYZProfile();
            return __ret;
        }

        public static global::System.IntPtr CmsCreateSRGBProfileTHR(global::icms2_clr.CmsContextStruct ContextID)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsCreateSRGBProfileTHR(__arg0);
            return __ret;
        }

        public static global::System.IntPtr CmsCreateSRGBProfile()
        {
            var __ret = __Internal.CmsCreateSRGBProfile();
            return __ret;
        }

        public static global::System.IntPtr CmsCreateBCHSWabstractProfileTHR(global::icms2_clr.CmsContextStruct ContextID, uint nLUTPoints, double Bright, double Contrast, double Hue, double Saturation, uint TempSrc, uint TempDest)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsCreateBCHSWabstractProfileTHR(__arg0, nLUTPoints, Bright, Contrast, Hue, Saturation, TempSrc, TempDest);
            return __ret;
        }

        public static global::System.IntPtr CmsCreateBCHSWabstractProfile(uint nLUTPoints, double Bright, double Contrast, double Hue, double Saturation, uint TempSrc, uint TempDest)
        {
            var __ret = __Internal.CmsCreateBCHSWabstractProfile(nLUTPoints, Bright, Contrast, Hue, Saturation, TempSrc, TempDest);
            return __ret;
        }

        public static global::System.IntPtr CmsCreateNULLProfileTHR(global::icms2_clr.CmsContextStruct ContextID)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsCreateNULLProfileTHR(__arg0);
            return __ret;
        }

        public static global::System.IntPtr CmsCreateNULLProfile()
        {
            var __ret = __Internal.CmsCreateNULLProfile();
            return __ret;
        }

        public static global::System.IntPtr CmsTransform2DeviceLink(global::System.IntPtr hTransform, double Version, uint dwFlags)
        {
            var __ret = __Internal.CmsTransform2DeviceLink(hTransform, Version, dwFlags);
            return __ret;
        }

        public static uint CmsGetSupportedIntents(uint nMax, ref uint Codes, sbyte** Descriptions)
        {
            fixed (uint* __Codes1 = &Codes)
            {
                var __arg1 = __Codes1;
                var __ret = __Internal.CmsGetSupportedIntents(nMax, __arg1, Descriptions);
                return __ret;
            }
        }

        public static uint CmsGetSupportedIntentsTHR(global::icms2_clr.CmsContextStruct ContextID, uint nMax, ref uint Codes, sbyte** Descriptions)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            fixed (uint* __Codes2 = &Codes)
            {
                var __arg2 = __Codes2;
                var __ret = __Internal.CmsGetSupportedIntentsTHR(__arg0, nMax, __arg2, Descriptions);
                return __ret;
            }
        }

        public static global::System.IntPtr CmsCreateTransformTHR(global::icms2_clr.CmsContextStruct ContextID, global::System.IntPtr Input, uint InputFormat, global::System.IntPtr Output, uint OutputFormat, uint Intent, uint dwFlags)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsCreateTransformTHR(__arg0, Input, InputFormat, Output, OutputFormat, Intent, dwFlags);
            return __ret;
        }

        public static global::System.IntPtr CmsCreateTransform(global::System.IntPtr Input, uint InputFormat, global::System.IntPtr Output, uint OutputFormat, uint Intent, uint dwFlags)
        {
            var __ret = __Internal.CmsCreateTransform(Input, InputFormat, Output, OutputFormat, Intent, dwFlags);
            return __ret;
        }

        public static global::System.IntPtr CmsCreateProofingTransformTHR(global::icms2_clr.CmsContextStruct ContextID, global::System.IntPtr Input, uint InputFormat, global::System.IntPtr Output, uint OutputFormat, global::System.IntPtr Proofing, uint Intent, uint ProofingIntent, uint dwFlags)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsCreateProofingTransformTHR(__arg0, Input, InputFormat, Output, OutputFormat, Proofing, Intent, ProofingIntent, dwFlags);
            return __ret;
        }

        public static global::System.IntPtr CmsCreateProofingTransform(global::System.IntPtr Input, uint InputFormat, global::System.IntPtr Output, uint OutputFormat, global::System.IntPtr Proofing, uint Intent, uint ProofingIntent, uint dwFlags)
        {
            var __ret = __Internal.CmsCreateProofingTransform(Input, InputFormat, Output, OutputFormat, Proofing, Intent, ProofingIntent, dwFlags);
            return __ret;
        }

        public static global::System.IntPtr CmsCreateMultiprofileTransformTHR(global::icms2_clr.CmsContextStruct ContextID, global::System.IntPtr[] hProfiles, uint nProfiles, uint InputFormat, uint OutputFormat, uint Intent, uint dwFlags)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsCreateMultiprofileTransformTHR(__arg0, hProfiles, nProfiles, InputFormat, OutputFormat, Intent, dwFlags);
            return __ret;
        }

        public static global::System.IntPtr CmsCreateMultiprofileTransform(global::System.IntPtr[] hProfiles, uint nProfiles, uint InputFormat, uint OutputFormat, uint Intent, uint dwFlags)
        {
            var __ret = __Internal.CmsCreateMultiprofileTransform(hProfiles, nProfiles, InputFormat, OutputFormat, Intent, dwFlags);
            return __ret;
        }

        public static global::System.IntPtr CmsCreateExtendedTransform(global::icms2_clr.CmsContextStruct ContextID, uint nProfiles, global::System.IntPtr[] hProfiles, int[] BPC, uint[] Intents, double[] AdaptationStates, global::System.IntPtr hGamutProfile, uint nGamutPCSposition, uint InputFormat, uint OutputFormat, uint dwFlags)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsCreateExtendedTransform(__arg0, nProfiles, hProfiles, BPC, Intents, AdaptationStates, hGamutProfile, nGamutPCSposition, InputFormat, OutputFormat, dwFlags);
            return __ret;
        }

        public static void CmsDeleteTransform(global::System.IntPtr hTransform)
        {
            __Internal.CmsDeleteTransform(hTransform);
        }

        public static void CmsDoTransform(global::System.IntPtr Transform, global::System.IntPtr InputBuffer, global::System.IntPtr OutputBuffer, uint Size)
        {
            __Internal.CmsDoTransform(Transform, InputBuffer, OutputBuffer, Size);
        }

        public static void CmsDoTransformStride(global::System.IntPtr Transform, global::System.IntPtr InputBuffer, global::System.IntPtr OutputBuffer, uint Size, uint Stride)
        {
            __Internal.CmsDoTransformStride(Transform, InputBuffer, OutputBuffer, Size, Stride);
        }

        public static void CmsDoTransformLineStride(global::System.IntPtr Transform, global::System.IntPtr InputBuffer, global::System.IntPtr OutputBuffer, uint PixelsPerLine, uint LineCount, uint BytesPerLineIn, uint BytesPerLineOut, uint BytesPerPlaneIn, uint BytesPerPlaneOut)
        {
            __Internal.CmsDoTransformLineStride(Transform, InputBuffer, OutputBuffer, PixelsPerLine, LineCount, BytesPerLineIn, BytesPerLineOut, BytesPerPlaneIn, BytesPerPlaneOut);
        }

        public static void CmsSetAlarmCodes(ushort[] NewAlarm)
        {
            if (NewAlarm == null || NewAlarm.Length != 16)
                throw new ArgumentOutOfRangeException("NewAlarm", "The dimensions of the provided array don't match the required size.");
            __Internal.CmsSetAlarmCodes(NewAlarm);
        }

        public static void CmsGetAlarmCodes(ushort[] NewAlarm)
        {
            if (NewAlarm == null || NewAlarm.Length != 16)
                throw new ArgumentOutOfRangeException("NewAlarm", "The dimensions of the provided array don't match the required size.");
            __Internal.CmsGetAlarmCodes(NewAlarm);
        }

        public static void CmsSetAlarmCodesTHR(global::icms2_clr.CmsContextStruct ContextID, ushort[] AlarmCodes)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            if (AlarmCodes == null || AlarmCodes.Length != 16)
                throw new ArgumentOutOfRangeException("AlarmCodes", "The dimensions of the provided array don't match the required size.");
            __Internal.CmsSetAlarmCodesTHR(__arg0, AlarmCodes);
        }

        public static void CmsGetAlarmCodesTHR(global::icms2_clr.CmsContextStruct ContextID, ushort[] AlarmCodes)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            if (AlarmCodes == null || AlarmCodes.Length != 16)
                throw new ArgumentOutOfRangeException("AlarmCodes", "The dimensions of the provided array don't match the required size.");
            __Internal.CmsGetAlarmCodesTHR(__arg0, AlarmCodes);
        }

        public static double CmsSetAdaptationState(double d)
        {
            var __ret = __Internal.CmsSetAdaptationState(d);
            return __ret;
        }

        public static double CmsSetAdaptationStateTHR(global::icms2_clr.CmsContextStruct ContextID, double d)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsSetAdaptationStateTHR(__arg0, d);
            return __ret;
        }

        public static global::icms2_clr.CmsContextStruct CmsGetTransformContextID(global::System.IntPtr hTransform)
        {
            var __ret = __Internal.CmsGetTransformContextID(hTransform);
            global::icms2_clr.CmsContextStruct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::icms2_clr.CmsContextStruct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::icms2_clr.CmsContextStruct) global::icms2_clr.CmsContextStruct.NativeToManagedMap[__ret];
            else __result0 = global::icms2_clr.CmsContextStruct.__CreateInstance(__ret);
            return __result0;
        }

        public static uint CmsGetTransformInputFormat(global::System.IntPtr hTransform)
        {
            var __ret = __Internal.CmsGetTransformInputFormat(hTransform);
            return __ret;
        }

        public static uint CmsGetTransformOutputFormat(global::System.IntPtr hTransform)
        {
            var __ret = __Internal.CmsGetTransformOutputFormat(hTransform);
            return __ret;
        }

        public static int CmsChangeBuffersFormat(global::System.IntPtr hTransform, uint InputFormat, uint OutputFormat)
        {
            var __ret = __Internal.CmsChangeBuffersFormat(hTransform, InputFormat, OutputFormat);
            return __ret;
        }

        public static uint CmsGetPostScriptColorResource(global::icms2_clr.CmsContextStruct ContextID, global::icms2_clr.CmsPSResourceType Type, global::System.IntPtr hProfile, uint Intent, uint dwFlags, global::icms2_clr.CmsIoHandler io)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __arg5 = ReferenceEquals(io, null) ? global::System.IntPtr.Zero : io.__Instance;
            var __ret = __Internal.CmsGetPostScriptColorResource(__arg0, Type, hProfile, Intent, dwFlags, __arg5);
            return __ret;
        }

        public static uint CmsGetPostScriptCSA(global::icms2_clr.CmsContextStruct ContextID, global::System.IntPtr hProfile, uint Intent, uint dwFlags, global::System.IntPtr Buffer, uint dwBufferLen)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsGetPostScriptCSA(__arg0, hProfile, Intent, dwFlags, Buffer, dwBufferLen);
            return __ret;
        }

        public static uint CmsGetPostScriptCRD(global::icms2_clr.CmsContextStruct ContextID, global::System.IntPtr hProfile, uint Intent, uint dwFlags, global::System.IntPtr Buffer, uint dwBufferLen)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsGetPostScriptCRD(__arg0, hProfile, Intent, dwFlags, Buffer, dwBufferLen);
            return __ret;
        }

        public static global::System.IntPtr CmsIT8Alloc(global::icms2_clr.CmsContextStruct ContextID)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsIT8Alloc(__arg0);
            return __ret;
        }

        public static void CmsIT8Free(global::System.IntPtr hIT8)
        {
            __Internal.CmsIT8Free(hIT8);
        }

        public static uint CmsIT8TableCount(global::System.IntPtr hIT8)
        {
            var __ret = __Internal.CmsIT8TableCount(hIT8);
            return __ret;
        }

        public static int CmsIT8SetTable(global::System.IntPtr hIT8, uint nTable)
        {
            var __ret = __Internal.CmsIT8SetTable(hIT8, nTable);
            return __ret;
        }

        public static global::System.IntPtr CmsIT8LoadFromFile(global::icms2_clr.CmsContextStruct ContextID, string cFileName)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsIT8LoadFromFile(__arg0, cFileName);
            return __ret;
        }

        public static global::System.IntPtr CmsIT8LoadFromMem(global::icms2_clr.CmsContextStruct ContextID, global::System.IntPtr Ptr, uint len)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsIT8LoadFromMem(__arg0, Ptr, len);
            return __ret;
        }

        public static int CmsIT8SaveToFile(global::System.IntPtr hIT8, string cFileName)
        {
            var __ret = __Internal.CmsIT8SaveToFile(hIT8, cFileName);
            return __ret;
        }

        public static int CmsIT8SaveToMem(global::System.IntPtr hIT8, global::System.IntPtr MemPtr, ref uint BytesNeeded)
        {
            fixed (uint* __BytesNeeded2 = &BytesNeeded)
            {
                var __arg2 = __BytesNeeded2;
                var __ret = __Internal.CmsIT8SaveToMem(hIT8, MemPtr, __arg2);
                return __ret;
            }
        }

        public static string CmsIT8GetSheetType(global::System.IntPtr hIT8)
        {
            var __ret = __Internal.CmsIT8GetSheetType(hIT8);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static int CmsIT8SetSheetType(global::System.IntPtr hIT8, string Type)
        {
            var __ret = __Internal.CmsIT8SetSheetType(hIT8, Type);
            return __ret;
        }

        public static int CmsIT8SetComment(global::System.IntPtr hIT8, string cComment)
        {
            var __ret = __Internal.CmsIT8SetComment(hIT8, cComment);
            return __ret;
        }

        public static int CmsIT8SetPropertyStr(global::System.IntPtr hIT8, string cProp, string Str)
        {
            var __ret = __Internal.CmsIT8SetPropertyStr(hIT8, cProp, Str);
            return __ret;
        }

        public static int CmsIT8SetPropertyDbl(global::System.IntPtr hIT8, string cProp, double Val)
        {
            var __ret = __Internal.CmsIT8SetPropertyDbl(hIT8, cProp, Val);
            return __ret;
        }

        public static int CmsIT8SetPropertyHex(global::System.IntPtr hIT8, string cProp, uint Val)
        {
            var __ret = __Internal.CmsIT8SetPropertyHex(hIT8, cProp, Val);
            return __ret;
        }

        public static int CmsIT8SetPropertyMulti(global::System.IntPtr hIT8, string Key, string SubKey, string Buffer)
        {
            var __ret = __Internal.CmsIT8SetPropertyMulti(hIT8, Key, SubKey, Buffer);
            return __ret;
        }

        public static int CmsIT8SetPropertyUncooked(global::System.IntPtr hIT8, string Key, string Buffer)
        {
            var __ret = __Internal.CmsIT8SetPropertyUncooked(hIT8, Key, Buffer);
            return __ret;
        }

        public static string CmsIT8GetProperty(global::System.IntPtr hIT8, string cProp)
        {
            var __ret = __Internal.CmsIT8GetProperty(hIT8, cProp);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static double CmsIT8GetPropertyDbl(global::System.IntPtr hIT8, string cProp)
        {
            var __ret = __Internal.CmsIT8GetPropertyDbl(hIT8, cProp);
            return __ret;
        }

        public static string CmsIT8GetPropertyMulti(global::System.IntPtr hIT8, string Key, string SubKey)
        {
            var __ret = __Internal.CmsIT8GetPropertyMulti(hIT8, Key, SubKey);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static uint CmsIT8EnumProperties(global::System.IntPtr hIT8, sbyte*** PropertyNames)
        {
            var __ret = __Internal.CmsIT8EnumProperties(hIT8, PropertyNames);
            return __ret;
        }

        public static uint CmsIT8EnumPropertyMulti(global::System.IntPtr hIT8, string cProp, sbyte*** SubpropertyNames)
        {
            var __ret = __Internal.CmsIT8EnumPropertyMulti(hIT8, cProp, SubpropertyNames);
            return __ret;
        }

        public static string CmsIT8GetDataRowCol(global::System.IntPtr hIT8, int row, int col)
        {
            var __ret = __Internal.CmsIT8GetDataRowCol(hIT8, row, col);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static double CmsIT8GetDataRowColDbl(global::System.IntPtr hIT8, int row, int col)
        {
            var __ret = __Internal.CmsIT8GetDataRowColDbl(hIT8, row, col);
            return __ret;
        }

        public static int CmsIT8SetDataRowCol(global::System.IntPtr hIT8, int row, int col, string Val)
        {
            var __ret = __Internal.CmsIT8SetDataRowCol(hIT8, row, col, Val);
            return __ret;
        }

        public static int CmsIT8SetDataRowColDbl(global::System.IntPtr hIT8, int row, int col, double Val)
        {
            var __ret = __Internal.CmsIT8SetDataRowColDbl(hIT8, row, col, Val);
            return __ret;
        }

        public static string CmsIT8GetData(global::System.IntPtr hIT8, string cPatch, string cSample)
        {
            var __ret = __Internal.CmsIT8GetData(hIT8, cPatch, cSample);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static double CmsIT8GetDataDbl(global::System.IntPtr hIT8, string cPatch, string cSample)
        {
            var __ret = __Internal.CmsIT8GetDataDbl(hIT8, cPatch, cSample);
            return __ret;
        }

        public static int CmsIT8SetData(global::System.IntPtr hIT8, string cPatch, string cSample, string Val)
        {
            var __ret = __Internal.CmsIT8SetData(hIT8, cPatch, cSample, Val);
            return __ret;
        }

        public static int CmsIT8SetDataDbl(global::System.IntPtr hIT8, string cPatch, string cSample, double Val)
        {
            var __ret = __Internal.CmsIT8SetDataDbl(hIT8, cPatch, cSample, Val);
            return __ret;
        }

        public static int CmsIT8FindDataFormat(global::System.IntPtr hIT8, string cSample)
        {
            var __ret = __Internal.CmsIT8FindDataFormat(hIT8, cSample);
            return __ret;
        }

        public static int CmsIT8SetDataFormat(global::System.IntPtr hIT8, int n, string Sample)
        {
            var __ret = __Internal.CmsIT8SetDataFormat(hIT8, n, Sample);
            return __ret;
        }

        public static int CmsIT8EnumDataFormat(global::System.IntPtr hIT8, sbyte*** SampleNames)
        {
            var __ret = __Internal.CmsIT8EnumDataFormat(hIT8, SampleNames);
            return __ret;
        }

        public static string CmsIT8GetPatchName(global::System.IntPtr hIT8, int nPatch, sbyte* buffer)
        {
            var __ret = __Internal.CmsIT8GetPatchName(hIT8, nPatch, buffer);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static int CmsIT8GetPatchByName(global::System.IntPtr hIT8, string cPatch)
        {
            var __ret = __Internal.CmsIT8GetPatchByName(hIT8, cPatch);
            return __ret;
        }

        public static int CmsIT8SetTableByLabel(global::System.IntPtr hIT8, string cSet, string cField, string ExpectedType)
        {
            var __ret = __Internal.CmsIT8SetTableByLabel(hIT8, cSet, cField, ExpectedType);
            return __ret;
        }

        public static int CmsIT8SetIndexColumn(global::System.IntPtr hIT8, string cSample)
        {
            var __ret = __Internal.CmsIT8SetIndexColumn(hIT8, cSample);
            return __ret;
        }

        public static void CmsIT8DefineDblFormat(global::System.IntPtr hIT8, string Formatter)
        {
            __Internal.CmsIT8DefineDblFormat(hIT8, Formatter);
        }

        public static global::System.IntPtr CmsGBDAlloc(global::icms2_clr.CmsContextStruct ContextID)
        {
            var __arg0 = ReferenceEquals(ContextID, null) ? global::System.IntPtr.Zero : ContextID.__Instance;
            var __ret = __Internal.CmsGBDAlloc(__arg0);
            return __ret;
        }

        public static void CmsGBDFree(global::System.IntPtr hGBD)
        {
            __Internal.CmsGBDFree(hGBD);
        }

        public static int CmsGDBAddPoint(global::System.IntPtr hGBD, global::icms2_clr.CmsCIELab Lab)
        {
            var __arg1 = ReferenceEquals(Lab, null) ? global::System.IntPtr.Zero : Lab.__Instance;
            var __ret = __Internal.CmsGDBAddPoint(hGBD, __arg1);
            return __ret;
        }

        public static int CmsGDBCompute(global::System.IntPtr hGDB, uint dwFlags)
        {
            var __ret = __Internal.CmsGDBCompute(hGDB, dwFlags);
            return __ret;
        }

        public static int CmsGDBCheckPoint(global::System.IntPtr hGBD, global::icms2_clr.CmsCIELab Lab)
        {
            var __arg1 = ReferenceEquals(Lab, null) ? global::System.IntPtr.Zero : Lab.__Instance;
            var __ret = __Internal.CmsGDBCheckPoint(hGBD, __arg1);
            return __ret;
        }

        public static int CmsDetectBlackPoint(global::icms2_clr.CmsCIEXYZ BlackPoint, global::System.IntPtr hProfile, uint Intent, uint dwFlags)
        {
            var __arg0 = ReferenceEquals(BlackPoint, null) ? global::System.IntPtr.Zero : BlackPoint.__Instance;
            var __ret = __Internal.CmsDetectBlackPoint(__arg0, hProfile, Intent, dwFlags);
            return __ret;
        }

        public static int CmsDetectDestinationBlackPoint(global::icms2_clr.CmsCIEXYZ BlackPoint, global::System.IntPtr hProfile, uint Intent, uint dwFlags)
        {
            var __arg0 = ReferenceEquals(BlackPoint, null) ? global::System.IntPtr.Zero : BlackPoint.__Instance;
            var __ret = __Internal.CmsDetectDestinationBlackPoint(__arg0, hProfile, Intent, dwFlags);
            return __ret;
        }

        public static double CmsDetectTAC(global::System.IntPtr hProfile)
        {
            var __ret = __Internal.CmsDetectTAC(hProfile);
            return __ret;
        }

        public static int CmsDesaturateLab(global::icms2_clr.CmsCIELab Lab, double amax, double amin, double bmax, double bmin)
        {
            var __arg0 = ReferenceEquals(Lab, null) ? global::System.IntPtr.Zero : Lab.__Instance;
            var __ret = __Internal.CmsDesaturateLab(__arg0, amax, amin, bmax, bmin);
            return __ret;
        }
    }
}
